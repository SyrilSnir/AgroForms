
.block__undefined h2 {
   color: red;
}


.label[data-v-a37ba566] {
    font-weight: bold;
}


.additional-equipment__list li[data-v-7e81879a] {
    cursor: pointer;
}
td.total[data-v-7e81879a] {
    text-align: right;
    font-weight: bold;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/