(window.webpackJsonp=window.webpackJsonp||[]).push([[1],[function(t,e,r){"use strict";var s=r(3),i=Object.prototype.toString;function n(t){return"[object Array]"===i.call(t)}function a(t){return void 0===t}function o(t){return null!==t&&"object"==typeof t}function c(t){return"[object Function]"===i.call(t)}function u(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),n(t))for(var r=0,s=t.length;r<s;r++)e.call(null,t[r],r,t);else for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.call(null,t[i],i,t)}t.exports={isArray:n,isArrayBuffer:function(t){return"[object ArrayBuffer]"===i.call(t)},isBuffer:function(t){return null!==t&&!a(t)&&null!==t.constructor&&!a(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:o,isUndefined:a,isDate:function(t){return"[object Date]"===i.call(t)},isFile:function(t){return"[object File]"===i.call(t)},isBlob:function(t){return"[object Blob]"===i.call(t)},isFunction:c,isStream:function(t){return o(t)&&c(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:u,merge:function t(){var e={};function r(r,s){"object"==typeof e[s]&&"object"==typeof r?e[s]=t(e[s],r):e[s]=r}for(var s=0,i=arguments.length;s<i;s++)u(arguments[s],r);return e},deepMerge:function t(){var e={};function r(r,s){"object"==typeof e[s]&&"object"==typeof r?e[s]=t(e[s],r):e[s]="object"==typeof r?t({},r):r}for(var s=0,i=arguments.length;s<i;s++)u(arguments[s],r);return e},extend:function(t,e,r){return u(e,(function(e,i){t[i]=r&&"function"==typeof e?s(e,r):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,r){"use strict";function s(t,e,r,s,i,n,a,o){var c,u="function"==typeof t?t.options:t;if(e&&(u.render=e,u.staticRenderFns=r,u._compiled=!0),s&&(u.functional=!0),n&&(u._scopeId="data-v-"+n),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),i&&i.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},u._ssrRegister=c):i&&(c=o?function(){i.call(this,(u.functional?this.parent:this).$root.$options.shadowRoot)}:i),c)if(u.functional){u._injectStyles=c;var l=u.render;u.render=function(t,e){return c.call(e),l(t,e)}}else{var d=u.beforeCreate;u.beforeCreate=d?[].concat(d,c):[c]}return{exports:t,options:u}}r.d(e,"a",(function(){return s}))},function(t,e,r){t.exports=r(11)},function(t,e,r){"use strict";t.exports=function(t,e){return function(){for(var r=new Array(arguments.length),s=0;s<r.length;s++)r[s]=arguments[s];return t.apply(e,r)}}},function(t,e,r){"use strict";var s=r(0);function i(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,r){if(!e)return t;var n;if(r)n=r(e);else if(s.isURLSearchParams(e))n=e.toString();else{var a=[];s.forEach(e,(function(t,e){null!=t&&(s.isArray(t)?e+="[]":t=[t],s.forEach(t,(function(t){s.isDate(t)?t=t.toISOString():s.isObject(t)&&(t=JSON.stringify(t)),a.push(i(e)+"="+i(t))})))})),n=a.join("&")}if(n){var o=t.indexOf("#");-1!==o&&(t=t.slice(0,o)),t+=(-1===t.indexOf("?")?"?":"&")+n}return t}},function(t,e,r){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,r){"use strict";(function(e){var s=r(0),i=r(17),n={"Content-Type":"application/x-www-form-urlencoded"};function a(t,e){!s.isUndefined(t)&&s.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var o,c={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==e&&"[object process]"===Object.prototype.toString.call(e))&&(o=r(7)),o),transformRequest:[function(t,e){return i(e,"Accept"),i(e,"Content-Type"),s.isFormData(t)||s.isArrayBuffer(t)||s.isBuffer(t)||s.isStream(t)||s.isFile(t)||s.isBlob(t)?t:s.isArrayBufferView(t)?t.buffer:s.isURLSearchParams(t)?(a(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):s.isObject(t)?(a(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};c.headers={common:{Accept:"application/json, text/plain, */*"}},s.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),s.forEach(["post","put","patch"],(function(t){c.headers[t]=s.merge(n)})),t.exports=c}).call(this,r(16))},function(t,e,r){"use strict";var s=r(0),i=r(18),n=r(4),a=r(20),o=r(23),c=r(24),u=r(8);t.exports=function(t){return new Promise((function(e,l){var d=t.data,p=t.headers;s.isFormData(d)&&delete p["Content-Type"];var h=new XMLHttpRequest;if(t.auth){var m=t.auth.username||"",f=t.auth.password||"";p.Authorization="Basic "+btoa(m+":"+f)}var v=a(t.baseURL,t.url);if(h.open(t.method.toUpperCase(),n(v,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in h?o(h.getAllResponseHeaders()):null,s={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:r,config:t,request:h};i(e,l,s),h=null}},h.onabort=function(){h&&(l(u("Request aborted",t,"ECONNABORTED",h)),h=null)},h.onerror=function(){l(u("Network Error",t,null,h)),h=null},h.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),l(u(e,t,"ECONNABORTED",h)),h=null},s.isStandardBrowserEnv()){var g=r(25),_=(t.withCredentials||c(v))&&t.xsrfCookieName?g.read(t.xsrfCookieName):void 0;_&&(p[t.xsrfHeaderName]=_)}if("setRequestHeader"in h&&s.forEach(p,(function(t,e){void 0===d&&"content-type"===e.toLowerCase()?delete p[e]:h.setRequestHeader(e,t)})),s.isUndefined(t.withCredentials)||(h.withCredentials=!!t.withCredentials),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){h&&(h.abort(),l(t),h=null)})),void 0===d&&(d=null),h.send(d)}))}},function(t,e,r){"use strict";var s=r(19);t.exports=function(t,e,r,i,n){var a=new Error(t);return s(a,e,r,i,n)}},function(t,e,r){"use strict";var s=r(0);t.exports=function(t,e){e=e||{};var r={},i=["url","method","params","data"],n=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];s.forEach(i,(function(t){void 0!==e[t]&&(r[t]=e[t])})),s.forEach(n,(function(i){s.isObject(e[i])?r[i]=s.deepMerge(t[i],e[i]):void 0!==e[i]?r[i]=e[i]:s.isObject(t[i])?r[i]=s.deepMerge(t[i]):void 0!==t[i]&&(r[i]=t[i])})),s.forEach(a,(function(s){void 0!==e[s]?r[s]=e[s]:void 0!==t[s]&&(r[s]=t[s])}));var o=i.concat(n).concat(a),c=Object.keys(e).filter((function(t){return-1===o.indexOf(t)}));return s.forEach(c,(function(s){void 0!==e[s]?r[s]=e[s]:void 0!==t[s]&&(r[s]=t[s])})),r}},function(t,e,r){"use strict";function s(t){this.message=t}s.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},s.prototype.__CANCEL__=!0,t.exports=s},function(t,e,r){"use strict";var s=r(0),i=r(3),n=r(12),a=r(9);function o(t){var e=new n(t),r=i(n.prototype.request,e);return s.extend(r,n.prototype,e),s.extend(r,e),r}var c=o(r(6));c.Axios=n,c.create=function(t){return o(a(c.defaults,t))},c.Cancel=r(10),c.CancelToken=r(26),c.isCancel=r(5),c.all=function(t){return Promise.all(t)},c.spread=r(27),t.exports=c,t.exports.default=c},function(t,e,r){"use strict";var s=r(0),i=r(4),n=r(13),a=r(14),o=r(9);function c(t){this.defaults=t,this.interceptors={request:new n,response:new n}}c.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=o(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[a,void 0],r=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)r=r.then(e.shift(),e.shift());return r},c.prototype.getUri=function(t){return t=o(this.defaults,t),i(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},s.forEach(["delete","get","head","options"],(function(t){c.prototype[t]=function(e,r){return this.request(s.merge(r||{},{method:t,url:e}))}})),s.forEach(["post","put","patch"],(function(t){c.prototype[t]=function(e,r,i){return this.request(s.merge(i||{},{method:t,url:e,data:r}))}})),t.exports=c},function(t,e,r){"use strict";var s=r(0);function i(){this.handlers=[]}i.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},i.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},i.prototype.forEach=function(t){s.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=i},function(t,e,r){"use strict";var s=r(0),i=r(15),n=r(5),a=r(6);function o(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return o(t),t.headers=t.headers||{},t.data=i(t.data,t.headers,t.transformRequest),t.headers=s.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),s.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||a.adapter)(t).then((function(e){return o(t),e.data=i(e.data,e.headers,t.transformResponse),e}),(function(e){return n(e)||(o(t),e&&e.response&&(e.response.data=i(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},function(t,e,r){"use strict";var s=r(0);t.exports=function(t,e,r){return s.forEach(r,(function(r){t=r(t,e)})),t}},function(t,e){var r,s,i=t.exports={};function n(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function o(t){if(r===setTimeout)return setTimeout(t,0);if((r===n||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:n}catch(t){r=n}try{s="function"==typeof clearTimeout?clearTimeout:a}catch(t){s=a}}();var c,u=[],l=!1,d=-1;function p(){l&&c&&(l=!1,c.length?u=c.concat(u):d=-1,u.length&&h())}function h(){if(!l){var t=o(p);l=!0;for(var e=u.length;e;){for(c=u,u=[];++d<e;)c&&c[d].run();d=-1,e=u.length}c=null,l=!1,function(t){if(s===clearTimeout)return clearTimeout(t);if((s===a||!s)&&clearTimeout)return s=clearTimeout,clearTimeout(t);try{s(t)}catch(e){try{return s.call(null,t)}catch(e){return s.call(this,t)}}}(t)}}function m(t,e){this.fun=t,this.array=e}function f(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)e[r-1]=arguments[r];u.push(new m(t,e)),1!==u.length||l||o(h)},m.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=f,i.addListener=f,i.once=f,i.off=f,i.removeListener=f,i.removeAllListeners=f,i.emit=f,i.prependListener=f,i.prependOnceListener=f,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,r){"use strict";var s=r(0);t.exports=function(t,e){s.forEach(t,(function(r,s){s!==e&&s.toUpperCase()===e.toUpperCase()&&(t[e]=r,delete t[s])}))}},function(t,e,r){"use strict";var s=r(8);t.exports=function(t,e,r){var i=r.config.validateStatus;!i||i(r.status)?t(r):e(s("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(t,e,r){"use strict";t.exports=function(t,e,r,s,i){return t.config=e,r&&(t.code=r),t.request=s,t.response=i,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},function(t,e,r){"use strict";var s=r(21),i=r(22);t.exports=function(t,e){return t&&!s(e)?i(t,e):e}},function(t,e,r){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,r){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,r){"use strict";var s=r(0),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,r,n,a={};return t?(s.forEach(t.split("\n"),(function(t){if(n=t.indexOf(":"),e=s.trim(t.substr(0,n)).toLowerCase(),r=s.trim(t.substr(n+1)),e){if(a[e]&&i.indexOf(e)>=0)return;a[e]="set-cookie"===e?(a[e]?a[e]:[]).concat([r]):a[e]?a[e]+", "+r:r}})),a):a}},function(t,e,r){"use strict";var s=r(0);t.exports=s.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function i(t){var s=t;return e&&(r.setAttribute("href",s),s=r.href),r.setAttribute("href",s),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return t=i(window.location.href),function(e){var r=s.isString(e)?i(e):e;return r.protocol===t.protocol&&r.host===t.host}}():function(){return!0}},function(t,e,r){"use strict";var s=r(0);t.exports=s.isStandardBrowserEnv()?{write:function(t,e,r,i,n,a){var o=[];o.push(t+"="+encodeURIComponent(e)),s.isNumber(r)&&o.push("expires="+new Date(r).toGMTString()),s.isString(i)&&o.push("path="+i),s.isString(n)&&o.push("domain="+n),!0===a&&o.push("secure"),document.cookie=o.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,r){"use strict";var s=r(10);function i(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var r=this;t((function(t){r.reason||(r.reason=new s(t),e(r.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var t;return{token:new i((function(e){t=e})),cancel:t}},t.exports=i},function(t,e,r){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},,function(t,e,r){},,,,,,,,,function(t,e,r){"use strict";var s=r(29);r.n(s).a},function(t,e,r){"use strict";r.r(e);var s=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"card card-primary"},[r("div",{staticClass:"card-header"},[t._v("\n        "+t._s(t.title)+"\n    ")]),t._v(" "),r("div",{staticClass:"card-body"},[t._l(t.elements,(function(e){return[e.isGroup?t._e():r("el",{attrs:{unitData:e},on:{modification:t.fieldsModificate}}),t._v(" "),e.isGroup?r("group",{attrs:{fields:e.fields,title:e.name},on:{modification:t.fieldsModificate}}):t._e()]})),t._v(" "),t.isComputed?r("computed",{attrs:{total:t.totalPrice}}):t._e(),t._v(" "),r("div",{staticClass:"card-footer"},[r("button",{staticClass:"btn btn-primary",attrs:{type:"button"},on:{click:t.saveDraft}},[t._v("Сохранить черновик")]),t._v(" "),r("button",{staticClass:"btn btn-success",attrs:{type:"button"},on:{click:t.formSubmit}},[t._v("Отправить заявку")]),t._v(" "),r("button",{staticClass:"btn btn-secondary",attrs:{type:"button"},on:{click:t.cancel}},[t._v("Отмена")])])],2)])};s._withStripped=!0;var i=r(2),n=r.n(i),a=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"comp"},[e(this.currentElement,{tag:"component",attrs:{params:this.unitData},on:{changeField:this.fieldChanged}})],1)};a._withStripped=!0;var o=function(){var t=this.$createElement;return(this._self._c||t)("div",{staticClass:"important",domProps:{innerHTML:this._s(this.parameters.html)}})};o._withStripped=!0;const c={props:["params"],data(){return{parameters:this.params.parameters,required:this.params.parameters.required,unit:this.params.parameters.unitName}}};var u={mixins:[c]},l=r(1),d=Object(l.a)(u,o,[],!1,null,null,null);d.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/ImportantBlock.vue";var p=d.exports,h=function(){var t=this.$createElement;return(this._self._c||t)("h3",[this._v(this._s(this.parameters.text))])};h._withStripped=!0;var m={mixins:[c]},f=Object(l.a)(m,h,[],!1,null,null,null);f.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/HeaderBlock.vue";var v=f.exports,g=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"form-group"},[r("div",{staticClass:"custom-control custom-checkbox"},[r("input",{directives:[{name:"model",rawName:"v-model",value:t.checked,expression:"checked"}],staticClass:"custom-control-input",attrs:{type:"checkbox",id:t.id},domProps:{checked:Array.isArray(t.checked)?t._i(t.checked,null)>-1:t.checked},on:{change:[function(e){var r=t.checked,s=e.target,i=!!s.checked;if(Array.isArray(r)){var n=t._i(r,null);s.checked?n<0&&(t.checked=r.concat([null])):n>-1&&(t.checked=r.slice(0,n).concat(r.slice(n+1)))}else t.checked=i},t.change]}}),t._v(" "),r("label",{staticClass:"custom-control-label",attrs:{for:t.id}},[t._v(t._s(t.params.name))])])])};g._withStripped=!0;var _={data(){return{id:"id"+this.params.id,checked:this.params.value,valid:!0}},mixins:[c],created(){this.$emit("changeField",this.getData())},methods:{change(){this.params.value=this.checked,this.$emit("changeField",this.getData())},getData(){return{id:this.id,data:{value:this.params.value},valid:this.valid}}}},y=Object(l.a)(_,g,[],!1,null,null,null);y.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/CheckBoxBlock.vue";var b=y.exports,C=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"form-group",class:{required:t.required}},[r("label",{attrs:{for:t.id}},[t._v(t._s(t.params.name))]),t._v(" "),r("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":t.hasErrorsForShow()},attrs:{id:t.id,type:"text",placeholder:"Enter ..."},domProps:{value:t.val},on:{change:function(e){return t.onChange(e)},input:function(e){e.target.composing||(t.val=e.target.value)}}}),t._v(" "),t.hasErrorsForShow()?r("div",{staticClass:"help-block"},[t._v(t._s(t.errors.required.message))]):t._e()])};C._withStripped=!0;const w=new Vue({methods:{validate(){this.$emit("validate")},showErrors(){this.$emit("showErrors")}}});var E={data(){return{id:"id"+this.params.id,val:this.params.value,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"}}}},mixins:[c],created(){this.$emit("changeField",this.getData()),w.$on("showErrors",()=>this.showErrors=!0),w.$on("validate",()=>{this.validate(),this.$emit("changeField",this.getData())})},methods:{validate(){this.valid=!0,this.currentError=null,""==this.val&&this.required&&(this.currentError=this.errors.required,this.valid=!1)},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(t){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){return{id:this.id,data:{value:this.val},valid:this.valid}}}},x=Object(l.a)(E,C,[],!1,null,null,null);x.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/TextInputBlock.vue";var k=x.exports,F=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"form-group"},[r("label",{attrs:{for:t.id}},[t._v(t._s(t.params.name))]),t._v(" "),r("div",{staticClass:"input-group"},[r("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":t.hasErrorsForShow()},attrs:{id:t.id,type:"text",placeholder:"Enter ..."},domProps:{value:t.val},on:{change:function(e){return t.onChange(e)},input:function(e){e.target.composing||(t.val=e.target.value)}}}),t._v(" "),t.unit?r("div",{staticClass:"input-group-append"},[r("span",{staticClass:"input-group-text"},[t._v(t._s(t.unit))])]):t._e(),t._v(" "),t.isComputed?r("div",{staticClass:"input-group-append"},[r("span",{staticClass:"input-group-text"},[t._v("x"),r("span",{staticClass:"price"},[t._v(t._s(+t.unitPrice))]),t._v(" РУБ")])]):t._e(),t._v(" "),t.isComputed?r("div",{staticClass:"input-group-append"},[r("span",{staticClass:"input-group-text"},[t._v("="),r("span",{staticClass:"price"},[t._v(t._s(t.total))]),t._v(" РУБ")])]):t._e()]),t._v(" "),t.hasErrorsForShow()?r("div",{staticClass:"help-block"},[t._v(t._s(t.currentError.message))]):t._e()])};F._withStripped=!0;const D={data(){return{isComputed:this.params.parameters.isComputed,unitPrice:+this.params.parameters.unitPrice}}};var S={data(){return{id:"id"+this.params.id,val:this.params.value,currentError:null,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"},notNumber:{message:"Заполняемое поле должно быть числом"}}}},computed:{total(){if(!this.isComputed)return 0;return+this.val*+this.unitPrice}},mixins:[c,D],created(){this.$emit("changeField",this.getData()),w.$on("showErrors",()=>this.showErrors=!0),w.$on("validate",()=>{this.validate(),this.$emit("changeField",this.getData())})},methods:{isNumber:t=>/^\d+$/.test(t),validate(){return this.valid=!0,this.currentError=null,""==this.val?this.required?(this.currentError=this.errors.required,void(this.valid=!1)):void 0:this.isNumber(this.val)?void 0:(this.currentError=this.errors.notNumber,void(this.valid=!1))},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(t){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.val},valid:this.valid};return this.validate(),this.isComputed&&(t.computed=!0,t.total=this.total),t}}},T=Object(l.a)(S,F,[],!1,null,null,null);T.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/NumberInputBlock.vue";var N=T.exports,$=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"form-group"},[r("div",{staticClass:"custom-control custom-checkbox"},[r("input",{directives:[{name:"model",rawName:"v-model",value:t.checked,expression:"checked"}],staticClass:"custom-control-input",attrs:{type:"checkbox",id:t.id},domProps:{checked:Array.isArray(t.checked)?t._i(t.checked,null)>-1:t.checked},on:{change:[function(e){var r=t.checked,s=e.target,i=!!s.checked;if(Array.isArray(r)){var n=t._i(r,null);s.checked?n<0&&(t.checked=r.concat([null])):n>-1&&(t.checked=r.slice(0,n).concat(r.slice(n+1)))}else t.checked=i},t.change]}}),t._v(" "),r("label",{staticClass:"custom-control-label",attrs:{for:t.id}},[t._v(t._s(t.params.name))])]),t._v(" "),t.checked?r("div",{staticClass:"input-block"},[r("div",{staticClass:"input-group"},[r("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":t.hasErrorsForShow()},attrs:{id:t.id,type:"text",placeholder:"Enter ..."},domProps:{value:t.val},on:{change:function(e){return t.onChange(e)},input:function(e){e.target.composing||(t.val=e.target.value)}}}),t._v(" "),t.unit?r("div",{staticClass:"input-group-append"},[r("span",{staticClass:"input-group-text"},[t._v(t._s(t.unit))])]):t._e(),t._v(" "),t.isComputed?r("div",{staticClass:"input-group-append"},[r("span",{staticClass:"input-group-text"},[t._v("x"),r("span",{staticClass:"price"},[t._v(t._s(+t.unitPrice))]),t._v(" РУБ")])]):t._e(),t._v(" "),t.isComputed?r("div",{staticClass:"input-group-append"},[r("span",{staticClass:"input-group-text"},[t._v("="),r("span",{staticClass:"price"},[t._v(t._s(t.total))]),t._v(" РУБ")])]):t._e()]),t._v(" "),t.hasErrorsForShow()?r("div",{staticClass:"help-block"},[t._v(t._s(t.currentError.message))]):t._e()]):t._e()])};$._withStripped=!0;var j={data(){return{id:"id"+this.params.id,val:this.params.value,checked:this.params.checked,currentError:null,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"},notNumber:{message:"Заполняемое поле должно быть числом"}}}},mixins:[c,D],computed:{total(){if(!this.isComputed||!this.checked)return 0;return+this.val*+this.unitPrice}},created(){this.$emit("changeField",this.getData()),w.$on("showErrors",()=>this.showErrors=!0),w.$on("validate",()=>{this.validate(),this.$emit("changeField",this.getData())})},methods:{change(){this.$emit("changeField",this.getData())},isNumber:t=>/^\d+$/.test(t),validate(){if(this.valid=!0,this.checked)return this.currentError=null,""==this.val?this.required?(this.currentError=this.errors.required,void(this.valid=!1)):void 0:this.isNumber(this.val)?void 0:(this.currentError=this.errors.notNumber,void(this.valid=!1))},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(t){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){this.validate();let t={id:this.id,data:{value:this.val,checked:this.checked},valid:this.valid};return this.isComputed&&this.checked&&(t.computed=!0,t.total=this.total),t}}},A=Object(l.a)(j,$,[],!1,null,null,null);A.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/CheckNumberInput.vue";var P=A.exports,O=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"form-group"},[r("select",{directives:[{name:"model",rawName:"v-model",value:t.selected,expression:"selected"}],staticClass:"form-control",attrs:{name:t.id,id:t.id},on:{change:[function(e){var r=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.selected=e.target.multiple?r:r[0]},t.change]}},t._l(t.enums,(function(e){return r("option",{domProps:{value:e.value}},[t._v(t._s(e.name))])})),0)])};O._withStripped=!0;const R={data(){return{enums:this.params.enumsList}}};var L={data(){return{id:"id"+this.params.id,valid:!0,selected:this.params.value}},computed:{total(){return this.isComputed?+this.selected:0}},created(){this.$emit("changeField",this.getData())},methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(t.computed=!0,t.total=this.total),t}},mixins:[c,R,D]},q=Object(l.a)(L,O,[],!1,null,"1c6ee5f4",null);q.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/SelectBlock.vue";var U=q.exports,B=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"form-group"},[r("select",{directives:[{name:"model",rawName:"v-model",value:t.selected,expression:"selected"}],staticClass:"form-control",attrs:{name:t.id,id:t.id,multiple:""},on:{change:[function(e){var r=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.selected=e.target.multiple?r:r[0]},t.change]}},t._l(t.enums,(function(e){return r("option",{domProps:{value:e.value}},[t._v(t._s(e.name))])})),0)])};B._withStripped=!0;var I={data(){let t=Array.isArray(this.params.value)?this.params.value:[];return{id:"id"+this.params.id,valid:!0,selected:t}},computed:{total(){if(!this.isComputed)return 0;let t=0;for(const e of this.selected)t+=+e;return t}},created(){this.$emit("changeField",this.getData())},mixins:[c,R,D],methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(t.computed=!0,t.total=this.total),t}}},M=Object(l.a)(I,B,[],!1,null,"3b349e9a",null);M.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/MultiSelectBlock.vue";var H=M.exports,V=function(){var t=this.$createElement;return(this._self._c||t)("h2",[this._v("Неизвестный тип блока")])};V._withStripped=!0;var z={},J=(r(38),Object(l.a)(z,V,[],!1,null,null,null));J.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/UndefinedBlock.vue";var X=J.exports,G=function(){var t=this.$createElement;return(this._self._c||t)("div")};G._withStripped=!0;var K={},Q=Object(l.a)(K,G,[],!1,null,"a37ba566",null);Q.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/RadioBlock.vue";var W={props:["unitData"],components:{important:p,"header-blck":v,"text-input":k,"number-input":N,"check-number-input":P,checkbox:b,"select-input":U,"multi-select-input":H,radio:Q.exports,undefined:X},data:()=>({typesList:{blockCheckbox:1,blockSelect:2,blockMultiSelect:3,blockRadio:6,blockNumberInput:7,blockCheckNumber:8,blockTextInput:9,blockImportant:13,blockHeader:14}}),methods:{fieldChanged(t){this.$emit("modification",t)}},computed:{currentElement(){switch(parseInt(this.unitData.element_type_id)){case this.typesList.blockSelect:return"select-input";case this.typesList.blockRadio:return"radio";case this.typesList.blockMultiSelect:return"multi-select-input";case this.typesList.blockCheckbox:return"checkbox";case this.typesList.blockNumberInput:return"number-input";case this.typesList.blockTextInput:return"text-input";case this.typesList.blockCheckNumber:return"check-number-input";case this.typesList.blockImportant:return"important";case this.typesList.blockHeader:return"header-blck";default:return"undefined"}}}},Y=Object(l.a)(W,a,[],!1,null,null,null);Y.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Element.vue";var Z=Y.exports,tt=function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"group-block"},[r("h3",[t._v(t._s(t.title))]),t._v(" "),t._l(t.fields,(function(e){return[r("el",{attrs:{unitData:e},on:{modification:t.fieldChanged}})]}))],2)};tt._withStripped=!0;var et={components:{el:Z},props:["fields","title"],methods:{fieldChanged(t){this.$emit("modification",t)}}},rt=Object(l.a)(et,tt,[],!1,null,null,null);rt.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Group.vue";var st=rt.exports,it=function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"proposal-summary"},[e("div",{staticClass:"proposal-summary__title"},[this._v("Общая стоимость по заявке:")]),this._v(" "),e("div",{staticClass:"proposal-summary__total"},[this._v("\r\n        Итого: "+this._s(this.total)+" руб\r\n    ")]),this._v(" "),e("hr")])};it._withStripped=!0;var nt={props:["total"],data:()=>({})},at=Object(l.a)(nt,it,[],!1,null,null,null);at.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/ComputedEl.vue";var ot={components:{el:Z,group:st,computed:at.exports},data:()=>({title:"",elements:[],draft:!1,fields:{},formData:new FormData,formType:null,formId:null,isComputed:!1,userId:null,basePrice:0,totalPrice:0}),beforeCreate:function(){n.a.get("/api/dynamic-form/get-form").then(t=>{this.title=t.data.title,this.elements=t.data.elements,this.isComputed=t.data.computed,this.userId=t.data.userId,this.formType=t.data.formType,this.basePrice=t.data.basePrice,this.totalPrice=this.basePrice,this.formId=t.data.formId})},methods:{saveDraft:function(){this.draft=!0,this.formSubmit()},isFormValid(){let t=!0;for(let e in this.fields)this.fields[e].valid||(t=!1);return t},fieldsModificate(t){let e=!1,r=0;t.hasOwnProperty("computed")&&(e=!0,r=t.total),this.fields[t.id]={data:t.data,valid:t.valid,computed:e,total:r},this.isComputed&&this.calculatePrice(this.fields)},calculatePrice(t){let e=this.basePrice;for(let r in this.fields){let s=t[r];s.computed&&(e+=s.total)}console.log(t),console.log("price= "+e),this.totalPrice=e},formSubmit(){if(w.validate(),!this.isFormValid())return w.showErrors(),void console.log("Форма не валидна");console.log("Форма отправлена"),this.formData.append("DynamicForm[fields]",JSON.stringify(this.fields)),this.formData.append("DynamicForm[userId]",+this.userId),this.formData.append("DynamicForm[formId]",+this.formId),this.formData.append("DynamicForm[draft]",+this.draft),this.formData.append("DynamicForm[total]",this.totalPrice),this.formData.append("DynamicForm[basePrice]",this.basePrice),this.formData.append("DynamicForm[formType]",this.formType),n.a.post("/api/dynamic-form/send-form",this.formData,{headers:{"Content-Type":"multipart/form-data"}}).then((function(){location.href="/manage/member/requests"})).catch((function(){location.href="/manage/member/requests",console.log("FAILURE!!")}))},cancel(){location.href="/manage/member/requests"}}},ct=Object(l.a)(ot,s,[],!1,null,null,null);ct.options.__file="assets/scripts/components/vue/DynamicForm/DynamicFormApp.vue";var ut=ct.exports;new(0,window.Vue)({el:"#dynamic-form-app",render:t=>t(ut)})}],[[39,0]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,