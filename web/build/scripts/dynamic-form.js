(self.webpackChunkb_free=self.webpackChunkb_free||[]).push([[884],{669:(t,e,s)=>{t.exports=s(609)},448:(t,e,s)=>{"use strict";var i=s(867),r=s(26),a=s(372),n=s(327),o=s(97),c=s(109),l=s(985),u=s(61);t.exports=function(t){return new Promise((function(e,s){var d=t.data,p=t.headers;i.isFormData(d)&&delete p["Content-Type"];var h=new XMLHttpRequest;if(t.auth){var m=t.auth.username||"",f=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";p.Authorization="Basic "+btoa(m+":"+f)}var v=o(t.baseURL,t.url);if(h.open(t.method.toUpperCase(),n(v,t.params,t.paramsSerializer),!0),h.timeout=t.timeout,h.onreadystatechange=function(){if(h&&4===h.readyState&&(0!==h.status||h.responseURL&&0===h.responseURL.indexOf("file:"))){var i="getAllResponseHeaders"in h?c(h.getAllResponseHeaders()):null,a={data:t.responseType&&"text"!==t.responseType?h.response:h.responseText,status:h.status,statusText:h.statusText,headers:i,config:t,request:h};r(e,s,a),h=null}},h.onabort=function(){h&&(s(u("Request aborted",t,"ECONNABORTED",h)),h=null)},h.onerror=function(){s(u("Network Error",t,null,h)),h=null},h.ontimeout=function(){var e="timeout of "+t.timeout+"ms exceeded";t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),s(u(e,t,"ECONNABORTED",h)),h=null},i.isStandardBrowserEnv()){var _=(t.withCredentials||l(v))&&t.xsrfCookieName?a.read(t.xsrfCookieName):void 0;_&&(p[t.xsrfHeaderName]=_)}if("setRequestHeader"in h&&i.forEach(p,(function(t,e){void 0===d&&"content-type"===e.toLowerCase()?delete p[e]:h.setRequestHeader(e,t)})),i.isUndefined(t.withCredentials)||(h.withCredentials=!!t.withCredentials),t.responseType)try{h.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&h.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&h.upload&&h.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then((function(t){h&&(h.abort(),s(t),h=null)})),d||(d=null),h.send(d)}))}},609:(t,e,s)=>{"use strict";var i=s(867),r=s(849),a=s(321),n=s(185);function o(t){var e=new a(t),s=r(a.prototype.request,e);return i.extend(s,a.prototype,e),i.extend(s,e),s}var c=o(s(655));c.Axios=a,c.create=function(t){return o(n(c.defaults,t))},c.Cancel=s(263),c.CancelToken=s(972),c.isCancel=s(502),c.all=function(t){return Promise.all(t)},c.spread=s(713),c.isAxiosError=s(268),t.exports=c,t.exports.default=c},263:t=>{"use strict";function e(t){this.message=t}e.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},e.prototype.__CANCEL__=!0,t.exports=e},972:(t,e,s)=>{"use strict";var i=s(263);function r(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise((function(t){e=t}));var s=this;t((function(t){s.reason||(s.reason=new i(t),e(s.reason))}))}r.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},r.source=function(){var t;return{token:new r((function(e){t=e})),cancel:t}},t.exports=r},502:t=>{"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},321:(t,e,s)=>{"use strict";var i=s(867),r=s(327),a=s(782),n=s(572),o=s(185);function c(t){this.defaults=t,this.interceptors={request:new a,response:new a}}c.prototype.request=function(t){"string"==typeof t?(t=arguments[1]||{}).url=arguments[0]:t=t||{},(t=o(this.defaults,t)).method?t.method=t.method.toLowerCase():this.defaults.method?t.method=this.defaults.method.toLowerCase():t.method="get";var e=[n,void 0],s=Promise.resolve(t);for(this.interceptors.request.forEach((function(t){e.unshift(t.fulfilled,t.rejected)})),this.interceptors.response.forEach((function(t){e.push(t.fulfilled,t.rejected)}));e.length;)s=s.then(e.shift(),e.shift());return s},c.prototype.getUri=function(t){return t=o(this.defaults,t),r(t.url,t.params,t.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(t){c.prototype[t]=function(e,s){return this.request(o(s||{},{method:t,url:e,data:(s||{}).data}))}})),i.forEach(["post","put","patch"],(function(t){c.prototype[t]=function(e,s,i){return this.request(o(i||{},{method:t,url:e,data:s}))}})),t.exports=c},782:(t,e,s)=>{"use strict";var i=s(867);function r(){this.handlers=[]}r.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},r.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},r.prototype.forEach=function(t){i.forEach(this.handlers,(function(e){null!==e&&t(e)}))},t.exports=r},97:(t,e,s)=>{"use strict";var i=s(793),r=s(303);t.exports=function(t,e){return t&&!i(e)?r(t,e):e}},61:(t,e,s)=>{"use strict";var i=s(481);t.exports=function(t,e,s,r,a){var n=new Error(t);return i(n,e,s,r,a)}},572:(t,e,s)=>{"use strict";var i=s(867),r=s(527),a=s(502),n=s(655);function o(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return o(t),t.headers=t.headers||{},t.data=r(t.data,t.headers,t.transformRequest),t.headers=i.merge(t.headers.common||{},t.headers[t.method]||{},t.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete t.headers[e]})),(t.adapter||n.adapter)(t).then((function(e){return o(t),e.data=r(e.data,e.headers,t.transformResponse),e}),(function(e){return a(e)||(o(t),e&&e.response&&(e.response.data=r(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)}))}},481:t=>{"use strict";t.exports=function(t,e,s,i,r){return t.config=e,s&&(t.code=s),t.request=i,t.response=r,t.isAxiosError=!0,t.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},t}},185:(t,e,s)=>{"use strict";var i=s(867);t.exports=function(t,e){e=e||{};var s={},r=["url","method","data"],a=["headers","auth","proxy","params"],n=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],o=["validateStatus"];function c(t,e){return i.isPlainObject(t)&&i.isPlainObject(e)?i.merge(t,e):i.isPlainObject(e)?i.merge({},e):i.isArray(e)?e.slice():e}function l(r){i.isUndefined(e[r])?i.isUndefined(t[r])||(s[r]=c(void 0,t[r])):s[r]=c(t[r],e[r])}i.forEach(r,(function(t){i.isUndefined(e[t])||(s[t]=c(void 0,e[t]))})),i.forEach(a,l),i.forEach(n,(function(r){i.isUndefined(e[r])?i.isUndefined(t[r])||(s[r]=c(void 0,t[r])):s[r]=c(void 0,e[r])})),i.forEach(o,(function(i){i in e?s[i]=c(t[i],e[i]):i in t&&(s[i]=c(void 0,t[i]))}));var u=r.concat(a).concat(n).concat(o),d=Object.keys(t).concat(Object.keys(e)).filter((function(t){return-1===u.indexOf(t)}));return i.forEach(d,l),s}},26:(t,e,s)=>{"use strict";var i=s(61);t.exports=function(t,e,s){var r=s.config.validateStatus;s.status&&r&&!r(s.status)?e(i("Request failed with status code "+s.status,s.config,null,s.request,s)):t(s)}},527:(t,e,s)=>{"use strict";var i=s(867);t.exports=function(t,e,s){return i.forEach(s,(function(s){t=s(t,e)})),t}},655:(t,e,s)=>{"use strict";var i=s(867),r=s(16),a={"Content-Type":"application/x-www-form-urlencoded"};function n(t,e){!i.isUndefined(t)&&i.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var o,c={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(o=s(448)),o),transformRequest:[function(t,e){return r(e,"Accept"),r(e,"Content-Type"),i.isFormData(t)||i.isArrayBuffer(t)||i.isBuffer(t)||i.isStream(t)||i.isFile(t)||i.isBlob(t)?t:i.isArrayBufferView(t)?t.buffer:i.isURLSearchParams(t)?(n(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):i.isObject(t)?(n(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};i.forEach(["delete","get","head"],(function(t){c.headers[t]={}})),i.forEach(["post","put","patch"],(function(t){c.headers[t]=i.merge(a)})),t.exports=c},849:t=>{"use strict";t.exports=function(t,e){return function(){for(var s=new Array(arguments.length),i=0;i<s.length;i++)s[i]=arguments[i];return t.apply(e,s)}}},327:(t,e,s)=>{"use strict";var i=s(867);function r(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,s){if(!e)return t;var a;if(s)a=s(e);else if(i.isURLSearchParams(e))a=e.toString();else{var n=[];i.forEach(e,(function(t,e){null!=t&&(i.isArray(t)?e+="[]":t=[t],i.forEach(t,(function(t){i.isDate(t)?t=t.toISOString():i.isObject(t)&&(t=JSON.stringify(t)),n.push(r(e)+"="+r(t))})))})),a=n.join("&")}if(a){var o=t.indexOf("#");-1!==o&&(t=t.slice(0,o)),t+=(-1===t.indexOf("?")?"?":"&")+a}return t}},303:t=>{"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},372:(t,e,s)=>{"use strict";var i=s(867);t.exports=i.isStandardBrowserEnv()?{write:function(t,e,s,r,a,n){var o=[];o.push(t+"="+encodeURIComponent(e)),i.isNumber(s)&&o.push("expires="+new Date(s).toGMTString()),i.isString(r)&&o.push("path="+r),i.isString(a)&&o.push("domain="+a),!0===n&&o.push("secure"),document.cookie=o.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:t=>{"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},268:t=>{"use strict";t.exports=function(t){return"object"==typeof t&&!0===t.isAxiosError}},985:(t,e,s)=>{"use strict";var i=s(867);t.exports=i.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),s=document.createElement("a");function r(t){var i=t;return e&&(s.setAttribute("href",i),i=s.href),s.setAttribute("href",i),{href:s.href,protocol:s.protocol?s.protocol.replace(/:$/,""):"",host:s.host,search:s.search?s.search.replace(/^\?/,""):"",hash:s.hash?s.hash.replace(/^#/,""):"",hostname:s.hostname,port:s.port,pathname:"/"===s.pathname.charAt(0)?s.pathname:"/"+s.pathname}}return t=r(window.location.href),function(e){var s=i.isString(e)?r(e):e;return s.protocol===t.protocol&&s.host===t.host}}():function(){return!0}},16:(t,e,s)=>{"use strict";var i=s(867);t.exports=function(t,e){i.forEach(t,(function(s,i){i!==e&&i.toUpperCase()===e.toUpperCase()&&(t[e]=s,delete t[i])}))}},109:(t,e,s)=>{"use strict";var i=s(867),r=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,s,a,n={};return t?(i.forEach(t.split("\n"),(function(t){if(a=t.indexOf(":"),e=i.trim(t.substr(0,a)).toLowerCase(),s=i.trim(t.substr(a+1)),e){if(n[e]&&r.indexOf(e)>=0)return;n[e]="set-cookie"===e?(n[e]?n[e]:[]).concat([s]):n[e]?n[e]+", "+s:s}})),n):n}},713:t=>{"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},867:(t,e,s)=>{"use strict";var i=s(849),r=Object.prototype.toString;function a(t){return"[object Array]"===r.call(t)}function n(t){return void 0===t}function o(t){return null!==t&&"object"==typeof t}function c(t){if("[object Object]"!==r.call(t))return!1;var e=Object.getPrototypeOf(t);return null===e||e===Object.prototype}function l(t){return"[object Function]"===r.call(t)}function u(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),a(t))for(var s=0,i=t.length;s<i;s++)e.call(null,t[s],s,t);else for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.call(null,t[r],r,t)}t.exports={isArray:a,isArrayBuffer:function(t){return"[object ArrayBuffer]"===r.call(t)},isBuffer:function(t){return null!==t&&!n(t)&&null!==t.constructor&&!n(t.constructor)&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)},isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:o,isPlainObject:c,isUndefined:n,isDate:function(t){return"[object Date]"===r.call(t)},isFile:function(t){return"[object File]"===r.call(t)},isBlob:function(t){return"[object Blob]"===r.call(t)},isFunction:l,isStream:function(t){return o(t)&&l(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function t(){var e={};function s(s,i){c(e[i])&&c(s)?e[i]=t(e[i],s):c(s)?e[i]=t({},s):a(s)?e[i]=s.slice():e[i]=s}for(var i=0,r=arguments.length;i<r;i++)u(arguments[i],s);return e},extend:function(t,e,s){return u(e,(function(e,r){t[r]=s&&"function"==typeof e?i(e,s):e})),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(t){return 65279===t.charCodeAt(0)&&(t=t.slice(1)),t}}},345:(t,e,s)=>{"use strict";function i(t){let e=t.toString().replace(/[^0-9]/g,"");return e=e.replace(/^0/,""),""==e&&(e="0"),e=e.replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1 "),e}s.d(e,{o:()=>i})},32:(t,e,s)=>{"use strict";var i=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"card card-primary"},[s("div",{staticClass:"card-header"},[t._v("\n        "+t._s(t.title)+"\n    ")]),t._v(" "),s("div",{staticClass:"card-body"},[t._l(t.elements,(function(e){return[e.isGroup?t._e():s("el",{attrs:{unitData:e,lang:t.language,dic:t.dict},on:{modification:t.fieldsModificate}}),t._v(" "),e.isGroup?s("group",{attrs:{fields:e.fields,title:t.getFieldName(e.name,e.name_eng),lang:t.language,dic:t.dict},on:{modification:t.fieldsModificate}}):t._e()]})),t._v(" "),s("div",{directives:[{name:"show",rawName:"v-show",value:t.hasFile,expression:"hasFile"}],staticClass:"form-group clr"},[s("p",{staticClass:"d-flex flex-column"},[s("span",[t._v(t._s(t.dict.fileAttach.attachFile))])]),t._v(" "),s("div",{staticClass:"input-group"},[s("div",{staticClass:"custom-file"},[s("input",{ref:"userFile",staticClass:"custom-file-input",attrs:{type:"file",id:"userFile"},on:{change:t.fileLoad}}),t._v(" "),s("label",{staticClass:"custom-file-label",attrs:{"data-browse":t.dict.fileAttach.browse,for:"userFile"}},[t._v("Select file")])])]),t._v(" "),t.addedFile?s("div",{staticClass:"file__added"},[s("i",{staticClass:"fa fa-file",attrs:{"aria-hidden":"true"}}),t._v("\n                "+t._s(t.addedFile))]):t._e()]),t._v(" "),t.isComputed?s("computed",{attrs:{total:t.totalPrice,dic:t.dict}}):t._e(),t._v(" "),s("div",{staticClass:"card-footer"},[t.isReadOnly?t._e():s("button",{staticClass:"btn btn-primary",attrs:{type:"button"},on:{click:t.saveDraft}},[t._v(t._s(t.dict.buttons.draft))]),t._v(" "),t.isReadOnly?t._e():s("button",{staticClass:"btn btn-success",attrs:{type:"button"},on:{click:t.formSubmit}},[t._v(t._s(t.dict.buttons.send))]),t._v(" "),t.isReadOnly?t._e():s("button",{staticClass:"btn btn-secondary",attrs:{type:"button"},on:{click:t.cancel}},[t._v(t._s(t.dict.buttons.cancel))]),t._v(" "),t.isReadOnly?s("button",{staticClass:"btn btn-secondary",attrs:{type:"button"},on:{click:t.close}},[t._v(t._s(t.dict.buttons.close))]):t._e()])],2)])};i._withStripped=!0;var r=s(669),a=s.n(r),n=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"comp"},[s(t.currentElement,{tag:"component",attrs:{params:t.unitData,lang:t.lang,dic:t.dic},on:{changeField:t.fieldChanged}})],1)};n._withStripped=!0;var o=function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{staticClass:"inform",domProps:{innerHTML:t._s(t.title)}})};o._withStripped=!0;const c={props:["params"],data(){return{parameters:this.params.parameters,required:this.params.parameters.required,unit:this.params.parameters.unitName}}},l="ru-RU",u={props:["lang"],mixins:[c],computed:{title(){return this.lang!=l&&this.parameters.htmlEng?this.parameters.htmlEng:this.parameters.html}}};var d=s(900),p=(0,d.Z)(u,o,[],!1,null,"2bf6eb86",null);p.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/ImportantBlock.vue";const h=p.exports;var m=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"header__block"},[s("h4",[t._v(t._s(t.header))]),t._v(" "),s("p",{staticClass:"description"},[t._v(t._s(t.desc))]),t._v(" "),s("p",{staticClass:"info"},[t._v(t._s(t.title))])])};m._withStripped=!0;const f={props:["lang"],mixins:[c],computed:{title(){return this.lang!=l&&this.parameters.textEng?this.parameters.textEng:this.parameters.text},header(){return this.lang!=l&&this.params.textEng?this.params.name_eng:this.params.name},desc(){return this.lang!=l&&this.params.textEng?this.params.description_eng:this.params.description}}};var v=(0,d.Z)(f,m,[],!1,null,"0f3e9295",null);v.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/HeaderBlock.vue";const _=v.exports;var g=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"form-group"},[s("div",{staticClass:"custom-control custom-checkbox"},[s("input",{directives:[{name:"model",rawName:"v-model",value:t.checked,expression:"checked"}],staticClass:"custom-control-input",attrs:{type:"checkbox",id:t.id},domProps:{checked:Array.isArray(t.checked)?t._i(t.checked,null)>-1:t.checked},on:{change:[function(e){var s=t.checked,i=e.target,r=!!i.checked;if(Array.isArray(s)){var a=t._i(s,null);i.checked?a<0&&(t.checked=s.concat([null])):a>-1&&(t.checked=s.slice(0,a).concat(s.slice(a+1)))}else t.checked=r},t.change]}}),t._v(" "),s("label",{staticClass:"custom-control-label",attrs:{for:t.id}},[t._v(t._s(t.titleLabel))])])])};g._withStripped=!0;const b={computed:{titleLabel(){return this.lang!=l&&this.params.name_eng?this.params.name_eng:this.params.name},descriptionLabel(){return this.lang!=l&&this.params.description_eng,this.params.description}}},C={data(){return{isComputed:this.params.parameters.isComputed,unitPrice:+this.params.parameters.unitPrice,basePrice:+this.params.parameters.basePrice}}},y={props:["lang"],data(){return{id:"id"+this.params.id,checked:this.params.checked,valid:!0}},mixins:[c,C,b],created(){this.$emit("changeField",this.getData())},computed:{total(){return this.isComputed&&this.checked?+this.unitPrice:0}},methods:{change(){this.params.value=this.checked,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.unitPrice,checked:this.checked},valid:this.valid,checkbox:!0};return this.isComputed&&(t.computed=!0,t.total=this.total),t}}};var x=(0,d.Z)(y,g,[],!1,null,null,null);x.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/CheckBoxBlock.vue";const E=x.exports;var w=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"form-group",class:{required:t.required}},[s("label",{attrs:{for:t.id}},[t._v(t._s(t.titleLabel))]),t._v(" "),s("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":t.hasErrorsForShow()},attrs:{id:t.id,type:"text",placeholder:"Enter ..."},domProps:{value:t.val},on:{change:function(e){return t.onChange(e)},input:function(e){e.target.composing||(t.val=e.target.value)}}}),t._v(" "),t.hasErrorsForShow()?s("div",{staticClass:"help-block"},[t._v(t._s(t.errors.required.message))]):t._e(),t._v(" "),t.hasErrorsForShow()?s("div",{staticClass:"help-block"},[t._v(t._s(t.errors.required.message))]):t._e()])};w._withStripped=!0;const k=new Vue({methods:{validate(){this.$emit("validate")},showErrors(){this.$emit("showErrors")}}}),F={props:["lang"],data(){return{id:"id"+this.params.id,val:this.params.value,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"}}}},mixins:[c,b],created(){this.$emit("changeField",this.getData()),k.$on("showErrors",(()=>this.showErrors=!0)),k.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{validate(){this.valid=!0,this.currentError=null,""==this.val&&this.required&&(this.currentError=this.errors.required,this.valid=!1)},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(t){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){return{id:this.id,data:{value:this.val},valid:this.valid}}}};var D=(0,d.Z)(F,w,[],!1,null,null,null);D.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/TextInputBlock.vue";const S=D.exports;var N=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"form-group"},[s("label",{attrs:{for:t.id}},[t._v(t._s(t.titleLabel))]),t._v(" "),s("div",{staticClass:"input-group"},[s("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":t.hasErrorsForShow()},attrs:{id:t.id,type:"text",placeholder:"Enter ..."},domProps:{value:t.val},on:{change:function(e){return t.onChange(e)},input:function(e){e.target.composing||(t.val=e.target.value)}}}),t._v(" "),t.unit?s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v(t._s(t.unit))])]):t._e(),t._v(" "),t.isComputed?s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v("x"),s("span",{staticClass:"price"},[t._v(t._s(+t.unitPrice))]),t._v(" "+t._s(t.dic.valute))])]):t._e(),t._v(" "),t.isComputed?s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v("="),s("span",{staticClass:"price"},[t._v(t._s(t._f("separate")(t.total)))]),t._v(" "+t._s(t.dic.valute))])]):t._e()]),t._v(" "),t.hasErrorsForShow()?s("div",{staticClass:"help-block"},[t._v(t._s(t.currentError.message))]):t._e()])};N._withStripped=!0;var $=s(345);const P={filters:{separate:t=>(0,$.o)(t)}},q={props:["dic","lang"],data(){return{id:"id"+this.params.id,val:this.params.value,currentError:null,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"},notNumber:{message:"Заполняемое поле должно быть числом"}}}},computed:{total(){let t=0;return this.isComputed?(t=+this.val*+this.unitPrice,isNaN(t)?0:t):0}},mixins:[c,C,P,b],created(){this.$emit("changeField",this.getData()),k.$on("showErrors",(()=>this.showErrors=!0)),k.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{isNumber:t=>/^\d+$/.test(t),validate(){return this.valid=!0,this.currentError=null,""==this.val?this.required?(this.currentError=this.errors.required,void(this.valid=!1)):void 0:this.isNumber(this.val)?void 0:(this.currentError=this.errors.notNumber,void(this.valid=!1))},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(t){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.val},valid:this.valid};return this.validate(),this.isComputed&&(t.computed=!0,t.total=this.total),t}}};var I=(0,d.Z)(q,N,[],!1,null,null,null);I.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/NumberInputBlock.vue";const L=I.exports;var O=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"form-group check__number"},[s("div",{staticClass:"custom-control custom-checkbox"},[s("input",{directives:[{name:"model",rawName:"v-model",value:t.checked,expression:"checked"}],staticClass:"custom-control-input",attrs:{type:"checkbox",id:t.id},domProps:{checked:Array.isArray(t.checked)?t._i(t.checked,null)>-1:t.checked},on:{change:[function(e){var s=t.checked,i=e.target,r=!!i.checked;if(Array.isArray(s)){var a=t._i(s,null);i.checked?a<0&&(t.checked=s.concat([null])):a>-1&&(t.checked=s.slice(0,a).concat(s.slice(a+1)))}else t.checked=r},t.change]}}),t._v(" "),s("label",{staticClass:"custom-control-label",attrs:{for:t.id}},[t._v(t._s(t.titleLabel))])]),t._v(" "),t.checked?s("div",{staticClass:"input-block"},[s("div",{staticClass:"input-group"},[s("input",{directives:[{name:"model",rawName:"v-model",value:t.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":t.hasErrorsForShow()},attrs:{id:t.id,type:"text",placeholder:"Enter ..."},domProps:{value:t.val},on:{change:function(e){return t.onChange(e)},input:function(e){e.target.composing||(t.val=e.target.value)}}}),t._v(" "),t.unit?s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v(t._s(t.unit))])]):t._e(),t._v(" "),t.isComputed?s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v("x"),s("span",{staticClass:"price"},[t._v(t._s(+t.unitPrice))]),t._v(" "+t._s(t.dic.valute))])]):t._e(),t._v(" "),t.isComputed?s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v("="),s("span",{staticClass:"price"},[t._v(t._s(t._f("separate")(t.total)))]),t._v(" "+t._s(t.dic.valute))])]):t._e()]),t._v(" "),t.hasErrorsForShow()?s("div",{staticClass:"help-block"},[t._v(t._s(t.currentError.message))]):t._e()]):t._e()])};O._withStripped=!0;const R={props:["dic","lang"],data(){return{id:"id"+this.params.id,val:this.params.value,checked:this.params.checked,currentError:null,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"},notNumber:{message:"Заполняемое поле должно быть числом"}}}},mixins:[c,C,b,P],computed:{total(){if(!this.isComputed||!this.checked)return 0;let t=+this.val*+this.unitPrice;return isNaN(t)?0:t}},created(){this.$emit("changeField",this.getData()),k.$on("showErrors",(()=>this.showErrors=!0)),k.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{change(){this.$emit("changeField",this.getData())},isNumber:t=>/^\d+$/.test(t),validate(){if(this.valid=!0,this.checked)return this.currentError=null,""==this.val?this.required?(this.currentError=this.errors.required,void(this.valid=!1)):void 0:this.isNumber(this.val)?void 0:(this.currentError=this.errors.notNumber,void(this.valid=!1))},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(t){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){this.validate();let t={id:this.id,data:{value:this.val,checked:this.checked},valid:this.valid};return this.isComputed&&this.checked&&(t.computed=!0,t.total=this.total),t}}};var A=(0,d.Z)(R,O,[],!1,null,"1340f614",null);A.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/CheckNumberInput.vue";const U=A.exports;var B=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"form-group"},[s("label",{staticClass:"control-label"},[t._v(t._s(t.titleLabel))]),t._v(" "),s("select",{directives:[{name:"model",rawName:"v-model",value:t.selected,expression:"selected"}],staticClass:"form-control",attrs:{name:t.id,id:t.id},on:{change:[function(e){var s=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.selected=e.target.multiple?s:s[0]},t.change]}},t._l(t.enums,(function(e){return s("option",{domProps:{value:e.id}},[t._v(t._s(t.getName(e.name,e.name_eng)))])})),0),t._v(" "),s("div",{staticClass:"field__desc"},[t._v(t._s(t.descriptionLabel))])])};B._withStripped=!0;const j={data(){return{enums:this.params.enumsList}}},T={methods:{getName(t,e){return this.lang!=l&&e?e:t}}},V={props:["lang"],data(){return{id:"id"+this.params.id,valid:!0,selected:this.params.value}},computed:{total(){let t=0;if(!this.isComputed)return t;for(const e of this.enums)e.id==this.selected&&(t=+e.value);return isNaN(t)?0:t}},created(){this.$emit("changeField",this.getData())},methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(t.computed=!0,t.total=this.total),t}},mixins:[c,j,C,b,T]};var Z=(0,d.Z)(V,B,[],!1,null,"1c6ee5f4",null);Z.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/SelectBlock.vue";const M=Z.exports;var H=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"form-group"},[s("select",{directives:[{name:"model",rawName:"v-model",value:t.selected,expression:"selected"}],staticClass:"form-control",attrs:{name:t.id,id:t.id,multiple:""},on:{change:[function(e){var s=Array.prototype.filter.call(e.target.options,(function(t){return t.selected})).map((function(t){return"_value"in t?t._value:t.value}));t.selected=e.target.multiple?s:s[0]},t.change]}},t._l(t.enums,(function(e){return s("option",{domProps:{value:e.id}},[t._v(t._s(e.name))])})),0)])};H._withStripped=!0;const z={data(){let t=Array.isArray(this.params.value)?this.params.value:[];return{id:"id"+this.params.id,valid:!0,selected:t}},computed:{total(){if(!this.isComputed)return 0;let t=0;for(const e of this.enums)this.selected.indexOf(e.id)>=0&&(t+=+e.value);return t}},created(){this.$emit("changeField",this.getData())},mixins:[c,j,C],methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(t.computed=!0,t.total=this.total),t}}};var X=(0,d.Z)(z,H,[],!1,null,"3b349e9a",null);X.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/MultiSelectBlock.vue";const J=X.exports;var G=function(){var t=this;t.$createElement;return t._self._c,t._m(0)};G._withStripped=!0;var K=(0,d.Z)({},G,[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"block__undefined"},[s("h2",[t._v("Неизвестный тип блока")])])}],!1,null,null,null);K.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/UndefinedBlock.vue";const Q=K.exports;var W=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"form-group"},[s("div",{staticClass:"label"},[t._v(t._s(t.params.name))]),t._v(" "),t._l(t.enums,(function(e){return s("div",{staticClass:"form-check"},[s("input",{directives:[{name:"model",rawName:"v-model",value:t.selected,expression:"selected"}],staticClass:"form-check-input",attrs:{type:"radio",name:t.id},domProps:{value:e.id,checked:t._q(t.selected,e.id)},on:{change:[function(s){t.selected=e.id},t.change]}}),t._v(" "),s("label",{staticClass:"form-check-label"},[t._v(t._s(e.name))])])}))],2)};W._withStripped=!0;const Y={data(){return{id:"id"+this.params.id,val:this.params.value,valid:!0,selected:this.params.value}},created(){this.$emit("changeField",this.getData())},methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let t={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(t.computed=!0,t.total=this.total),t}},computed:{total(){let t=0;if(!this.isComputed)return 0;for(const e of this.enums)e.id==this.selected&&(t=+e.value);return isNaN(t)?0:t}},mixins:[c,j,C]};var tt=(0,d.Z)(Y,W,[],!1,null,"a37ba566",null);tt.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/RadioBlock.vue";const et=tt.exports;var st=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"equipments-list__container"},[s("ul",{staticClass:"additional-equipment__list"},[t._l(t.categories,(function(e,i){return[t.isShowed(e.id)?s("li",{key:i},[s("span",{on:{click:function(s){return t.expand(e.id)}}},[t._v(t._s(t.getName(e.name,e.name_eng)))]),t._v(" "),s("equipment-list",{attrs:{val:t.values,id:e.id,eventBus:t.bus,dic:t.dic,lang:t.lang},on:{changeValue:t.setValue}})],1):t._e()]}))],2),t._v(" "),s("table",{staticClass:"table"},[s("tbody",[t._l(t.values,(function(e,i){return s("tr",{key:i},[s("td",[t._v(t._s(e.code))]),t._v(" "),s("td",[t._v(t._s(t.getName(e.name,e.name_eng)))]),t._v(" "),s("td",[t._v(t._s(t._f("separate")(e.count))+" "+t._s(t.getName(e.unit.short_name,e.unit.short_name_eng)))]),t._v(" "),s("td",[t._v("x"+t._s(t._f("separate")(e.price))+" "+t._s(t.dic.valute))]),t._v(" "),s("td",[t._v("="+t._s(t._f("separate")(e.price*e.count))+" "+t._s(t.dic.valute))])])})),t._v(" "),t.isComputed?s("tr",[s("td",{staticClass:"total",attrs:{colspan:"5"}},[t._v(t._s(t.dic.total.totalMsg)+": "+t._s(t._f("separate")(t.total))+" "+t._s(t.dic.valute))])]):t._e()],2)])])};st._withStripped=!0;var it=function(){var t=this,e=t.$createElement,s=t._self._c||e;return t.expand?s("div",{staticClass:"container"},t._l(t.equipments,(function(e,i){return s("div",{staticClass:"form-group"},[s("label",{attrs:{for:t.getId(e.id)}},[t._v(t._s(t.getName(e.name,e.name_eng)))]),t._v(" "),s("div",{staticClass:"input-group"},[s("input",{directives:[{name:"model",rawName:"v-model",value:t.inputs[e.id],expression:"inputs[equipment.id]"}],staticClass:"form-control",attrs:{type:"text",placeholder:"Enter ..."},domProps:{value:t.inputs[e.id]},on:{change:function(s){return t.setVal(e,t.inputs[e.id])},input:function(s){s.target.composing||t.$set(t.inputs,e.id,s.target.value)}}}),t._v(" "),s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v(t._s(t.getName(e.unit.short_name,e.unit.short_name_eng)))])]),t._v(" "),s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v("x"),s("span",{staticClass:"price"},[t._v(t._s(t._f("separate")(+e.price)))]),t._v(" "+t._s(t.dic.valute))])]),t._v(" "),s("div",{staticClass:"input-group-append"},[s("span",{staticClass:"input-group-text"},[t._v("="),s("span",{staticClass:"price"},[t._v(t._s(t._f("separate")(t.getTotalPrice(e,+t.inputs[e.id]))))]),t._v(" "+t._s(t.dic.valute))])])])])})),0):t._e()};it._withStripped=!0;const rt={mixins:[P,T],props:["id","eventBus","val","dic","lang"],data:()=>({equipments:[],isLoaded:!1,expand:!1,inputs:[]}),created(){this.eventBus.$on("expand",this.expandElement)},methods:{setVal(t,e){let s={};Object.assign(s,t),this.$emit("changeValue",s,e)},isNumber:t=>/^\d+$/.test(t),expandElement(t){t===this.id&&(this.expand=!this.expand,this.isLoaded||(this.getEquipments(),this.isLoaded=!0))},getId:t=>"equipment-"+t,getEquipments(){a().get("/api/equipment/get-equipments?categoryId="+this.id).then((t=>{this.equipments=t.data;const e=Object.keys(this.equipments);for(const t of e)this.val.hasOwnProperty(t)&&(this.inputs[t]=this.val[t].count)}))},getTotalPrice(t,e){let s=0;return s=e>0?e*t.price:0,s}}};var at=(0,d.Z)(rt,it,[],!1,null,"c5be9ba4",null);at.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/Components/EquipmentList.vue";const nt={props:["dic","lang"],data(){let t={};return this.params.value&&(t=this.params.value),{id:"id"+this.params.id,categories:[],availableCategories:this.params.parameters.categories,allCategories:1==this.params.parameters.allCategories,bus:new Vue,values:t}},computed:{total(){let t,e=0;if(!this.isComputed)return e;const s=Object.keys(this.values);for(const i of s)t=Number.parseInt(this.values[i].count)*Number.parseInt(this.values[i].price),isNaN(t)||(e+=t);return e}},mixins:[c,P,T,C],components:{EquipmentList:at.exports},methods:{isShowed(t){return console.log("Id = ",t),this.allCategories||-1!==this.availableCategories.indexOf(t)},expand(t){this.bus.$emit("expand",t)},setValue(t,e){const s=+t.id;e>0?Vue.set(this.values,s,{name:this.getName(t.name,t.name_eng),code:t.code,unit:t.unit.short_name,id:t.id,count:e,price:t.price}):Vue.delete(this.values,s),this.$emit("changeField",this.getData())},onChange(t){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){let t=[];for(let e in this.values)t.push({id:this.values[e].id,count:this.values[e].count,price:this.values[e].price});let e={id:this.id,data:{value:t},valid:!0};return this.isComputed&&(e.computed=!0,e.equip=!0,e.total=this.total),e}},beforeCreate:function(){a().get("/api/equipment/get-categories").then((t=>{this.categories=t.data}))},created(){this.$emit("changeField",this.getData())}};var ot=(0,d.Z)(nt,st,[],!1,null,"7e81879a",null);ot.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/EquipmentBlock.vue";const ct=ot.exports;var lt=function(){var t=this,e=t.$createElement;return(t._self._c||e)("div",{staticClass:"important",domProps:{innerHTML:t._s(t.title)}})};lt._withStripped=!0;const ut={props:["lang"],mixins:[c],computed:{title(){return this.lang!=l&&this.parameters.textEng?this.parameters.textEng:this.parameters.text}}};var dt=(0,d.Z)(ut,lt,[],!1,null,null,null);dt.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/ImportantInformation.vue";const pt={props:["unitData","lang","dic"],components:{important:h,"important-information":dt.exports,"header-blck":_,"text-input":S,"number-input":L,"check-number-input":U,checkbox:E,"select-input":M,"multi-select-input":J,radio:et,equipment:ct,undefined:Q},data:()=>({typesList:{blockCheckbox:1,blockSelect:2,blockMultiSelect:3,blockRadio:6,blockNumberInput:7,blockCheckNumber:8,blockTextInput:9,blockImportantInformation:12,blockImportant:13,blockHeader:14,blockEquipment:15}}),methods:{fieldChanged(t){this.$emit("modification",t)}},computed:{currentElement(){switch(parseInt(this.unitData.element_type_id)){case this.typesList.blockSelect:return"select-input";case this.typesList.blockRadio:return"radio";case this.typesList.blockMultiSelect:return"multi-select-input";case this.typesList.blockCheckbox:return"checkbox";case this.typesList.blockNumberInput:return"number-input";case this.typesList.blockTextInput:return"text-input";case this.typesList.blockCheckNumber:return"check-number-input";case this.typesList.blockImportant:return"important";case this.typesList.blockHeader:return"header-blck";case this.typesList.blockImportantInformation:return"important-information";case this.typesList.blockEquipment:return"equipment";default:return"undefined"}}}};var ht=(0,d.Z)(pt,n,[],!1,null,null,null);ht.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Element.vue";const mt=ht.exports;var ft=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"group-block"},[s("h3",[t._v(t._s(t.title))]),t._v(" "),t._l(t.fields,(function(e){return[s("el",{attrs:{lang:t.lang,unitData:e,dic:t.dic},on:{modification:t.fieldChanged}})]}))],2)};ft._withStripped=!0;const vt={components:{el:mt},props:["fields","title","lang","dic"],methods:{fieldChanged(t){this.$emit("modification",t)}}};var _t=(0,d.Z)(vt,ft,[],!1,null,null,null);_t.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Group.vue";const gt=_t.exports;var bt=function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"proposal-summary"},[s("div",{staticClass:"proposal-summary__title"},[t._v(t._s(t.dic.total.totalHead)+":")]),t._v(" "),s("div",{staticClass:"proposal-summary__total"},[t._v("\r\n        "+t._s(t.dic.total.totalMsg)+": "+t._s(t._f("separate")(t.total))+" "+t._s(t.dic.valute)+"\r\n    ")]),t._v(" "),s("hr")])};bt._withStripped=!0;const Ct={mixins:[P],props:["total","dic"],data:()=>({})};var yt=(0,d.Z)(Ct,bt,[],!1,null,null,null);yt.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/ComputedEl.vue";const xt={components:{el:mt,group:gt,computed:yt.exports},props:["isReadOnly","contractId"],data:()=>({title:"",elements:[],draft:!1,fields:{},formData:new FormData,formId:null,isComputed:!1,userId:null,companyId:null,basePrice:0,totalPrice:0,hasFile:!1,addedFile:!1,language:l,dict:{fileAttach:{},buttons:{}}}),beforeCreate:function(){a().get("/api/application/get-form").then((t=>{this.title=t.data.title,this.elements=t.data.elements,this.isComputed=t.data.computed,this.userId=t.data.userId,this.companyId=t.data.companyId,this.basePrice=t.data.basePrice,this.totalPrice=this.basePrice,this.formId=t.data.formId,this.hasFile=t.data.hasFile,this.language=t.data.language,this.dict=t.data.dict,this.hasFile&&(this.addedFile=t.data.fileName)}))},methods:{getFieldName(t,e){return this.language!=l&&e?e:t},fileLoad:function(){console.log("Файл загружен"),this.formData.append("DynamicForm[loadedFile]",this.$refs.userFile.files[0]),this.addedFile=""},saveDraft:function(){this.draft=!0,this.formSubmit()},isFormValid(){let t=!0;for(let e in this.fields)this.fields[e].valid||(t=!1);return t},fieldsModificate(t){let e=!1,s=0;t.hasOwnProperty("computed")&&(e=!0,s=t.total),this.fields[t.id]={data:t.data,valid:t.valid,computed:e,total:s,checkbox:!!t.hasOwnProperty("checkbox"),equip:!!t.hasOwnProperty("equip")},this.isComputed&&this.calculatePrice(this.fields)},calculatePrice(t){let e=this.basePrice;for(let s in this.fields){let i=t[s];i.computed&&(e+=i.total)}console.log(t),console.log("price= "+e),this.totalPrice=e},formSubmit(){if(k.validate(),!this.isFormValid())return k.showErrors(),void console.log("Форма не валидна");console.log("Форма отправлена"),this.formData.append("DynamicForm[fields]",JSON.stringify(this.fields)),this.formData.append("DynamicForm[userId]",+this.userId),this.formData.append("DynamicForm[formId]",+this.formId),this.formData.append("DynamicForm[draft]",+this.draft),this.formData.append("DynamicForm[total]",this.totalPrice),this.formData.append("DynamicForm[basePrice]",this.basePrice),this.formData.append("DynamicForm[contractId]",this.contractId),this.formData.append("DynamicForm[companyId]",this.companyId),a().post("/api/application/send-form",this.formData,{headers:{"Content-Type":"multipart/form-data"}}).then((function(t){location.href="/panel/member/"+t.data.exhibitionId+"/requests/"+t.data.contractId})).catch((function(){location.href="/panel/member/requests",console.log("FAILURE!!")}))},cancel(){window.history.back()},close(){window.location.href="/panel/forms"}}};var Et=(0,d.Z)(xt,i,[],!1,null,"af35e5b2",null);Et.options.__file="assets/scripts/components/vue/DynamicForm/DynamicFormApp.vue";const wt=Et.exports,kt=window.Vue,Ft=document.getElementById("dynamic-form-app"),Dt=!!Ft.dataset.readOnly,St=parseInt(Ft.dataset.contractId);console.log("read only="+Dt),new kt({el:"#dynamic-form-app",render:t=>t(wt,{props:{isReadOnly:Dt,contractId:St}})})},900:(t,e,s)=>{"use strict";function i(t,e,s,i,r,a,n,o){var c,l="function"==typeof t?t.options:t;if(e&&(l.render=e,l.staticRenderFns=s,l._compiled=!0),i&&(l.functional=!0),a&&(l._scopeId="data-v-"+a),n?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),r&&r.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(n)},l._ssrRegister=c):r&&(c=o?function(){r.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:r),c)if(l.functional){l._injectStyles=c;var u=l.render;l.render=function(t,e){return c.call(e),u(t,e)}}else{var d=l.beforeCreate;l.beforeCreate=d?[].concat(d,c):[c]}return{exports:t,options:l}}s.d(e,{Z:()=>i})}},t=>{"use strict";t(t.s=32)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,