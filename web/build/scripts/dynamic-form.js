(self.webpackChunkb_free=self.webpackChunkb_free||[]).push([[884],{669:(e,t,a)=>{e.exports=a(609)},448:(e,t,a)=>{"use strict";var i=a(867),s=a(26),r=a(372),n=a(327),o=a(97),l=a(109),c=a(985),u=a(61);e.exports=function(e){return new Promise((function(t,a){var d=e.data,h=e.headers;i.isFormData(d)&&delete h["Content-Type"];var p=new XMLHttpRequest;if(e.auth){var m=e.auth.username||"",f=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";h.Authorization="Basic "+btoa(m+":"+f)}var v=o(e.baseURL,e.url);if(p.open(e.method.toUpperCase(),n(v,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p.onreadystatechange=function(){if(p&&4===p.readyState&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var i="getAllResponseHeaders"in p?l(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:p.status,statusText:p.statusText,headers:i,config:e,request:p};s(t,a,r),p=null}},p.onabort=function(){p&&(a(u("Request aborted",e,"ECONNABORTED",p)),p=null)},p.onerror=function(){a(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),a(u(t,e,"ECONNABORTED",p)),p=null},i.isStandardBrowserEnv()){var g=(e.withCredentials||c(v))&&e.xsrfCookieName?r.read(e.xsrfCookieName):void 0;g&&(h[e.xsrfHeaderName]=g)}if("setRequestHeader"in p&&i.forEach(h,(function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete h[t]:p.setRequestHeader(t,e)})),i.isUndefined(e.withCredentials)||(p.withCredentials=!!e.withCredentials),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){p&&(p.abort(),a(e),p=null)})),d||(d=null),p.send(d)}))}},609:(e,t,a)=>{"use strict";var i=a(867),s=a(849),r=a(321),n=a(185);function o(e){var t=new r(e),a=s(r.prototype.request,t);return i.extend(a,r.prototype,t),i.extend(a,t),a}var l=o(a(655));l.Axios=r,l.create=function(e){return o(n(l.defaults,e))},l.Cancel=a(263),l.CancelToken=a(972),l.isCancel=a(502),l.all=function(e){return Promise.all(e)},l.spread=a(713),l.isAxiosError=a(268),e.exports=l,e.exports.default=l},263:e=>{"use strict";function t(e){this.message=e}t.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},t.prototype.__CANCEL__=!0,e.exports=t},972:(e,t,a)=>{"use strict";var i=a(263);function s(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var a=this;e((function(e){a.reason||(a.reason=new i(e),t(a.reason))}))}s.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},s.source=function(){var e;return{token:new s((function(t){e=t})),cancel:e}},e.exports=s},502:e=>{"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},321:(e,t,a)=>{"use strict";var i=a(867),s=a(327),r=a(782),n=a(572),o=a(185);function l(e){this.defaults=e,this.interceptors={request:new r,response:new r}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=o(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[n,void 0],a=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)a=a.then(t.shift(),t.shift());return a},l.prototype.getUri=function(e){return e=o(this.defaults,e),s(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},i.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,a){return this.request(o(a||{},{method:e,url:t,data:(a||{}).data}))}})),i.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,a,i){return this.request(o(i||{},{method:e,url:t,data:a}))}})),e.exports=l},782:(e,t,a)=>{"use strict";var i=a(867);function s(){this.handlers=[]}s.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},s.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},s.prototype.forEach=function(e){i.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=s},97:(e,t,a)=>{"use strict";var i=a(793),s=a(303);e.exports=function(e,t){return e&&!i(t)?s(e,t):t}},61:(e,t,a)=>{"use strict";var i=a(481);e.exports=function(e,t,a,s,r){var n=new Error(e);return i(n,t,a,s,r)}},572:(e,t,a)=>{"use strict";var i=a(867),s=a(527),r=a(502),n=a(655);function o(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return o(e),e.headers=e.headers||{},e.data=s(e.data,e.headers,e.transformRequest),e.headers=i.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),i.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||n.adapter)(e).then((function(t){return o(e),t.data=s(t.data,t.headers,e.transformResponse),t}),(function(t){return r(t)||(o(e),t&&t.response&&(t.response.data=s(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},481:e=>{"use strict";e.exports=function(e,t,a,i,s){return e.config=t,a&&(e.code=a),e.request=i,e.response=s,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},185:(e,t,a)=>{"use strict";var i=a(867);e.exports=function(e,t){t=t||{};var a={},s=["url","method","data"],r=["headers","auth","proxy","params"],n=["baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","maxRedirects","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding"],o=["validateStatus"];function l(e,t){return i.isPlainObject(e)&&i.isPlainObject(t)?i.merge(e,t):i.isPlainObject(t)?i.merge({},t):i.isArray(t)?t.slice():t}function c(s){i.isUndefined(t[s])?i.isUndefined(e[s])||(a[s]=l(void 0,e[s])):a[s]=l(e[s],t[s])}i.forEach(s,(function(e){i.isUndefined(t[e])||(a[e]=l(void 0,t[e]))})),i.forEach(r,c),i.forEach(n,(function(s){i.isUndefined(t[s])?i.isUndefined(e[s])||(a[s]=l(void 0,e[s])):a[s]=l(void 0,t[s])})),i.forEach(o,(function(i){i in t?a[i]=l(e[i],t[i]):i in e&&(a[i]=l(void 0,e[i]))}));var u=s.concat(r).concat(n).concat(o),d=Object.keys(e).concat(Object.keys(t)).filter((function(e){return-1===u.indexOf(e)}));return i.forEach(d,c),a}},26:(e,t,a)=>{"use strict";var i=a(61);e.exports=function(e,t,a){var s=a.config.validateStatus;a.status&&s&&!s(a.status)?t(i("Request failed with status code "+a.status,a.config,null,a.request,a)):e(a)}},527:(e,t,a)=>{"use strict";var i=a(867);e.exports=function(e,t,a){return i.forEach(a,(function(a){e=a(e,t)})),e}},655:(e,t,a)=>{"use strict";var i=a(867),s=a(16),r={"Content-Type":"application/x-www-form-urlencoded"};function n(e,t){!i.isUndefined(e)&&i.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var o,l={adapter:(("undefined"!=typeof XMLHttpRequest||"undefined"!=typeof process&&"[object process]"===Object.prototype.toString.call(process))&&(o=a(448)),o),transformRequest:[function(e,t){return s(t,"Accept"),s(t,"Content-Type"),i.isFormData(e)||i.isArrayBuffer(e)||i.isBuffer(e)||i.isStream(e)||i.isFile(e)||i.isBlob(e)?e:i.isArrayBufferView(e)?e.buffer:i.isURLSearchParams(e)?(n(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):i.isObject(e)?(n(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};i.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),i.forEach(["post","put","patch"],(function(e){l.headers[e]=i.merge(r)})),e.exports=l},849:e=>{"use strict";e.exports=function(e,t){return function(){for(var a=new Array(arguments.length),i=0;i<a.length;i++)a[i]=arguments[i];return e.apply(t,a)}}},327:(e,t,a)=>{"use strict";var i=a(867);function s(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,a){if(!t)return e;var r;if(a)r=a(t);else if(i.isURLSearchParams(t))r=t.toString();else{var n=[];i.forEach(t,(function(e,t){null!=e&&(i.isArray(e)?t+="[]":e=[e],i.forEach(e,(function(e){i.isDate(e)?e=e.toISOString():i.isObject(e)&&(e=JSON.stringify(e)),n.push(s(t)+"="+s(e))})))})),r=n.join("&")}if(r){var o=e.indexOf("#");-1!==o&&(e=e.slice(0,o)),e+=(-1===e.indexOf("?")?"?":"&")+r}return e}},303:e=>{"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},372:(e,t,a)=>{"use strict";var i=a(867);e.exports=i.isStandardBrowserEnv()?{write:function(e,t,a,s,r,n){var o=[];o.push(e+"="+encodeURIComponent(t)),i.isNumber(a)&&o.push("expires="+new Date(a).toGMTString()),i.isString(s)&&o.push("path="+s),i.isString(r)&&o.push("domain="+r),!0===n&&o.push("secure"),document.cookie=o.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},793:e=>{"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},268:e=>{"use strict";e.exports=function(e){return"object"==typeof e&&!0===e.isAxiosError}},985:(e,t,a)=>{"use strict";var i=a(867);e.exports=i.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),a=document.createElement("a");function s(e){var i=e;return t&&(a.setAttribute("href",i),i=a.href),a.setAttribute("href",i),{href:a.href,protocol:a.protocol?a.protocol.replace(/:$/,""):"",host:a.host,search:a.search?a.search.replace(/^\?/,""):"",hash:a.hash?a.hash.replace(/^#/,""):"",hostname:a.hostname,port:a.port,pathname:"/"===a.pathname.charAt(0)?a.pathname:"/"+a.pathname}}return e=s(window.location.href),function(t){var a=i.isString(t)?s(t):t;return a.protocol===e.protocol&&a.host===e.host}}():function(){return!0}},16:(e,t,a)=>{"use strict";var i=a(867);e.exports=function(e,t){i.forEach(e,(function(a,i){i!==t&&i.toUpperCase()===t.toUpperCase()&&(e[t]=a,delete e[i])}))}},109:(e,t,a)=>{"use strict";var i=a(867),s=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,a,r,n={};return e?(i.forEach(e.split("\n"),(function(e){if(r=e.indexOf(":"),t=i.trim(e.substr(0,r)).toLowerCase(),a=i.trim(e.substr(r+1)),t){if(n[t]&&s.indexOf(t)>=0)return;n[t]="set-cookie"===t?(n[t]?n[t]:[]).concat([a]):n[t]?n[t]+", "+a:a}})),n):n}},713:e=>{"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},867:(e,t,a)=>{"use strict";var i=a(849),s=Object.prototype.toString;function r(e){return"[object Array]"===s.call(e)}function n(e){return void 0===e}function o(e){return null!==e&&"object"==typeof e}function l(e){if("[object Object]"!==s.call(e))return!1;var t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}function c(e){return"[object Function]"===s.call(e)}function u(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),r(e))for(var a=0,i=e.length;a<i;a++)t.call(null,e[a],a,e);else for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.call(null,e[s],s,e)}e.exports={isArray:r,isArrayBuffer:function(e){return"[object ArrayBuffer]"===s.call(e)},isBuffer:function(e){return null!==e&&!n(e)&&null!==e.constructor&&!n(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:o,isPlainObject:l,isUndefined:n,isDate:function(e){return"[object Date]"===s.call(e)},isFile:function(e){return"[object File]"===s.call(e)},isBlob:function(e){return"[object Blob]"===s.call(e)},isFunction:c,isStream:function(e){return o(e)&&c(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:u,merge:function e(){var t={};function a(a,i){l(t[i])&&l(a)?t[i]=e(t[i],a):l(a)?t[i]=e({},a):r(a)?t[i]=a.slice():t[i]=a}for(var i=0,s=arguments.length;i<s;i++)u(arguments[i],a);return t},extend:function(e,t,a){return u(t,(function(t,s){e[s]=a&&"function"==typeof t?i(t,a):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e}}},345:(e,t,a)=>{"use strict";function i(e){let t=e.toString().replace(/[^0-9]/g,"");return t=t.replace(/^0/,""),""==t&&(t="0"),t=t.replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1 "),t}a.d(t,{o:()=>i})},831:(e,t,a)=>{"use strict";a.d(t,{Y:()=>i});const i=new Vue({methods:{validate(){this.$emit("validate")},showErrors(){this.$emit("showErrors")}}})},404:(e,t,a)=>{"use strict";var i=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"card card-primary"},[a("div",{staticClass:"card-header"},[e._v("\n        "+e._s(e.title)+"\n    ")]),e._v(" "),a("div",{staticClass:"card-body"},[a("div",{staticClass:"app-info__wrapper"},[a("div",{staticClass:"app-info"},[a("p",[e._v(e._s(e.dict.contractInfo.standNumber)+":"),a("span",[e._v(e._s(this.standNumber))])]),e._v(" "),a("p",[e._v(e._s(e.dict.contractInfo.hall)+":"),a("span",[e._v(e._s(this.hall))])]),e._v(" "),a("p",[e._v(e._s(e.dict.contractInfo.standSquare)+":"),a("span",[e._v(e._s(this.standSquare))])])])]),e._v(" "),e._l(e.elements,(function(t){return[t.isGroup?e._e():a("el",{attrs:{unitData:t,lang:e.language,dic:e.dict},on:{modification:e.fieldsModificate}}),e._v(" "),t.isGroup?a("group",{attrs:{fields:t.fields,title:e.getFieldName(t.name,t.name_eng),lang:e.language,dic:e.dict},on:{modification:e.fieldsModificate}}):e._e()]})),e._v(" "),a("div",{directives:[{name:"show",rawName:"v-show",value:e.isFileUpload,expression:"isFileUpload"}],staticClass:"form-group clr"},[a("p",{staticClass:"d-flex flex-column"},[a("span",[e._v(e._s(e.dict.fileAttach.attachFile))])]),e._v(" "),a("div",{staticClass:"input-group"},[a("div",{staticClass:"custom-file"},[a("input",{ref:"userFile",staticClass:"custom-file-input",attrs:{type:"file",id:"userFile"},on:{change:e.fileLoad}}),e._v(" "),a("label",{staticClass:"custom-file-label",attrs:{"data-browse":e.dict.fileAttach.browse,for:"userFile"}},[e._v("Select file")])])]),e._v(" "),e.hasFile?a("div",{staticClass:"file__added"},[a("i",{staticClass:"fa fa-file",attrs:{"aria-hidden":"true"}}),e._v(" "),a("a",{attrs:{href:e.attachedFile}},[e._v(e._s(e.attachedFile))])]):e._e(),e._v(" "),e.showLimitSizeOfFileMsg?a("div",{staticClass:"error-message"},[e._v(e._s(e.dict.fileAttach.limitSizeMessage))]):e._e()]),e._v(" "),e.isComputed?a("computed",{attrs:{total:e.totalPrice,dic:e.dict}}):e._e(),e._v(" "),a("div",{staticClass:"card-footer"},[e.isReadOnly?e._e():a("button",{staticClass:"btn btn-primary",attrs:{type:"button"},on:{click:e.saveDraft}},[e._v(e._s(e.dict.buttons.draft))]),e._v(" "),e.isReadOnly?e._e():a("button",{staticClass:"btn btn-success",attrs:{type:"button"},on:{click:e.formSubmit}},[e._v(e._s(e.dict.buttons.send))]),e._v(" "),e.isReadOnly?e._e():a("button",{staticClass:"btn btn-secondary",attrs:{type:"button"},on:{click:e.cancel}},[e._v(e._s(e.dict.buttons.cancel))]),e._v(" "),e.isReadOnly?a("button",{staticClass:"btn btn-secondary",attrs:{type:"button"},on:{click:e.close}},[e._v(e._s(e.dict.buttons.close))]):e._e()])],2)])};i._withStripped=!0;var s=a(669),r=a.n(s),n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"comp"},[a(e.currentElement,{tag:"component",attrs:{params:e.unitData,lang:e.lang,dic:e.dic},on:{changeField:e.fieldChanged}})],1)};n._withStripped=!0;var o=function(){var e=this,t=e.$createElement;return(e._self._c||t)("div",{staticClass:"inform",domProps:{innerHTML:e._s(e.title)}})};o._withStripped=!0;const l={props:["params"],data(){return{parameters:this.params.parameters,unit:this.params.parameters.unitName}},computed:{required(){return!!parseInt(this.params.parameters.required)}}},c="ru-RU",u={props:["lang"],mixins:[l],computed:{title(){return this.lang!=c&&this.parameters.htmlEng?this.parameters.htmlEng:this.parameters.html}}};var d=a(900),h=(0,d.Z)(u,o,[],!1,null,"2bf6eb86",null);h.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/ImportantBlock.vue";const p=h.exports;var m=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"header__block"},[a("h4",[e._v(e._s(e.header))]),e._v(" "),a("p",{staticClass:"description"},[e._v(e._s(e.desc))]),e._v(" "),a("p",{staticClass:"info"},[e._v(e._s(e.title))])])};m._withStripped=!0;const f={props:["lang"],mixins:[l],computed:{title(){return this.lang!=c&&this.parameters.textEng?this.parameters.textEng:this.parameters.text},header(){return this.lang!=c&&this.params.textEng?this.params.name_eng:this.params.name},desc(){return this.lang!=c&&this.params.textEng?this.params.description_eng:this.params.description}}};var v=(0,d.Z)(f,m,[],!1,null,"0f3e9295",null);v.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/HeaderBlock.vue";const g=v.exports;var b=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group"},[a("div",{staticClass:"custom-control custom-checkbox"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.checked,expression:"checked"}],staticClass:"custom-control-input",attrs:{type:"checkbox",id:e.id},domProps:{checked:Array.isArray(e.checked)?e._i(e.checked,null)>-1:e.checked},on:{change:[function(t){var a=e.checked,i=t.target,s=!!i.checked;if(Array.isArray(a)){var r=e._i(a,null);i.checked?r<0&&(e.checked=a.concat([null])):r>-1&&(e.checked=a.slice(0,r).concat(a.slice(r+1)))}else e.checked=s},e.change]}}),e._v(" "),a("label",{staticClass:"custom-control-label",attrs:{for:e.id}},[e._v(e._s(e.titleLabel))])])])};b._withStripped=!0;const y={computed:{titleLabel(){return this.lang!=c&&this.params.name_eng?this.params.name_eng:this.params.name},descriptionLabel(){return this.lang!=c&&this.params.description_eng,this.params.description}}},_={data(){let e,t;return e=this.params.parameters.hasOwnProperty("basePrice")?+this.params.parameters.basePrice:0,t=this.params.parameters.hasOwnProperty("unitPrice")?+this.params.parameters.unitPrice:0,{unitPrice:t,basePrice:e}},computed:{isComputed(){return!!parseInt(this.params.parameters.isComputed)}}},C={props:["lang"],data(){return{id:"id"+this.params.id,checked:this.params.checked,valid:!0}},mixins:[l,_,y],created(){this.$emit("changeField",this.getData())},computed:{total(){return this.isComputed&&this.checked?+this.unitPrice:0}},methods:{change(){this.params.value=this.checked,this.$emit("changeField",this.getData())},getData(){let e={id:this.id,data:{value:this.unitPrice,checked:this.checked},valid:this.valid,checkbox:!0};return this.isComputed&&(e.computed=!0,e.total=this.total),e}}};var w=(0,d.Z)(C,b,[],!1,null,null,null);w.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/CheckBoxBlock.vue";const D=w.exports;var k=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group align-right",class:{required:e.required}},[a("div",{staticClass:"flex__wrapper"},[a("label",{attrs:{for:e.id}},[e._v(e._s(e.titleLabel))]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:e.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":e.hasErrorsForShow()},attrs:{id:e.id,type:"text",placeholder:""},domProps:{value:e.val},on:{change:function(t){return e.onChange(t)},input:function(t){t.target.composing||(e.val=t.target.value)}}})]),e._v(" "),e.hasErrorsForShow()?a("div",{staticClass:"help-block"},[e._v(e._s(e.errors.required.message))]):e._e(),e._v(" "),e.hasErrorsForShow()?e._e():a("div",{staticClass:"desc-block"},[e._v(e._s(e.descriptionLabel))])])};k._withStripped=!0;var x=a(831);const F={props:["lang"],data(){return{id:"id"+this.params.id,val:this.params.value?this.params.value:"",currentVal:this.params.value,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"}}}},mixins:[l,y],created(){this.$emit("changeField",this.getData()),x.Y.$on("showErrors",(()=>this.showErrors=!0)),x.Y.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{validate(){this.valid=!0,this.currentError=null,""==this.val&&this.required&&(this.currentError=this.errors.required,this.valid=!1)},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(e){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){return{id:this.id,data:{value:this.val},valid:this.valid}}}};var S=(0,d.Z)(F,k,[],!1,null,null,null);S.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/TextInputBlock.vue";const E=S.exports;var $=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group"},[a("label",{attrs:{for:e.id}},[e._v(e._s(e.titleLabel))]),e._v(" "),a("div",{staticClass:"input-group"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":e.hasErrorsForShow()},attrs:{id:e.id,type:"text",placeholder:"Enter ..."},domProps:{value:e.val},on:{change:function(t){return e.onChange(t)},input:function(t){t.target.composing||(e.val=t.target.value)}}}),e._v(" "),e.unit?a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v(e._s(e.unit))])]):e._e(),e._v(" "),e.isComputed?a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("x"),a("span",{staticClass:"price"},[e._v(e._s(+e.unitPrice))]),e._v(" "+e._s(e.dic.valute))])]):e._e(),e._v(" "),e.isComputed?a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("="),a("span",{staticClass:"price"},[e._v(e._s(e._f("separate")(e.total)))]),e._v(" "+e._s(e.dic.valute))])]):e._e()]),e._v(" "),e.hasErrorsForShow()?a("div",{staticClass:"help-block"},[e._v(e._s(e.currentError.message))]):e._e()])};$._withStripped=!0;var M=a(345);const T={filters:{separate:e=>(0,M.o)(e)}},P={props:["dic","lang"],data(){return{id:"id"+this.params.id,val:this.params.value,currentError:null,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"},notNumber:{message:"Заполняемое поле должно быть числом"}}}},computed:{total(){let e=0;return this.isComputed?(e=+this.val*+this.unitPrice,isNaN(e)?0:e):0}},mixins:[l,_,T,y],created(){this.$emit("changeField",this.getData()),x.Y.$on("showErrors",(()=>this.showErrors=!0)),x.Y.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{isNumber:e=>/^\d+$/.test(e),validate(){return this.valid=!0,this.currentError=null,""==this.val?this.required?(this.currentError=this.errors.required,void(this.valid=!1)):void 0:this.isNumber(this.val)?void 0:(this.currentError=this.errors.notNumber,void(this.valid=!1))},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(e){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){let e={id:this.id,data:{value:this.val},valid:this.valid};return this.validate(),this.isComputed&&(e.computed=!0,e.total=this.total),e}}};var O=(0,d.Z)(P,$,[],!1,null,null,null);O.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/NumberInputBlock.vue";const N=O.exports;var A=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group check__number"},[a("div",{staticClass:"custom-control custom-checkbox"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.checked,expression:"checked"}],staticClass:"custom-control-input",attrs:{type:"checkbox",id:e.id},domProps:{checked:Array.isArray(e.checked)?e._i(e.checked,null)>-1:e.checked},on:{change:[function(t){var a=e.checked,i=t.target,s=!!i.checked;if(Array.isArray(a)){var r=e._i(a,null);i.checked?r<0&&(e.checked=a.concat([null])):r>-1&&(e.checked=a.slice(0,r).concat(a.slice(r+1)))}else e.checked=s},e.change]}}),e._v(" "),a("label",{staticClass:"custom-control-label",attrs:{for:e.id}},[e._v(e._s(e.titleLabel))])]),e._v(" "),e.checked?a("div",{staticClass:"input-block"},[a("div",{staticClass:"input-group"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.val,expression:"val"}],staticClass:"form-control",class:{"is-invalid":e.hasErrorsForShow()},attrs:{id:e.id,type:"text",placeholder:"Enter ..."},domProps:{value:e.val},on:{change:function(t){return e.onChange(t)},input:function(t){t.target.composing||(e.val=t.target.value)}}}),e._v(" "),e.unit?a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v(e._s(e.unit))])]):e._e(),e._v(" "),e.isComputed?a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("x"),a("span",{staticClass:"price"},[e._v(e._s(+e.unitPrice))]),e._v(" "+e._s(e.dic.valute))])]):e._e(),e._v(" "),e.isComputed?a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("="),a("span",{staticClass:"price"},[e._v(e._s(e._f("separate")(e.total)))]),e._v(" "+e._s(e.dic.valute))])]):e._e()]),e._v(" "),e.hasErrorsForShow()?a("div",{staticClass:"help-block"},[e._v(e._s(e.currentError.message))]):e._e()]):e._e()])};A._withStripped=!0;const I={props:["dic","lang"],data(){return{id:"id"+this.params.id,val:this.params.value,checked:this.params.checked,currentError:null,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"},notNumber:{message:"Заполняемое поле должно быть числом"}}}},mixins:[l,_,y,T],computed:{total(){if(!this.isComputed||!this.checked)return 0;let e=+this.val*+this.unitPrice;return isNaN(e)?0:e}},created(){this.$emit("changeField",this.getData()),x.Y.$on("showErrors",(()=>this.showErrors=!0)),x.Y.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{change(){this.$emit("changeField",this.getData())},isNumber:e=>/^\d+$/.test(e),validate(){if(this.valid=!0,this.checked)return this.currentError=null,""==this.val?this.required?(this.currentError=this.errors.required,void(this.valid=!1)):void 0:this.isNumber(this.val)?void 0:(this.currentError=this.errors.notNumber,void(this.valid=!1))},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(e){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){this.validate();let e={id:this.id,data:{value:this.val,checked:this.checked},valid:this.valid};return this.isComputed&&this.checked&&(e.computed=!0,e.total=this.total),e}}};var V=(0,d.Z)(I,A,[],!1,null,"1340f614",null);V.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/CheckNumberInput.vue";const L=V.exports;var Y=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group"},[a("label",{staticClass:"control-label"},[e._v(e._s(e.titleLabel))]),e._v(" "),a("select",{directives:[{name:"model",rawName:"v-model",value:e.selected,expression:"selected"}],staticClass:"form-control",attrs:{name:e.id,id:e.id},on:{change:[function(t){var a=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.selected=t.target.multiple?a:a[0]},e.change]}},e._l(e.enums,(function(t){return a("option",{domProps:{value:t.id}},[e._v(e._s(e.getName(t.name,t.name_eng)))])})),0),e._v(" "),a("div",{staticClass:"field__desc"},[e._v(e._s(e.descriptionLabel))]),e._v(" "),e.isComputed?a("div",{staticClass:"field__price"},[a("span",{staticClass:"price"},[e._v(e._s(e.total))]),e._v(" "+e._s(e.dic.valute))]):e._e()])};Y._withStripped=!0;const j={data(){return{enums:this.params.enumsList}}},R={methods:{getName(e,t){return this.lang!=c&&t?t:e}}},B={props:["lang","dic"],data(){return{id:"id"+this.params.id,valid:!0,selected:this.params.value}},computed:{total(){let e=0;if(!this.isComputed)return e;for(const t of this.enums)t.id==this.selected&&(e=+t.value);return isNaN(e)?0:e}},created(){this.$emit("changeField",this.getData())},methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let e={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(e.computed=!0,e.total=this.total),e}},mixins:[l,j,_,y,R]};var H=(0,d.Z)(B,Y,[],!1,null,"1c6ee5f4",null);H.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/SelectBlock.vue";const q=H.exports;var U=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group"},[a("label",{attrs:{for:e.id}},[e._v(e._s(e.titleLabel))]),e._v(" "),a("div",{staticClass:"col-12"},[a("div",{staticClass:"input-group"},[1!=e.friezeFieldType?a("input",{directives:[{name:"model",rawName:"v-model",value:e.val,expression:"val"}],staticClass:"form-control",attrs:{id:e.id,type:"text",placeholder:"Enter ..."},domProps:{value:e.val},on:{change:function(t){return e.onChange(t)},input:function(t){t.target.composing||(e.val=t.target.value)}}}):a("textarea",{directives:[{name:"model",rawName:"v-model",value:e.val,expression:"val"}],staticClass:"form-control",attrs:{name:"frieze__area",cols:"30",rows:"10",id:e.id,type:"text",placeholder:"Enter ..."},domProps:{value:e.val},on:{change:function(t){return e.onChange(t)},input:function(t){t.target.composing||(e.val=t.target.value)}}})]),e._v(" "),e.isPaid?a("div",{staticClass:"col-12"},[a("div",{staticClass:"input-group additiomal"},[a("span",[e._v(e._s(e.dic.addSymbols)+": ")]),e._v(" "),a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v(e._s(e.paiedFrizeSigns)+" "+e._s(e.dic.symbol))])]),e._v(" "),a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("x "+e._s(e.frizeDigitPrice)+" "+e._s(e.dic.valute))])]),e._v(" "),a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("= "+e._s(e.frizePrice)+" "+e._s(e.dic.valute))])])])]):e._e()])])};U._withStripped=!0;const W={props:["lang","params","dic"],data(){return{id:"id"+this.params.id,val:this.params.value,currentVal:this.params.value,valid:!0}},mixins:[y],computed:{symsLength(){return this.val.trim().length},frizeDigitPrice(){return parseInt(this.params.parameters.digitPrice)},friezeFieldType(){return parseInt(this.params.parameters.friezeFieldType)},frizeFreeDigits(){return parseInt(this.params.parameters.freeDigitCount)},isPaid(){return!!this.val&&this.symsLength>this.frizeFreeDigits},paiedFrizeSigns:function(){return this.isPaid?this.symsLength-this.frizeFreeDigits:0},frizePrice:function(){return this.frizeDigitPrice*this.paiedFrizeSigns},total(){return this.frizePrice}},created(){this.$emit("changeField",this.getData())},methods:{onChange(e){this.$emit("changeField",this.getData())},getData(){return{id:this.id,computed:!0,total:this.total,data:{value:this.val},valid:!0}}}};var z=(0,d.Z)(W,U,[],!1,null,null,null);z.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/FriezeBlock.vue";const Z=z.exports;var J=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group"},[a("select",{directives:[{name:"model",rawName:"v-model",value:e.selected,expression:"selected"}],staticClass:"form-control",attrs:{name:e.id,id:e.id,multiple:""},on:{change:[function(t){var a=Array.prototype.filter.call(t.target.options,(function(e){return e.selected})).map((function(e){return"_value"in e?e._value:e.value}));e.selected=t.target.multiple?a:a[0]},e.change]}},e._l(e.enums,(function(t){return a("option",{domProps:{value:t.id}},[e._v(e._s(t.name))])})),0),e._v(" "),a("div",{staticClass:"field__desc"},[e._v(e._s(e.descriptionLabel))]),e._v(" "),e.isComputed?a("div",{staticClass:"field__price"},[a("span",{staticClass:"price"},[e._v(e._s(e.total))]),e._v(" "+e._s(e.dic.valute))]):e._e()])};J._withStripped=!0;const X={props:["lang","dic"],data(){let e=Array.isArray(this.params.value)?this.params.value:[];return{id:"id"+this.params.id,valid:!0,selected:e}},computed:{total(){if(!this.isComputed)return 0;let e=0;for(const t of this.enums)this.selected.indexOf(t.id)>=0&&(e+=+t.value);return e}},created(){this.$emit("changeField",this.getData())},mixins:[l,j,_,y,R],methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let e={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(e.computed=!0,e.total=this.total),e}}};var G=(0,d.Z)(X,J,[],!1,null,"3b349e9a",null);G.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/MultiSelectBlock.vue";const K=G.exports;var Q=function(){var e=this;e.$createElement;return e._self._c,e._m(0)};Q._withStripped=!0;var ee=(0,d.Z)({},Q,[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"block__undefined"},[a("h2",[e._v("Неизвестный тип блока")])])}],!1,null,null,null);ee.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/UndefinedBlock.vue";const te=ee.exports;var ae=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group"},[a("div",{staticClass:"label"},[e._v(e._s(e.params.name))]),e._v(" "),e._l(e.enums,(function(t){return a("div",{staticClass:"form-check"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.selected,expression:"selected"}],staticClass:"form-check-input",attrs:{type:"radio",name:e.id},domProps:{value:t.id,checked:e._q(e.selected,t.id)},on:{change:[function(a){e.selected=t.id},e.change]}}),e._v(" "),a("label",{staticClass:"form-check-label"},[e._v(e._s(t.name))])])}))],2)};ae._withStripped=!0;const ie={data(){return{id:"id"+this.params.id,val:this.params.value,valid:!0,selected:this.params.value}},created(){this.$emit("changeField",this.getData())},methods:{change(){this.params.value=this.selected,this.$emit("changeField",this.getData())},getData(){let e={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(e.computed=!0,e.total=this.total),e}},computed:{total(){let e=0;if(!this.isComputed)return 0;for(const t of this.enums)t.id==this.selected&&(e=+t.value);return isNaN(e)?0:e}},mixins:[l,j,_]};var se=(0,d.Z)(ie,ae,[],!1,null,"a37ba566",null);se.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/RadioBlock.vue";const re=se.exports;var ne=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"equipments-list__container"},[a("ul",{staticClass:"additional-equipment__list"},[e._l(e.categories,(function(t,i){return[e.isShowed(t.id)?a("li",{key:i},[a("span",{on:{click:function(a){return e.expand(t.id)}}},[e._v(e._s(e.getName(t.name,t.name_eng)))]),e._v(" "),a("equipment-list",{attrs:{val:e.values,id:t.id,fieldId:e.params.id,eventBus:e.bus,dic:e.dic,lang:e.lang},on:{changeValue:e.setValue}})],1):e._e()]}))],2),e._v(" "),a("table",{staticClass:"table"},[a("tbody",[e._l(e.values,(function(t,i){return a("tr",{key:i},[a("td",[e._v(e._s(t.code))]),e._v(" "),a("td",[e._v(e._s(e.getName(t.name,t.name_eng)))]),e._v(" "),a("td",[e._v(e._s(e._f("separate")(t.count))+" "+e._s(e.getName(t.unit.short_name,t.unit.short_name_eng)))]),e._v(" "),a("td",[e._v("x"+e._s(e._f("separate")(t.price))+" "+e._s(e.dic.valute))]),e._v(" "),a("td",[e._v("="+e._s(e._f("separate")(t.price*t.count))+" "+e._s(e.dic.valute))])])})),e._v(" "),e.isComputed?a("tr",[a("td",{staticClass:"total",attrs:{colspan:"5"}},[e._v(e._s(e.dic.total.totalMsg)+": "+e._s(e._f("separate")(e.total))+" "+e._s(e.dic.valute))])]):e._e()],2)])])};ne._withStripped=!0;var oe=function(){var e=this,t=e.$createElement,a=e._self._c||t;return e.expand?a("div",{staticClass:"container"},e._l(e.equipments,(function(t,i){return a("div",{staticClass:"form-group"},[a("label",{attrs:{for:e.getId(t.id)}},[e._v(e._s(e.getName(t.name,t.name_eng)))]),e._v(" "),a("div",{staticClass:"input-group"},[a("input",{directives:[{name:"model",rawName:"v-model",value:e.inputs[t.id],expression:"inputs[equipment.id]"}],staticClass:"form-control",attrs:{type:"text",placeholder:"Enter ..."},domProps:{value:e.inputs[t.id]},on:{change:function(a){return e.setVal(t,e.inputs[t.id])},input:function(a){a.target.composing||e.$set(e.inputs,t.id,a.target.value)}}}),e._v(" "),a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v(e._s(e.getName(t.unit.short_name,t.unit.short_name_eng)))])]),e._v(" "),a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("x"),a("span",{staticClass:"price"},[e._v(e._s(e._f("separate")(+t.price)))]),e._v(" "+e._s(e.dic.valute))])]),e._v(" "),a("div",{staticClass:"input-group-append"},[a("span",{staticClass:"input-group-text"},[e._v("="),a("span",{staticClass:"price"},[e._v(e._s(e._f("separate")(e.getTotalPrice(t,+e.inputs[t.id]))))]),e._v(" "+e._s(e.dic.valute))])])])])})),0):e._e()};oe._withStripped=!0;const le={mixins:[T,R],props:["id","eventBus","val","dic","fieldId","lang"],data:()=>({equipments:[],isLoaded:!1,expand:!1,inputs:[]}),created(){this.eventBus.$on("expand",this.expandElement)},methods:{setVal(e,t){let a={};Object.assign(a,e),this.$emit("changeValue",a,t)},isNumber:e=>/^\d+$/.test(e),expandElement(e){e===this.id&&(this.expand=!this.expand,this.isLoaded||(this.getEquipments(),this.isLoaded=!0))},getId:e=>"equipment-"+e,getEquipments(){r().get("/api/equipment/get-equipments?categoryId="+this.id+"&fieldId="+this.fieldId).then((e=>{this.equipments=e.data;const t=Object.keys(this.equipments);for(const e of t)this.val.hasOwnProperty(e)&&(this.inputs[e]=this.val[e].count)}))},getTotalPrice(e,t){let a=0;return a=t>0?t*e.price:0,a}}};var ce=(0,d.Z)(le,oe,[],!1,null,"c5be9ba4",null);ce.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/Components/EquipmentList.vue";const ue={props:["dic","lang"],data(){let e={};return this.params.value&&(e=this.params.value),{id:"id"+this.params.id,categories:[],availableCategories:this.params.parameters.categories,allCategories:1==this.params.parameters.allCategories,bus:new Vue,values:e}},computed:{total(){let e,t=0;if(!this.isComputed)return t;const a=Object.keys(this.values);for(const i of a)e=Number.parseInt(this.values[i].count)*Number.parseInt(this.values[i].price),isNaN(e)||(t+=e);return t}},mixins:[l,T,R,_],components:{EquipmentList:ce.exports},methods:{isShowed(e){return console.log("Id = ",e),this.allCategories||-1!==this.availableCategories.indexOf(e)},expand(e){this.bus.$emit("expand",e)},setValue(e,t){const a=+e.id;t>0?Vue.set(this.values,a,{name:this.getName(e.name,e.name_eng),code:e.code,unit:e.unit.short_name,id:e.id,count:t,price:e.price}):Vue.delete(this.values,a),this.$emit("changeField",this.getData())},onChange(e){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){let e=[];for(let t in this.values)e.push({id:this.values[t].id,count:this.values[t].count,price:this.values[t].price});let t={id:this.id,data:{value:e},valid:!0};return this.isComputed&&(t.computed=!0,t.equip=!0,t.total=this.total),t}},beforeCreate:function(){r().get("/api/equipment/get-categories").then((e=>{this.categories=e.data}))},created(){this.$emit("changeField",this.getData())}};var de=(0,d.Z)(ue,ne,[],!1,null,"7e81879a",null);de.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/EquipmentBlock.vue";const he=de.exports;var pe=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"block__group"},[e.showTitle?a("h2",[e._v(e._s(e.titleLabel))]):e._e(),e._v(" "),e._l(e.elements,(function(t){return[a("el",{attrs:{lang:e.lang,unitData:t,dic:e.dic},on:{modification:e.fieldChanged}})]}))],2)};pe._withStripped=!0;var me=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"comp"},[a(e.currentElement,{tag:"component",attrs:{params:e.unitData,lang:e.lang,dic:e.dic},on:{changeField:e.fieldChanged}})],1)};me._withStripped=!0;var fe=function(){var e=this,t=e.$createElement;return(e._self._c||t)("div",{staticClass:"important",domProps:{innerHTML:e._s(e.title)}})};fe._withStripped=!0;const ve={props:["lang"],mixins:[l],computed:{title(){return this.lang!=c&&this.parameters.textEng?this.parameters.textEng:this.parameters.text}}};var ge=(0,d.Z)(ve,fe,[],!1,null,null,null);ge.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/ImportantInformation.vue";const be=ge.exports,ye={props:["unitData","lang","dic"],components:{important:p,"important-information":be,"header-blck":g,"text-input":E,"number-input":N,"check-number-input":L,checkbox:D,"select-input":q,"multi-select-input":K,radio:re,equipment:he,frieze:Z,undefined:te},data:()=>({typesList:{blockCheckbox:1,blockSelect:2,blockMultiSelect:3,blockRadio:6,blockNumberInput:7,blockCheckNumber:8,blockTextInput:9,blockImportantInformation:12,blockImportant:13,blockHeader:14,blockEquipment:15,blockGroup:16,blockFrieze:17}}),methods:{fieldChanged(e){this.$emit("modification",e)}},computed:{currentElement(){switch(parseInt(this.unitData.element_type_id)){case this.typesList.blockSelect:return"select-input";case this.typesList.blockRadio:return"radio";case this.typesList.blockMultiSelect:return"multi-select-input";case this.typesList.blockCheckbox:return"checkbox";case this.typesList.blockNumberInput:return"number-input";case this.typesList.blockTextInput:return"text-input";case this.typesList.blockCheckNumber:return"check-number-input";case this.typesList.blockImportant:return"important";case this.typesList.blockHeader:return"header-blck";case this.typesList.blockImportantInformation:return"important-information";case this.typesList.blockEquipment:return"equipment";case this.typesList.blockFrieze:return"frieze";case this.typesList.blockGroup:return"group";default:return"undefined"}}}};var _e=(0,d.Z)(ye,me,[],!1,null,null,null);_e.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/ElementInGroup.vue";const Ce={data(){return{id:"id"+this.params.id,fields:{},valid:!0}},components:{el:_e.exports},created(){},props:["params","lang","dic"],mixins:[y],computed:{showTitle:()=>!1,elements(){return this.params.parameters.elements}},methods:{fieldChanged(e){this.$emit("changeField",e)}}};var we=(0,d.Z)(Ce,pe,[],!1,null,null,null);we.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/GroupBlock.vue";const De=we.exports;var ke=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group align-right"},[a("div",{staticClass:"flex__wrapper",class:{required:e.required}},[a("label",{attrs:{for:e.id}},[e._v(e._s(e.titleLabel))]),e._v(" "),a("date-picker",{attrs:{inputAttr:e.dateAttributes,inputClass:"form-control",type:"datetime","value-type":"format",format:"DD.MM.YYYY hh:mm"},model:{value:e.val,callback:function(t){e.val=t},expression:"val"}})],1),e._v(" "),e.hasErrorsForShow()?a("div",{staticClass:"help-block"},[e._v(e._s(e.errors.required.message))]):e._e(),e._v(" "),e.hasErrorsForShow()?e._e():a("div",{staticClass:"desc-block"},[e._v(e._s(e.descriptionLabel))])])};ke._withStripped=!0;var xe=a(170);a(644);const Fe={props:["lang"],components:{DatePicker:xe.default},data(){return{id:"id"+this.params.id,val:this.params.value?this.params.value:"",showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"}}}},computed:{dateAttributes(){return{id:this.id}}},mixins:[l,y],created(){this.$emit("changeField",this.getData()),x.Y.$on("showErrors",(()=>this.showErrors=!0)),x.Y.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{validate(){this.valid=!0,this.currentError=null,""==this.val&&this.required&&(this.currentError=this.errors.required,this.valid=!1)},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(e){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){return{id:this.id,data:{value:this.val},valid:this.valid}}}};var Se=(0,d.Z)(Fe,ke,[],!1,null,null,null);Se.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/DateTimeBlock.vue";const Ee=Se.exports;var $e=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group align-right"},[a("div",{staticClass:"flex__wrapper",class:{required:e.required}},[a("label",{attrs:{for:e.id}},[e._v(e._s(e.titleLabel))]),e._v(" "),a("date-picker",{attrs:{inputAttr:e.dateAttributes,inputClass:"form-control",type:"date","value-type":"format",format:"DD.MM.YYYY"},model:{value:e.val,callback:function(t){e.val=t},expression:"val"}})],1),e._v(" "),e.hasErrorsForShow()?a("div",{staticClass:"help-block"},[e._v(e._s(e.errors.required.message))]):e._e(),e._v(" "),e.hasErrorsForShow()?e._e():a("div",{staticClass:"desc-block"},[e._v(e._s(e.descriptionLabel))])])};$e._withStripped=!0;const Me={props:["lang"],components:{DatePicker:xe.default},data(){return{id:"id"+this.params.id,val:this.params.value?this.params.value:"",currentVal:this.params.value,showErrors:!1,valid:!0,errors:{required:{message:"Поле обязательно для заполнения"}}}},computed:{dateAttributes(){return{id:this.id}}},mixins:[l,y],created(){this.$emit("changeField",this.getData()),x.Y.$on("showErrors",(()=>this.showErrors=!0)),x.Y.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())}))},methods:{validate(){this.valid=!0,this.currentError=null,""==this.val&&this.required&&(this.currentError=this.errors.required,this.valid=!1)},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(e){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){return{id:this.id,data:{value:this.val},valid:this.valid}}}};var Te=(0,d.Z)(Me,$e,[],!1,null,null,null);Te.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/DateBlock.vue";const Pe=Te.exports;var Oe=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group align-right"},[a("div",{staticClass:"flex__wrapper",class:{required:e.required}},[a("p",[e._v(e._s(e.titleLabel))]),e._v(" "),a("div",{staticClass:"date-list__wrapper"},e._l(e.elements,(function(t,i){return a("div",{staticClass:"date-element"},[a("date-picker",{attrs:{inputAttr:e.dateAttributes(i),inputClass:"form-control",type:"date","value-type":"format",format:"DD.MM.YYYY"},model:{value:t.date,callback:function(a){e.$set(t,"date",a)},expression:"elem.date"}}),e._v(" "),a("div",{staticClass:"buttons__block"},[0==i?a("span",{staticClass:"btn",attrs:{title:"Добавить дату"},on:{click:function(t){return e.add()}}},[a("i",{staticClass:"fas fa-plus"})]):a("span",{staticClass:"btn",attrs:{title:"Удалить дату"},on:{click:function(t){return e.remove(i)}}},[a("i",{staticClass:"fas fa-minus"})])])],1)})),0)]),e._v(" "),e.hasErrorsForShow()?a("div",{staticClass:"help-block"},[e._v(e._s(e.errors.required.message))]):e._e(),e._v(" "),e.hasErrorsForShow()?e._e():a("div",{staticClass:"desc-block"},[e._v(e._s(e.descriptionLabel))])])};Oe._withStripped=!0;const Ne={props:["lang"],components:{DatePicker:xe.default},data(){return{id:"id"+this.params.id,elements:[],showErrors:!1,defaultDate:"01.01.2022",valid:!0,errors:{required:{message:"Поле обязательно для заполнения"}}}},computed:{val(){return this.elements.map((e=>e.date)).join(",")}},mixins:[l,y],created(){this.$emit("changeField",this.getData()),x.Y.$on("showErrors",(()=>this.showErrors=!0)),x.Y.$on("validate",(()=>{this.validate(),this.$emit("changeField",this.getData())})),this.params.value||(this.params.value=this.defaultDate),this.elements=this.params.value.split(",").map((e=>({date:e})))},methods:{add(){this.elements.push({date:this.defaultDate})},remove(e){this.elements.splice(e,1)},validate(){this.valid=!0,this.currentError=null,""==this.val&&this.required&&(this.currentError=this.errors.required,this.valid=!1)},dateAttributes(e){return{id:this.id+"_"+e}},hasErrorsForShow(){return!(!this.showErrors||!this.currentError)},onChange(e){this.showErrors=!1,this.$emit("changeField",this.getData())},getData(){return{id:this.id,data:{value:this.val},valid:this.valid}}}};var Ae=(0,d.Z)(Ne,Oe,[],!1,null,"3242c2a4",null);Ae.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/DateMultipleBlock.vue";const Ie=Ae.exports;var Ve=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"file-block"},[e.isFileExist?a("div",[a("div",{staticClass:"container file__wrapper"},[a("div",{staticClass:"file__title"},[a("span",[e._v(e._s(e.titleLabel))])]),e._v(" "),a("div",{staticClass:"row file__list"},[a("div",{staticClass:"col-11"},[a("a",{attrs:{href:e.fileUrl}},[e._v(e._s(e.fileName))])]),e._v(" "),a("div",{staticClass:"col-1"},[a("i",{staticClass:"fas fa-trash",on:{click:e.removeFile}})])])])]):a("div",{staticClass:"form-group"},[a("p",{staticClass:"d-flex flex-column"},[a("span",[e._v(e._s(e.titleLabel))])]),e._v(" "),e.isFileSelect?a("div",{staticClass:"input-group"},[a("input",{staticClass:"form-control",attrs:{type:"text",readonly:""},domProps:{value:e.selectedFile}}),e._v(" "),a("div",{staticClass:"input-group-append"},[a("div",{staticClass:"input-group-text",on:{click:e.cancelUpload}},[a("i",{staticClass:"fas fa-times"}),a("span",[e._v("Cancel")])])])]):a("div",{staticClass:"custom-file"},[a("input",{ref:e.id,staticClass:"custom-file-input",attrs:{id:e.id,type:"file",accept:e.mimeFilter},on:{change:e.onChange}}),e._v(" "),a("label",{staticClass:"custom-file-label input-group-text",attrs:{"data-browse":e.dic.fileAttach.browse,for:e.id}},[e._v("Select file")])])])])};Ve._withStripped=!0;const Le="hasFile",Ye={data(){return{id:"id"+this.params.id,val:null,isFileSelect:!1,selectedFile:""}},created(){this.$emit("changeField",this.getData())},computed:{isFileExist(){return this.params.file_exist},fileUrl(){return this.params.file_url},fileName(){return this.params.file_name},requestId(){return this.params.request_id},mimeFilter(){return this.params.file_types},total(){let e=0;return this.isComputed||this.isFileExist||this.isFileSelect?(e=+this.unitPrice,isNaN(e)?0:e):0}},props:["params","dic"],mixins:[y,_],methods:{onChange(e){this.val=e.target.files[0],this.selectedFile=this.val.name,this.isFileSelect=!0,this.$emit("changeField",this.getData())},cancelUpload(){this.val=null,this.selectedFile="",this.isFileSelect=!1,this.$emit("changeField",this.getData())},getData(){let e={id:this.params.id,file:this.val,valid:!0,data:{value:this.unitPrice},[Le]:!0};return this.isComputed&&(e.computed=!0,e.total=this.unitPrice),e},removeFile(){const e=new FormData;e.append("RemoveAttachmentForm[requestId]",this.requestId),e.append("RemoveAttachmentForm[fieldId]",this.params.id),r().post("/api/application/remove-attachment",e,{headers:{"Content-Type":"multipart/form-data"}}).then((e=>{this.params.file_exist=!1,this.$emit("changeField",this.getData())})).catch((e=>{console.log("FAILURE!!!"),console.log(e)}))}}};var je=(0,d.Z)(Ye,Ve,[],!1,null,"36b1b7c6",null);je.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/FileBlock.vue";const Re=je.exports;var Be=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group align-right"},[e._l(e.formElements,(function(t,i){return a("div",{staticClass:"container-fluid"},[a("div",{staticClass:"card card-default"},[a("div",{staticClass:"card-header"},[a("h3",{staticClass:"card-title"},[e._v(e._s(e.titleLabel)+" #"+e._s(i+1))]),e._v(" "),e.blocksCount>1?a("div",{staticClass:"card-tools"},[a("button",{staticClass:"btn btn-tool",attrs:{type:"button"},on:{click:function(t){return e.removeItem(i)}}},[a("i",{staticClass:"fas fa-times"})])]):e._e()]),e._v(" "),a("label",[e._v("Страна:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.country,expression:"item.country"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.country},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"country",a.target.value)}}}),e._v(" "),a("label",[e._v("Область:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.area,expression:"item.area"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.area},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"area",a.target.value)}}}),e._v(" "),a("label",[e._v("Город:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.city,expression:"item.city"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.city},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"city",a.target.value)}}}),e._v(" "),a("label",[e._v("Индекс:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.index,expression:"item.index"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.index},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"index",a.target.value)}}}),e._v(" "),a("label",[e._v("Адрес:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.address,expression:"item.address"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.address},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"address",a.target.value)}}})])])})),e._v(" "),a("button",{staticClass:"btn btn-primary",on:{click:e.addFormBlock}},[e._v("Добавить еще")])],2)};Be._withStripped=!0;const He={props:["params"],created(){this.params.hasOwnProperty("value")?this.formElements=this.params.value:this.params.hasOwnProperty("badge_info")?this.formElements.push({name:this.params.badge_info.name,middleName:this.params.badge_info.middle_name,surName:this.params.badge_info.surname,company:this.params.badge_info.company}):this.formElements.push({...this.defaultElement}),this.$emit("changeField",this.getData())},data(){return{id:"id"+this.params.id,valid:!0,defaultElement:{},formElements:[]}},computed:{total(){let e=0;return!this.isComputed||this.freeCount>=this.blocksCount?0:(e=(this.blocksCount-this.freeCount)*+this.unitPrice,isNaN(e)?0:e)},blocksCount(){return this.formElements.length},freeCount(){return this.params.parameters.freeCount}},methods:{addFormBlock(){this.formElements.push({...this.defaultElement}),this.$emit("changeField",this.getData())},removeItem(e){this.formElements.splice(e,1),this.$emit("changeField",this.getData())},onChange(e){this.$emit("changeField",this.getData())},getData(){let e={id:this.id,data:{value:this.formElements},valid:this.valid};return this.isComputed&&(e.computed=!0,e.total=this.total),e}}},qe={data:()=>({defaultElement:{country:"",area:"",areaEng:"",city:"",cityEng:"",index:"",address:""}}),mixins:[y,_,He]};var Ue=(0,d.Z)(qe,Be,[],!1,null,null,null);Ue.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/AddressBlock.vue";const We=Ue.exports;var ze=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group align-right"},[e._l(e.formElements,(function(t,i){return a("div",{staticClass:"container-fluid"},[a("div",{staticClass:"card card-default"},[a("div",{staticClass:"card-header"},[a("h3",{staticClass:"card-title"},[e._v(e._s(e.titleLabel)+" #"+e._s(i+1))]),e._v(" "),e.blocksCount>1?a("div",{staticClass:"card-tools"},[a("button",{staticClass:"btn btn-tool",attrs:{type:"button"},on:{click:function(t){return e.removeItem(i)}}},[a("i",{staticClass:"fas fa-times"})])]):e._e()]),e._v(" "),a("label",[e._v("Имя:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.name,expression:"item.name"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.name},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"name",a.target.value)}}}),e._v(" "),a("label",[e._v("Отчество:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.middleName,expression:"item.middleName"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.middleName},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"middleName",a.target.value)}}}),e._v(" "),a("label",[e._v("Фамилия:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.surName,expression:"item.surName"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.surName},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"surName",a.target.value)}}}),e._v(" "),a("label",[e._v("Компания:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.company,expression:"item.company"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.company},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"company",a.target.value)}}})])])})),e._v(" "),a("button",{staticClass:"btn btn-primary",on:{click:e.addFormBlock}},[e._v("Добавить еще")])],2)};ze._withStripped=!0;const Ze={data:()=>({defaultElement:{name:"",middleName:"",surName:"",company:""}}),mixins:[y,_,He]};var Je=(0,d.Z)(Ze,ze,[],!1,null,null,null);Je.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/BadgeBlock.vue";const Xe=Je.exports;var Ge=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"form-group align-right"},[e._l(e.formElements,(function(t,i){return a("div",{staticClass:"container-fluid"},[a("div",{staticClass:"card card-default"},[a("div",{staticClass:"card-header"},[a("h3",{staticClass:"card-title"},[e._v(e._s(e.titleLabel)+" #"+e._s(i+1))]),e._v(" "),e.blocksCount>1?a("div",{staticClass:"card-tools"},[a("button",{staticClass:"btn btn-tool",attrs:{type:"button"},on:{click:function(t){return e.removeItem(i)}}},[a("i",{staticClass:"fas fa-times"})])]):e._e()]),e._v(" "),a("label",[e._v("Сайт:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.site,expression:"item.site"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.site},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"site",a.target.value)}}}),e._v(" "),a("label",[e._v("E-mail:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.email,expression:"item.email"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.email},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"email",a.target.value)}}}),e._v(" "),a("label",[e._v("Телефон:")]),e._v(" "),a("input",{directives:[{name:"model",rawName:"v-model",value:t.phone,expression:"item.phone"}],staticClass:"form-control",attrs:{type:"text",placeholder:""},domProps:{value:t.phone},on:{change:function(t){return e.onChange(t)},input:function(a){a.target.composing||e.$set(t,"phone",a.target.value)}}})])])})),e._v(" "),a("button",{staticClass:"btn btn-primary",on:{click:e.addFormBlock}},[e._v("Добавить еще")])],2)};Ge._withStripped=!0;const Ke={data:()=>({defaultElement:{site:"",email:"",phone:""}}),mixins:[y,_,He]};var Qe=(0,d.Z)(Ke,Ge,[],!1,null,null,null);Qe.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/InformationForm.vue";const et=Qe.exports;var tt=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"block__rubricator"},[a("div",{staticClass:"main",on:{click:function(t){e.isActive=!e.isActive}}},[a("span",{class:{active:e.isActive}},[a("i",{staticClass:"fa fa-chevron-down",attrs:{"aria-hidden":"true"}}),e._v(e._s(e.titleLabel))])]),e._v(" "),e._l(e.rubrics[0].children,(function(t){return[a("ul",{staticClass:"wtree"},[a("rubricator-element",{directives:[{name:"show",rawName:"v-show",value:e.isActive,expression:"isActive"}],attrs:{rubricsInCatalog:e.selected,rubrics:t}})],1)]})),e._v(" "),a("div",{staticClass:"card"},[e._m(0),e._v(" "),a("div",{staticClass:"card-body table-responsive p-0"},[a("table",{staticClass:"table table-hover text-nowrap"},[e._m(1),e._v(" "),a("tbody",e._l(e.selected,(function(t,i){return a("tr",[a("td",[e._v(e._s(i+1))]),e._v(" "),a("td",[e._v(e._s(t.name))]),e._v(" "),a("td",[a("i",{staticClass:"far fa-times-circle",on:{click:function(t){return e.removeRubric(i)}}})])])})),0)])])])],2)};tt._withStripped=!0;const at={data(){return{id:"id"+this.params.id,loaded:!1,rubrics:[[]],isActive:!1,valid:!0,selected:[]}},props:["params"],mixins:[_,y],components:{RubricatorElement:a(730).Z},created(){this.params.hasOwnProperty("value")&&(this.selected=this.params.value,this.getData()),this.$emit("changeField",this.getData()),fetch("/api/rubricator/get-list").then((e=>{e.json().then((e=>{console.log(e),this.loaded=!0,this.rubrics=e,x.Y.$on("rubricWasAdded",(e=>{this.selected.push(e),this.$emit("changeField",this.getData())})),x.Y.$on("rubricWasDelete",(e=>{let t=this.selected.findIndex((t=>t.id==e));t>=0&&this.removeRubric(t)}))}))}))},computed:{rubricsCount(){return this.selected.length},freeCount(){return this.params.parameters.freeCount},total(){let e=0;return!this.isComputed||this.freeCount>=this.rubricsCount?0:(e=(this.rubricsCount-this.freeCount)*+this.unitPrice,isNaN(e)?0:e)}},methods:{removeRubric(e){this.selected.splice(e,1),this.$emit("changeField",this.getData())},getData(){let e={id:this.id,data:{value:this.selected},valid:this.valid};return this.isComputed&&(e.computed=!0,e.total=this.total),e}}};var it=(0,d.Z)(at,tt,[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"card-header"},[a("h3",{staticClass:"card-title"},[e._v("Выбранные рубрики")])])},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("thead",[a("tr",[a("th",{attrs:{width:"40"}},[e._v("#")]),e._v(" "),a("th",[e._v("Рубрика")]),e._v(" "),a("th",{attrs:{width:"20"}})])])}],!1,null,null,null);it.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/RubricatorBlock.vue";const st={props:["unitData","lang","dic"],components:{important:p,"important-information":be,"header-blck":g,"text-input":E,"number-input":N,"check-number-input":L,checkbox:D,"select-input":q,"multi-select-input":K,radio:re,equipment:he,frieze:Z,group:De,"date-multiple":Ie,"date-time":Ee,date:Pe,file:Re,"address-block":We,badge:Xe,"information-form":et,rubricator:it.exports,undefined:te},data:()=>({typesList:{blockCheckbox:1,blockSelect:2,blockMultiSelect:3,blockDate:4,blockDateMultiple:5,blockRadio:6,blockNumberInput:7,blockCheckNumber:8,blockTextInput:9,blockFile:10,blockImportantInformation:12,blockImportant:13,blockHeader:14,blockEquipment:15,blockGroup:16,blockFrieze:17,blockDateTime:18,blockInformationForm:20,blockRubricator:21,blockBadge:22,blockAddress:23}}),methods:{fieldChanged(e){this.$emit("modification",e)}},computed:{currentElement(){switch(parseInt(this.unitData.element_type_id)){case this.typesList.blockSelect:return"select-input";case this.typesList.blockRadio:return"radio";case this.typesList.blockMultiSelect:return"multi-select-input";case this.typesList.blockCheckbox:return"checkbox";case this.typesList.blockNumberInput:return"number-input";case this.typesList.blockTextInput:return"text-input";case this.typesList.blockCheckNumber:return"check-number-input";case this.typesList.blockImportant:return"important";case this.typesList.blockHeader:return"header-blck";case this.typesList.blockImportantInformation:return"important-information";case this.typesList.blockEquipment:return"equipment";case this.typesList.blockFrieze:return"frieze";case this.typesList.blockDateTime:return"date-time";case this.typesList.blockDate:return"date";case this.typesList.blockDateMultiple:return"date-multiple";case this.typesList.blockGroup:return"group";case this.typesList.blockFile:return"file";case this.typesList.blockAddress:return"address-block";case this.typesList.blockInformationForm:return"information-form";case this.typesList.blockBadge:return"badge";case this.typesList.blockRubricator:return"rubricator";default:return"undefined"}}}};var rt=(0,d.Z)(st,n,[],!1,null,null,null);rt.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Element.vue";const nt=rt.exports;var ot=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"group-block"},[a("h3",[e._v(e._s(e.title))]),e._v(" "),e._l(e.fields,(function(t){return[a("el",{attrs:{lang:e.lang,unitData:t,dic:e.dic},on:{modification:e.fieldChanged}})]}))],2)};ot._withStripped=!0;const lt={components:{el:nt},props:["fields","title","lang","dic"],methods:{fieldChanged(e){this.$emit("modification",e)}}};var ct=(0,d.Z)(lt,ot,[],!1,null,null,null);ct.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Group.vue";const ut=ct.exports;var dt=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"proposal-summary"},[a("div",{staticClass:"proposal-summary__title"},[e._v(e._s(e.dic.total.totalHead)+":")]),e._v(" "),a("div",{staticClass:"proposal-summary__total"},[e._v("\r\n        "+e._s(e.dic.total.totalMsg)+": "+e._s(e._f("separate")(e.total))+" "+e._s(e.dic.valute)+"\r\n    ")]),e._v(" "),a("hr")])};dt._withStripped=!0;const ht={mixins:[T],props:["total","dic"],data:()=>({})};var pt=(0,d.Z)(ht,dt,[],!1,null,null,null);pt.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/ComputedEl.vue";const mt={components:{el:nt,group:ut,computed:pt.exports},props:["isReadOnly","contractId"],data:()=>({title:"",attachedFile:"",elements:[],fileFields:[],files:{},standNumber:null,standSquare:null,hall:null,draft:!1,fields:{},formData:new FormData,formId:null,isComputed:!1,userId:null,companyId:null,basePrice:0,isFileUpload:!1,totalPrice:0,addedFile:!1,showLimitSizeOfFileMsg:!1,language:c,dict:{fileAttach:{},buttons:{},contractInfo:{}}}),created:function(){r().get("/api/application/get-form?contractId="+this.contractId).then((e=>{this.title=e.data.title,this.elements=e.data.elements,this.isComputed=e.data.computed,this.userId=e.data.userId,this.standNumber=e.data.standNumber,this.standSquare=e.data.standSquare,this.hall=e.data.hall,this.attachedFile=e.data.attachedFile,this.companyId=e.data.companyId,this.basePrice=e.data.basePrice,this.totalPrice=this.basePrice,this.formId=e.data.formId,this.isFileUpload=e.data.isFileUpload,this.language=e.data.language,this.dict=e.data.dict}))},computed:{hasFile(){return!(""==this.attachedFile)}},methods:{getFieldName(e,t){return this.language!=c&&t?t:e},fileLoad:function(e){this.showLimitSizeOfFileMsg=!1,e.target.files[0].size>20971520?this.showLimitSizeOfFileMsg=!0:(this.formData.append("DynamicForm[attached][formFile]",this.$refs.userFile.files[0]),this.addedFile="",this.showLimitSizeOfFileMsg=!1)},saveDraft:function(){this.draft=!0,this.formSubmit()},isFormValid(){let e=!0;for(let t in this.fields)this.fields[t].valid||(e=!1);return e},fieldsModificate(e){let t=!1,a=0;if(e.hasOwnProperty(Le)){if(!e.file)return;this.files[e.id]=e.file}e.hasOwnProperty("computed")&&(t=!0,a=e.total),this.fields[e.id]={data:e.data,valid:e.valid,computed:t,total:a,checkbox:!!e.hasOwnProperty("checkbox"),equip:!!e.hasOwnProperty("equip")},this.isComputed&&this.calculatePrice(this.fields)},calculatePrice(e){let t=this.basePrice;for(let a in this.fields){let i=e[a];i.computed&&(t+=i.total)}this.totalPrice=t},formSubmit(){if(x.Y.validate(),!this.isFormValid())return x.Y.showErrors(),void console.log("Форма не валидна");console.log("Форма отправлена"),this.formData.append("DynamicForm[fields]",JSON.stringify(this.fields)),this.formData.append("DynamicForm[userId]",+this.userId),this.formData.append("DynamicForm[formId]",+this.formId),this.formData.append("DynamicForm[draft]",+this.draft),this.formData.append("DynamicForm[total]",this.totalPrice),this.formData.append("DynamicForm[basePrice]",this.basePrice),this.formData.append("DynamicForm[contractId]",this.contractId),this.formData.append("DynamicForm[companyId]",this.companyId),console.log(this.files);for(const e in this.files)this.formData.append(`AttachedFilesForm[files][${e}]`,this.files[e]),this.fileFields.push(e),console.log(this.files[e]);this.formData.append("AttachedFilesForm[fileFields]",this.fileFields),r().post("/api/application/send-form",this.formData,{headers:{"Content-Type":"multipart/form-data"}}).then((function(e){location.href="/panel/member/"+e.data.exhibitionId+"/requests/"+e.data.contractId})).catch((function(){console.log("FAILURE!!")}))},cancel(){window.history.back()},close(){window.location.href="/panel/forms"}}};var ft=(0,d.Z)(mt,i,[],!1,null,"af35e5b2",null);ft.options.__file="assets/scripts/components/vue/DynamicForm/DynamicFormApp.vue";const vt=ft.exports,gt=window.Vue,bt=document.getElementById("dynamic-form-app"),yt=!!bt.dataset.readOnly,_t=parseInt(bt.dataset.contractId);console.log("read only="+yt),new gt({el:"#dynamic-form-app",render:e=>e(vt,{props:{isReadOnly:yt,contractId:_t}})})},730:(e,t,a)=>{"use strict";a.d(t,{Z:()=>o});var i=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("li",[a("span",{class:{rubric__checked:e.isChecked},on:{click:function(t){e.isActive=!e.isActive}}},[a("i",{directives:[{name:"show",rawName:"v-show",value:e.hasChildren,expression:"hasChildren"}],staticClass:"fa fa-chevron-down",attrs:{"aria-hidden":"true"}}),e._v(e._s(e.name)+"\n        "),e.isChecked?a("i",{directives:[{name:"show",rawName:"v-show",value:!e.hasChildren,expression:"!hasChildren"}],staticClass:"remove-item far fa-minus-square",attrs:{title:"Удалить раздел"},on:{click:e.removeRubric}}):a("i",{directives:[{name:"show",rawName:"v-show",value:!e.hasChildren,expression:"!hasChildren"}],staticClass:"add-item far fa-plus-square",attrs:{title:"Добавить раздел"},on:{click:e.addRubric}})]),e._v(" "),e.hasChildren?a("ul",{directives:[{name:"show",rawName:"v-show",value:e.isActive,expression:"isActive"}]},[e._l(e.rubrics.children,(function(t){return[a("rubricator-element",{attrs:{rubricsInCatalog:e.rubricsInCatalog,rubrics:t}})]}))],2):e._e()])};i._withStripped=!0;var s=a(831);const r={name:"RubricatorElement",data:()=>({isActive:!1}),props:["rubrics","rubricsInCatalog"],beforeCreate:function(){this.$options.components.RubricatorElement=a(730).Z},computed:{id(){return this.rubrics.id},name(){return this.rubrics.name},hasChildren(){return this.rubrics.children.length>0},isChecked(){if(this.hasChildren)return!1;let e=this.rubricsInCatalog.find((e=>(console.log(e.id,this.id),e.id==this.id)));return console.log(e),!!e}},methods:{addRubric(){let e={id:this.id,name:this.name};s.Y.$emit("rubricWasAdded",e)},removeRubric(){s.Y.$emit("rubricWasDelete",this.id)}}};var n=(0,a(900).Z)(r,i,[],!1,null,"5a22984a",null);n.options.__file="assets/scripts/components/vue/DynamicForm/FormElements/Units/Components/RubricatorElement.vue";const o=n.exports},900:(e,t,a)=>{"use strict";function i(e,t,a,i,s,r,n,o){var l,c="function"==typeof e?e.options:e;if(t&&(c.render=t,c.staticRenderFns=a,c._compiled=!0),i&&(c.functional=!0),r&&(c._scopeId="data-v-"+r),n?(l=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),s&&s.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(n)},c._ssrRegister=l):s&&(l=o?function(){s.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:s),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(e,t){return l.call(t),u(e,t)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:e,options:c}}a.d(t,{Z:()=>i})},170:(e,t,a)=>{"use strict";function i(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function s(e){return i(e)?new Date(e.getTime()):null==e?new Date(NaN):new Date(e)}function r(e){return i(e)&&!isNaN(e.getTime())}function n(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;if(!(t>=0&&t<=6))throw new RangeError("weekStartsOn must be between 0 and 6");var a=s(e),i=a.getDay(),r=(i+7-t)%7;return a.setDate(a.getDate()-r),a.setHours(0,0,0,0),a}function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.firstDayOfWeek,i=void 0===a?0:a,r=t.firstWeekContainsDate,o=void 0===r?1:r;if(!(o>=1&&o<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7");for(var l=s(e),c=l.getFullYear(),u=new Date(0),d=c+1;d>=c-1&&(u.setFullYear(d,0,o),u.setHours(0,0,0,0),u=n(u,i),!(l.getTime()>=u.getTime()));d--);return u}function l(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=t.firstDayOfWeek,i=void 0===a?0:a,r=t.firstWeekContainsDate,l=void 0===r?1:r,c=s(e),u=n(c,i),d=o(c,{firstDayOfWeek:i,firstWeekContainsDate:l}),h=u.getTime()-d.getTime();return Math.round(h/6048e5)+1}a.r(t),a.d(t,{default:()=>Je});const c={months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],weekdaysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],firstDayOfWeek:0,firstWeekContainsDate:1};var u=/\[([^\]]+)]|YYYY|YY?|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|m{1,2}|s{1,2}|Z{1,2}|S{1,3}|w{1,2}|x|X|a|A/g;function d(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2,a="".concat(Math.abs(e)),i=e<0?"-":"";a.length<t;)a="0".concat(a);return i+a}function h(e){return 15*Math.round(e.getTimezoneOffset()/15)}function p(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",a=e>0?"-":"+",i=Math.abs(e),s=Math.floor(i/60),r=i%60;return a+d(s,2)+t+d(r,2)}var m=function(e,t,a){var i=e<12?"AM":"PM";return a?i.toLocaleLowerCase():i},f={Y:function(e){var t=e.getFullYear();return t<=9999?"".concat(t):"+".concat(t)},YY:function(e){return d(e.getFullYear(),4).substr(2)},YYYY:function(e){return d(e.getFullYear(),4)},M:function(e){return e.getMonth()+1},MM:function(e){return d(e.getMonth()+1,2)},MMM:function(e,t){return t.monthsShort[e.getMonth()]},MMMM:function(e,t){return t.months[e.getMonth()]},D:function(e){return e.getDate()},DD:function(e){return d(e.getDate(),2)},H:function(e){return e.getHours()},HH:function(e){return d(e.getHours(),2)},h:function(e){var t=e.getHours();return 0===t?12:t>12?t%12:t},hh:function(){var e=f.h.apply(f,arguments);return d(e,2)},m:function(e){return e.getMinutes()},mm:function(e){return d(e.getMinutes(),2)},s:function(e){return e.getSeconds()},ss:function(e){return d(e.getSeconds(),2)},S:function(e){return Math.floor(e.getMilliseconds()/100)},SS:function(e){return d(Math.floor(e.getMilliseconds()/10),2)},SSS:function(e){return d(e.getMilliseconds(),3)},d:function(e){return e.getDay()},dd:function(e,t){return t.weekdaysMin[e.getDay()]},ddd:function(e,t){return t.weekdaysShort[e.getDay()]},dddd:function(e,t){return t.weekdays[e.getDay()]},A:function(e,t){return(t.meridiem||m)(e.getHours(),e.getMinutes(),!1)},a:function(e,t){return(t.meridiem||m)(e.getHours(),e.getMinutes(),!0)},Z:function(e){return p(h(e),":")},ZZ:function(e){return p(h(e))},X:function(e){return Math.floor(e.getTime()/1e3)},x:function(e){return e.getTime()},w:function(e,t){return l(e,{firstDayOfWeek:t.firstDayOfWeek,firstWeekContainsDate:t.firstWeekContainsDate})},ww:function(e,t){return d(f.w(e,t),2)}};function v(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=t?String(t):"YYYY-MM-DDTHH:mm:ss.SSSZ",n=s(e);if(!r(n))return"Invalid Date";var o=a.locale||c;return i.replace(u,(function(e,t){return t||("function"==typeof f[e]?"".concat(f[e](n,o)):e)}))}function g(e){return function(e){if(Array.isArray(e)){for(var t=0,a=new Array(e.length);t<e.length;t++)a[t]=e[t];return a}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function y(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(a,!0).forEach((function(t){_(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(a).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function _(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}var C=/(\[[^\[]*\])|(MM?M?M?|Do|DD?|ddd?d?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|S{1,3}|x|X|ZZ?|.)/g,w=/\d/,D=/\d\d/,k=/\d\d?/,x=/[+-]?\d+/,F="year",S="month",E="hour",$="minute",M="second",T="millisecond",P={},O=function(e,t,a){var i,s=Array.isArray(e)?e:[e];i="string"==typeof a?function(e){var t=parseInt(e,10);return _({},a,t)}:a,s.forEach((function(e){P[e]=[t,i]}))},N=function(e){return e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&")},A=function(e){return function(t){var a=t[e];if(!Array.isArray(a))throw new Error("Locale[".concat(e,"] need an array"));return new RegExp(a.map(N).join("|"))}},I=function(e,t){return function(a,i){var s=i[e];if(!Array.isArray(s))throw new Error("Locale[".concat(e,"] need an array"));var r=s.indexOf(a);if(r<0)throw new Error("Invalid Word");return _({},t,r)}};function V(e,t){if(void 0!==e&&void 0!==t)if(t){if(e<12)return e+12}else if(12===e)return 0;return e}function L(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Date,a=[0,0,1,0,0,0,0],i=[t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()],s=!0,r=0;r<7;r++)void 0===e[r]?a[r]=s?i[r]:a[r]:(a[r]=e[r],s=!1);return a}function Y(e,t,a,i,s,r,n){var o;return e<100&&e>=0?(o=new Date(e+400,t,a,i,s,r,n),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,a,i,s,r,n),o}function j(){for(var e,t=arguments.length,a=new Array(t),i=0;i<t;i++)a[i]=arguments[i];var s=a[0];return s<100&&s>=0?(a[0]+=400,e=new Date(Date.UTC.apply(Date,a)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(s)):e=new Date(Date.UTC.apply(Date,a)),e}function R(e,t,a){var i=t.match(C);if(!i)throw new Error;for(var s=i.length,r={},n=0;n<s;n+=1){var o=i[n],l=P[o];if(l){var c="function"==typeof l[0]?l[0](a):l[0],u=l[1],d=(c.exec(e)||[])[0];r=y({},r,{},u(d,a)),e=e.replace(d,"")}else{var h=o.replace(/^\[|\]$/g,"");if(0!==e.indexOf(h))throw new Error("not match");e=e.substr(h.length)}}return r}function B(e){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function H(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function q(){return(q=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var i in a)Object.prototype.hasOwnProperty.call(a,i)&&(e[i]=a[i])}return e}).apply(this,arguments)}function U(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function W(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?U(Object(a),!0).forEach((function(t){H(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):U(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function z(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var a=[],i=!0,s=!1,r=void 0;try{for(var n,o=e[Symbol.iterator]();!(i=(n=o.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==o.return||o.return()}finally{if(s)throw r}}return a}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Z(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(a):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Z(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,i=new Array(t);a<t;a++)i[a]=e[a];return i}function J(){return(J=Object.assign||function(e){for(var t,a=1;a<arguments.length;a++)for(var i in t=arguments[a])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)}O("Y",x,F),O("YY",D,(function(e){var t=(new Date).getFullYear(),a=Math.floor(t/100),i=parseInt(e,10);return _({},F,i=100*(i>68?a-1:a)+i)})),O("YYYY",/\d{4}/,F),O("M",k,(function(e){return _({},S,parseInt(e,10)-1)})),O("MM",D,(function(e){return _({},S,parseInt(e,10)-1)})),O("MMM",A("monthsShort"),I("monthsShort",S)),O("MMMM",A("months"),I("months",S)),O("D",k,"day"),O("DD",D,"day"),O(["H","h"],k,E),O(["HH","hh"],D,E),O("m",k,$),O("mm",D,$),O("s",k,M),O("ss",D,M),O("S",w,(function(e){return _({},T,100*parseInt(e,10))})),O("SS",D,(function(e){return _({},T,10*parseInt(e,10))})),O("SSS",/\d{3}/,T),O(["A","a"],(function(e){return e.meridiemParse||/[ap]\.?m?\.?/i}),(function(e,t){return{isPM:"function"==typeof t.isPM?t.isPM(e):function(e){return"p"==="".concat(e).toLowerCase().charAt(0)}(e)}})),O(["Z","ZZ"],/[+-]\d\d:?\d\d/,(function(e){return{offset:(i=e,t=i.match(/([+-]|\d\d)/g)||["-","0","0"],a=3,s=function(e){if(Array.isArray(e))return e}(t)||function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var a=[],i=!0,s=!1,r=void 0;try{for(var n,o=e[Symbol.iterator]();!(i=(n=o.next()).done)&&(a.push(n.value),!t||a.length!==t);i=!0);}catch(e){s=!0,r=e}finally{try{i||null==o.return||o.return()}finally{if(s)throw r}}return a}}(t,a)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}(),r=s[0],n=s[1],o=s[2],l=60*parseInt(n,10)+parseInt(o,10),0===l?0:"+"===r?-l:+l)};var t,a,i,s,r,n,o,l})),O("x",x,(function(e){return{date:new Date(parseInt(e,10))}})),O("X",/[+-]?\d+(\.\d{1,3})?/,(function(e){return{date:new Date(1e3*parseFloat(e))}})),O("d",w,"weekday"),O("dd",A("weekdaysMin"),I("weekdaysMin","weekday")),O("ddd",A("weekdaysShort"),I("weekdaysShort","weekday")),O("dddd",A("weekdays"),I("weekdays","weekday")),O("w",k,"week"),O("ww",D,"week");var X=["attrs","props","domProps"],G=["class","style","directives"],K=["on","nativeOn"],Q=function(e,t){return function(){e&&e.apply(this,arguments),t&&t.apply(this,arguments)}},ee=function(e){return e.reduce((function(e,t){for(var a in t)if(e[a])if(-1!==X.indexOf(a))e[a]=J({},e[a],t[a]);else if(-1!==G.indexOf(a)){var i=e[a]instanceof Array?e[a]:[e[a]],s=t[a]instanceof Array?t[a]:[t[a]];e[a]=i.concat(s)}else if(-1!==K.indexOf(a))for(var r in t[a])if(e[a][r]){var n=e[a][r]instanceof Array?e[a][r]:[e[a][r]],o=t[a][r]instanceof Array?t[a][r]:[t[a][r]];e[a][r]=n.concat(o)}else e[a][r]=t[a][r];else if("hook"==a)for(var l in t[a])e[a][l]=e[a][l]?Q(e[a][l],t[a][l]):t[a][l];else e[a]=t[a];else e[a]=t[a];return e}),{})};function te(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,n=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,o=new Date(e,t,a,i,s,r,n);return e<100&&e>=0&&o.setFullYear(e),o}function ae(e){return e instanceof Date&&!isNaN(e)}function ie(e){return Array.isArray(e)&&2===e.length&&e.every(ae)&&e[0]<=e[1]}function se(e){var t=new Date(e);if(ae(t))return t;for(var a=arguments.length,i=new Array(a>1?a-1:0),s=1;s<a;s++)i[s-1]=arguments[s];return i.length?se.apply(void 0,i):new Date}function re(e){var t=new Date(e);return t.setMonth(0,1),t.setHours(0,0,0,0),t}function ne(e){var t=new Date(e);return t.setDate(1),t.setHours(0,0,0,0),t}function oe(e){var t=new Date(e);return t.setHours(0,0,0,0),t}function le(e,t){var a=new Date(e),i="function"==typeof t?t(a.getMonth()):Number(t),s=te(a.getFullYear(),i+1,0).getDate(),r=a.getDate();return a.setMonth(i,Math.min(r,s)),a}function ce(e,t){var a=new Date(e),i="function"==typeof t?t(a.getFullYear()):t;return a.setFullYear(i),a}function ue(e,t){var a=new Date(e),i=new Date(t);return a.setHours(i.getHours(),i.getMinutes(),i.getSeconds()),a}function de(e,t){if(!Array.isArray(e))return[];var a=[],i=e.length,s=0;for(t=t||i;s<i;)a.push(e.slice(s,s+=t));return a}function he(e){return"[object Object]"===Object.prototype.toString.call(e)}function pe(e,t){if(!he(e))return{};Array.isArray(t)||(t=[t]);var a={};return t.forEach((function(t){t in e&&(a[t]=e[t])})),a}function me(e,t){if(!he(e))return{};var a=e;return he(t)&&Object.keys(t).forEach((function(i){var s=t[i];he(s)&&he(e[i])&&(s=me(e[i],s)),a=W({},a,H({},i,s))})),a}var fe,ve,ge={formatLocale:(ve=(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;t.default={months:["January","February","March","April","May","June","July","August","September","October","November","December"],monthsShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],weekdays:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],weekdaysShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],weekdaysMin:["Su","Mo","Tu","We","Th","Fr","Sa"],firstDayOfWeek:0,firstWeekContainsDate:1},e.exports=t.default}(fe={exports:{}},fe.exports),fe.exports))&&ve.__esModule&&Object.prototype.hasOwnProperty.call(ve,"default")?ve.default:ve,yearFormat:"YYYY",monthFormat:"MMM",monthBeforeYear:!0},be="en",ye={};function _e(e,t,a){if("string"!=typeof e)return ye[be];var i=be;return ye[e]&&(i=e),t&&(ye[e]=t,i=e),a||(be=i),ye[e]||ye[be]}function Ce(e){return _e(e,null,!0)}function we(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document.body;if(!e||e===t)return null;var a=function(e,t){return getComputedStyle(e,null).getPropertyValue(t)},i=/(auto|scroll)/,s=i.test(a(e,"overflow")+a(e,"overflow-y")+a(e,"overflow-x"));return s?e:we(e.parentNode,t)}function De(e,t,a,i,s,r,n,o,l,c){"boolean"!=typeof n&&(l=o,o=n,n=!1);var u,d="function"==typeof a?a.options:a;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,s&&(d.functional=!0)),i&&(d._scopeId=i),r?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),t&&t.call(this,l(e)),e&&e._registeredComponents&&e._registeredComponents.add(r)},d._ssrRegister=u):t&&(u=n?function(e){t.call(this,c(e,this.$root.$options.shadowRoot))}:function(e){t.call(this,o(e))}),u)if(d.functional){var h=d.render;d.render=function(e,t){return u.call(t),h(e,t)}}else{var p=d.beforeCreate;d.beforeCreate=p?[].concat(p,u):[u]}return a}ye[be]=ge;var ke,xe=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("transition",{attrs:{name:e.prefixClass+"-zoom-in-down"}},[e.visible?a("div",{class:e.prefixClass+"-datepicker-main "+e.prefixClass+"-datepicker-popup",style:{top:e.top,left:e.left,position:"absolute"}},[e._t("default")],2):e._e()])},staticRenderFns:[]},void 0,{name:"Popup",inject:{prefixClass:{default:"mx"}},props:{visible:{type:Boolean,default:!1},appendToBody:{type:Boolean,default:!0}},data:function(){return{top:"",left:""}},watch:{visible:{immediate:!0,handler:function(e){var t=this;this.$nextTick((function(){e&&t.displayPopup()}))}}},mounted:function(){var e=this;this.appendToBody&&document.body.appendChild(this.$el),this._clickoutEvent="ontouchend"in document?"touchstart":"mousedown",document.addEventListener(this._clickoutEvent,this.handleClickOutside);var t,a,i=this.$parent.$el;this._displayPopup=(t=function(){return e.displayPopup()},a=!1,function(){for(var e=this,i=arguments.length,s=new Array(i),r=0;r<i;r++)s[r]=arguments[r];a||(a=!0,requestAnimationFrame((function(){a=!1,t.apply(e,s)})))}),this._scrollParent=we(i)||window,this._scrollParent.addEventListener("scroll",this._displayPopup),window.addEventListener("resize",this._displayPopup)},beforeDestroy:function(){this.appendToBody&&this.$el.parentNode&&this.$el.parentNode.removeChild(this.$el),document.removeEventListener(this._clickoutEvent,this.handleClickOutside),this._scrollParent.removeEventListener("scroll",this._displayPopup),window.removeEventListener("resize",this._displayPopup)},methods:{handleClickOutside:function(e){if(this.visible){var t=e.target,a=this.$el;a&&!a.contains(t)&&this.$emit("clickoutside",e)}},displayPopup:function(){if(this.visible){var e=this.$el,t=this.$parent.$el,a=this.appendToBody;this._popupRect||(this._popupRect=function(e){var t=e.style.display,a=e.style.visibility;e.style.display="block",e.style.visibility="hidden";var i=window.getComputedStyle(e),s=e.offsetWidth+parseInt(i.marginLeft,10)+parseInt(i.marginRight,10),r=e.offsetHeight+parseInt(i.marginTop,10)+parseInt(i.marginBottom,10);return e.style.display=t,e.style.visibility=a,{width:s,height:r}}(e));var i=this._popupRect,s=function(e,t,a,i){var s,r,n=0,o=0,l=e.getBoundingClientRect(),c=document.documentElement.clientWidth,u=document.documentElement.clientHeight;return i&&(n=window.pageXOffset+l.left,o=window.pageYOffset+l.top),s=c-l.left<t&&l.right<t?n-l.left+1:l.left+l.width/2<=c/2?n:n+l.width-t,r=l.top<=a&&u-l.bottom<=a?o+u-l.top-a:l.top+l.height/2<=u/2?o+l.height:o-a,{left:"".concat(s,"px"),top:"".concat(r,"px")}}(t,i.width,i.height,a),r=s.left,n=s.top;this.left=r,this.top=n}}}},void 0,!1,void 0,!1,void 0,void 0,void 0),Fe=De({render:function(){var e=this.$createElement,t=this._self._c||e;return t("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",width:"1em",height:"1em"}},[t("path",{attrs:{d:"M940.218182 107.054545h-209.454546V46.545455h-65.163636v60.50909H363.054545V46.545455H297.890909v60.50909H83.781818c-18.618182 0-32.581818 13.963636-32.581818 32.581819v805.236363c0 18.618182 13.963636 32.581818 32.581818 32.581818h861.090909c18.618182 0 32.581818-13.963636 32.581818-32.581818V139.636364c-4.654545-18.618182-18.618182-32.581818-37.236363-32.581819zM297.890909 172.218182V232.727273h65.163636V172.218182h307.2V232.727273h65.163637V172.218182h176.872727v204.8H116.363636V172.218182h181.527273zM116.363636 912.290909V442.181818h795.927273v470.109091H116.363636z"}})])},staticRenderFns:[]},void 0,{},void 0,!1,void 0,!1,void 0,void 0,void 0),Se=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 24 24",width:"1em",height:"1em"}},[a("path",{attrs:{d:"M0 0h24v24H0z",fill:"none"}}),e._v(" "),a("path",{attrs:{d:"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"}}),e._v(" "),a("path",{attrs:{d:"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"}})])},staticRenderFns:[]},void 0,{},void 0,!1,void 0,!1,void 0,void 0,void 0),Ee=De({render:function(){var e=this.$createElement,t=this._self._c||e;return t("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 1024 1024",width:"1em",height:"1em"}},[t("path",{attrs:{d:"M810.005333 274.005333l-237.994667 237.994667 237.994667 237.994667-60.010667 60.010667-237.994667-237.994667-237.994667 237.994667-60.010667-60.010667 237.994667-237.994667-237.994667-237.994667 60.010667-60.010667 237.994667 237.994667 237.994667-237.994667z"}})])},staticRenderFns:[]},void 0,{},void 0,!1,void 0,!1,void 0,void 0,void 0),$e=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("button",e._g({class:[e.prefixClass+"-btn "+e.prefixClass+"-btn-text "+e.prefixClass+"-btn-icon-"+e.type,{disabled:e.disabled}],attrs:{type:"button",disabled:e.disabled}},e.$listeners),[a("i",{class:e.prefixClass+"-icon-"+e.type})])},staticRenderFns:[]},void 0,{props:{type:String,disabled:Boolean},inject:{prefixClass:{default:"mx"}}},void 0,!1,void 0,!1,void 0,void 0,void 0),Me=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:e.prefixClass+"-calendar "+e.prefixClass+"-calendar-panel-date"},[a("div",{class:e.prefixClass+"-calendar-header"},[a("icon-button",{attrs:{type:"double-left",disabled:e.isDisabledArrows("last-year")},on:{click:e.handleIconDoubleLeftClick}}),e._v(" "),a("icon-button",{attrs:{type:"left",disabled:e.isDisabledArrows("last-month")},on:{click:e.handleIconLeftClick}}),e._v(" "),a("icon-button",{attrs:{type:"double-right",disabled:e.isDisabledArrows("next-year")},on:{click:e.handleIconDoubleRightClick}}),e._v(" "),a("icon-button",{attrs:{type:"right",disabled:e.isDisabledArrows("next-month")},on:{click:e.handleIconRightClick}}),e._v(" "),a("span",{class:e.prefixClass+"-calendar-header-label"},e._l(e.yearMonth,(function(t){return a("button",{key:t.panel,class:e.prefixClass+"-btn "+e.prefixClass+"-btn-text "+e.prefixClass+"-btn-current-"+t.panel,attrs:{type:"button"},on:{click:function(a){return e.handlePanelChange(t.panel)}}},[e._v("\n        "+e._s(t.label)+"\n      ")])})),0)],1),e._v(" "),a("div",{class:e.prefixClass+"-calendar-content"},[a("table",{class:e.prefixClass+"-table "+e.prefixClass+"-table-date"},[a("thead",[a("tr",[e.showWeekNumber?a("th",{class:e.prefixClass+"-week-number-header"}):e._e(),e._v(" "),e._l(e.days,(function(t){return a("th",{key:t},[e._v(e._s(t))])}))],2)]),e._v(" "),a("tbody",{on:{click:e.handleCellClick}},e._l(e.dates,(function(t,i){return a("tr",{key:i,class:[e.prefixClass+"-date-row",e.getRowClasses(t)]},[e.showWeekNumber?a("td",{class:e.prefixClass+"-week-number",attrs:{"data-row-col":i+",0"}},[e._v("\n            "+e._s(e.getWeekNumber(t[0]))+"\n          ")]):e._e(),e._v(" "),e._l(t,(function(t,s){return a("td",{key:s,staticClass:"cell",class:e.getCellClasses(t),attrs:{"data-row-col":i+","+s,title:e.getCellTitle(t)},on:{mouseenter:function(a){return e.handleMouseEnter(t)},mouseleave:function(a){return e.handleMouseLeave(t)}}},[a("div",[e._v(e._s(t.getDate()))])])}))],2)})),0)])])])},staticRenderFns:[]},void 0,{name:"TableDate",components:{IconButton:$e},inject:{getLocale:{default:function(){return Ce}},getWeek:{default:function(){return l}},prefixClass:{default:"mx"},onDateMouseEnter:{default:void 0},onDateMouseLeave:{default:void 0}},props:{disabledCalendarChanger:{type:Function,default:function(){return!1}},calendar:{type:Date,default:function(){return new Date}},showWeekNumber:{type:Boolean,default:!1},titleFormat:{type:String,default:"YYYY-MM-DD"},getRowClasses:{type:Function,default:function(){return[]}},getCellClasses:{type:Function,default:function(){return[]}}},computed:{firstDayOfWeek:function(){return this.getLocale().formatLocale.firstDayOfWeek||0},yearMonth:function(){var e=this.getLocale(),t=e.yearFormat,a=e.monthBeforeYear,i=e.monthFormat,s=void 0===i?"MMM":i,r={panel:"year",label:this.formatDate(this.calendar,t)},n={panel:"month",label:this.formatDate(this.calendar,s)};return a?[n,r]:[r,n]},days:function(){var e=this.getLocale(),t=e.days||e.formatLocale.weekdaysMin;return t.concat(t).slice(this.firstDayOfWeek,this.firstDayOfWeek+7)},dates:function(){var e=this.calendar.getFullYear(),t=this.calendar.getMonth();return de(function(e){for(var t=e.firstDayOfWeek,a=e.year,i=e.month,s=[],r=te(a,i,0),n=r.getDate(),o=n-(r.getDay()+7-t)%7,l=o;l<=n;l++)s.push(te(a,i,l-n));r.setMonth(i+1,0);for(var c=r.getDate(),u=1;u<=c;u++)s.push(te(a,i,u));for(var d=42-(n-o+1)-c,h=1;h<=d;h++)s.push(te(a,i,c+h));return s}({firstDayOfWeek:this.firstDayOfWeek,year:e,month:t}),7)}},methods:{isDisabledArrows:function(e){var t=new Date(this.calendar);switch(e){case"last-year":t.setFullYear(t.getFullYear()-1,t.getMonth()+1,0),t.setHours(23,59,59,999);break;case"next-year":t.setFullYear(t.getFullYear()+1);break;case"last-month":t.setMonth(t.getMonth(),0),t.setHours(23,59,59,999);break;case"next-month":t.setMonth(t.getMonth()+1)}return this.disabledCalendarChanger(t,e)},handleIconLeftClick:function(){this.$emit("changecalendar",le(this.calendar,(function(e){return e-1})),"last-month")},handleIconRightClick:function(){this.$emit("changecalendar",le(this.calendar,(function(e){return e+1})),"next-month")},handleIconDoubleLeftClick:function(){this.$emit("changecalendar",ce(this.calendar,(function(e){return e-1})),"last-year")},handleIconDoubleRightClick:function(){this.$emit("changecalendar",ce(this.calendar,(function(e){return e+1})),"next-year")},handlePanelChange:function(e){this.$emit("changepanel",e)},handleMouseEnter:function(e){"function"==typeof this.onDateMouseEnter&&this.onDateMouseEnter(e)},handleMouseLeave:function(e){"function"==typeof this.onDateMouseLeave&&this.onDateMouseLeave(e)},handleCellClick:function(e){var t=e.target;"DIV"===t.tagName.toUpperCase()&&(t=t.parentNode);var a=t.getAttribute("data-row-col");if(a){var i=z(a.split(",").map((function(e){return parseInt(e,10)})),2),s=i[0],r=i[1],n=this.dates[s][r];this.$emit("select",new Date(n))}},formatDate:function(e,t){return v(e,t,{locale:this.getLocale().formatLocale})},getCellTitle:function(e){var t=this.titleFormat;return this.formatDate(e,t)},getWeekNumber:function(e){return this.getWeek(e,this.getLocale().formatLocale)}}},void 0,!1,void 0,!1,void 0,void 0,void 0),Te=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:e.prefixClass+"-calendar "+e.prefixClass+"-calendar-panel-month"},[a("div",{class:e.prefixClass+"-calendar-header"},[a("icon-button",{attrs:{type:"double-left",disabled:e.isDisabledArrows("last-year")},on:{click:e.handleIconDoubleLeftClick}}),e._v(" "),a("icon-button",{attrs:{type:"double-right",disabled:e.isDisabledArrows("next-year")},on:{click:e.handleIconDoubleRightClick}}),e._v(" "),a("span",{class:e.prefixClass+"-calendar-header-label"},[a("button",{class:e.prefixClass+"-btn "+e.prefixClass+"-btn-text",attrs:{type:"button"},on:{click:e.handlePanelChange}},[e._v("\n        "+e._s(e.calendarYear)+"\n      ")])])],1),e._v(" "),a("div",{class:e.prefixClass+"-calendar-content"},[a("table",{class:e.prefixClass+"-table "+e.prefixClass+"-table-month",on:{click:e.handleClick}},e._l(e.months,(function(t,i){return a("tr",{key:i},e._l(t,(function(t,i){return a("td",{key:i,staticClass:"cell",class:e.getCellClasses(t.month),attrs:{"data-month":t.month}},[a("div",[e._v(e._s(t.text))])])})),0)})),0)])])},staticRenderFns:[]},void 0,{name:"TableMonth",components:{IconButton:$e},inject:{getLocale:{default:function(){return Ce}},prefixClass:{default:"mx"}},props:{disabledCalendarChanger:{type:Function,default:function(){return!1}},calendar:{type:Date,default:function(){return new Date}},getCellClasses:{type:Function,default:function(){return[]}}},computed:{calendarYear:function(){return this.calendar.getFullYear()},months:function(){var e=this.getLocale();return de((e.months||e.formatLocale.monthsShort).map((function(e,t){return{text:e,month:t}})),3)}},methods:{isDisabledArrows:function(e){var t=new Date(this.calendar);switch(e){case"last-year":t.setFullYear(t.getFullYear()-1,11,31),t.setHours(23,59,59,999);break;case"next-year":t.setFullYear(t.getFullYear()+1,0,1)}return this.disabledCalendarChanger(t,e)},handleIconDoubleLeftClick:function(){this.$emit("changecalendar",ce(this.calendar,(function(e){return e-1})),"last-year")},handleIconDoubleRightClick:function(){this.$emit("changecalendar",ce(this.calendar,(function(e){return e+1})),"next-year")},handlePanelChange:function(){this.$emit("changepanel","year")},handleClick:function(e){var t=e.target;"DIV"===t.tagName.toUpperCase()&&(t=t.parentNode);var a=t.getAttribute("data-month");a&&!t.classList.contains("disabled")&&this.$emit("select",parseInt(a,10))}}},void 0,!1,void 0,!1,void 0,void 0,void 0),Pe=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:e.prefixClass+"-calendar "+e.prefixClass+"-calendar-panel-year"},[a("div",{class:e.prefixClass+"-calendar-header"},[a("icon-button",{attrs:{type:"double-left",disabled:e.isDisabledArrows("last-decade")},on:{click:e.handleIconDoubleLeftClick}}),e._v(" "),a("icon-button",{attrs:{type:"double-right",disabled:e.isDisabledArrows("next-decade")},on:{click:e.handleIconDoubleRightClick}}),e._v(" "),a("span",{class:e.prefixClass+"-calendar-header-label"},[a("span",[e._v(e._s(e.firstYear))]),e._v(" "),a("span",{class:e.prefixClass+"-calendar-decade-separator"}),e._v(" "),a("span",[e._v(e._s(e.lastYear))])])],1),e._v(" "),a("div",{class:e.prefixClass+"-calendar-content"},[a("table",{class:e.prefixClass+"-table "+e.prefixClass+"-table-year",on:{click:e.handleClick}},e._l(e.years,(function(t,i){return a("tr",{key:i},e._l(t,(function(t,i){return a("td",{key:i,staticClass:"cell",class:e.getCellClasses(t),attrs:{"data-year":t}},[a("div",[e._v(e._s(t))])])})),0)})),0)])])},staticRenderFns:[]},void 0,{name:"TableYear",components:{IconButton:$e},inject:{prefixClass:{default:"mx"}},props:{disabledCalendarChanger:{type:Function,default:function(){return!1}},calendar:{type:Date,default:function(){return new Date}},getCellClasses:{type:Function,default:function(){return[]}},getYearPanel:{type:Function}},computed:{years:function(){var e=new Date(this.calendar);return"function"==typeof this.getYearPanel?this.getYearPanel(e):this.getYears(e)},firstYear:function(){return this.years[0][0]},lastYear:function(){var e=function(e){return e[e.length-1]};return e(e(this.years))}},methods:{isDisabledArrows:function(e){var t=new Date(this.calendar);switch(e){case"last-decade":t.setFullYear(this.firstYear-1,11,31),t.setHours(23,59,59,999);break;case"next-decade":t.setFullYear(this.lastYear+1,0,1)}return this.disabledCalendarChanger(t,e)},getYears:function(e){for(var t=10*Math.floor(e.getFullYear()/10),a=[],i=0;i<10;i++)a.push(t+i);return de(a,2)},handleIconDoubleLeftClick:function(){this.$emit("changecalendar",ce(this.calendar,(function(e){return e-10})),"last-decade")},handleIconDoubleRightClick:function(){this.$emit("changecalendar",ce(this.calendar,(function(e){return e+10})),"next-decade")},handleClick:function(e){var t=e.target;"DIV"===t.tagName.toUpperCase()&&(t=t.parentNode);var a=t.getAttribute("data-year");a&&!t.classList.contains("disabled")&&this.$emit("select",parseInt(a,10))}}},void 0,!1,void 0,!1,void 0,void 0,void 0),Oe={name:"CalendarPanel",inject:{prefixClass:{default:"mx"},dispatchDatePicker:{default:function(){return function(){}}}},props:{value:{},defaultValue:{default:function(){var e=new Date;return e.setHours(0,0,0,0),e}},defaultPanel:{type:String},disabledCalendarChanger:{type:Function,default:function(){return!1}},disabledDate:{type:Function,default:function(){return!1}},type:{type:String,default:"date"},getClasses:{type:Function,default:function(){return[]}},showWeekNumber:{type:Boolean,default:void 0},getYearPanel:{type:Function},titleFormat:{type:String,default:"YYYY-MM-DD"},calendar:Date,partialUpdate:{type:Boolean,default:!1}},data:function(){var e=["date","month","year"],t=Math.max(e.indexOf(this.type),e.indexOf(this.defaultPanel));return{panel:-1!==t?e[t]:"date",innerCalendar:new Date}},computed:{innerValue:function(){var e=Array.isArray(this.value)?this.value:[this.value],t={year:re,month:ne,date:oe},a=t[this.type]||t.date;return e.filter(ae).map((function(e){return a(e)}))},calendarYear:function(){return this.innerCalendar.getFullYear()},calendarMonth:function(){return this.innerCalendar.getMonth()}},watch:{value:{immediate:!0,handler:"initCalendar"},calendar:{handler:"initCalendar"},defaultValue:{handler:"initCalendar"}},methods:{initCalendar:function(){var e=this.calendar;if(!ae(e)){var t=this.innerValue.length;e=se(t>0?this.innerValue[t-1]:this.defaultValue)}this.innerCalendar=ne(e)},isDisabled:function(e){return this.disabledDate(new Date(e),this.innerValue)},emitDate:function(e,t){this.isDisabled(e)||(this.$emit("select",e,t,this.innerValue),this.dispatchDatePicker("pick",e,t))},handleCalendarChange:function(e,t){var a=new Date(this.innerCalendar);this.innerCalendar=e,this.$emit("update:calendar",e),this.dispatchDatePicker("calendar-change",e,a,t)},handelPanelChange:function(e){var t=this.panel;this.panel=e,this.dispatchDatePicker("panel-change",e,t)},handleSelectYear:function(e){if("year"===this.type){var t=this.getYearCellDate(e);this.emitDate(t,"year")}else if(this.handleCalendarChange(te(e,this.calendarMonth),"year"),this.handelPanelChange("month"),this.partialUpdate&&1===this.innerValue.length){var a=new Date(this.innerValue[0]);a.setFullYear(e),this.emitDate(a,"year")}},handleSelectMonth:function(e){if("month"===this.type){var t=this.getMonthCellDate(e);this.emitDate(t,"month")}else if(this.handleCalendarChange(te(this.calendarYear,e),"month"),this.handelPanelChange("date"),this.partialUpdate&&1===this.innerValue.length){var a=new Date(this.innerValue[0]);a.setFullYear(this.calendarYear),this.emitDate(le(a,e),"month")}},handleSelectDate:function(e){this.emitDate(e,"week"===this.type?"week":"date")},getMonthCellDate:function(e){return te(this.calendarYear,e)},getYearCellDate:function(e){return te(e,0)},getDateClasses:function(e){var t=e.getMonth()!==this.calendarMonth,a=[];e.getTime()===(new Date).setHours(0,0,0,0)&&a.push("today"),t&&a.push("not-current-month");var i=this.getStateClass(e);return"active"===i&&t||a.push(i),a.concat(this.getClasses(e,this.innerValue,a.join(" ")))},getMonthClasses:function(e){var t=[];if("month"!==this.type){this.calendarMonth===e&&t.push("active");var a=this.getMonthCellDate(e);return this.disabledCalendarChanger(a,"month")&&t.push("disabled"),t}var i=this.getMonthCellDate(e);return t.push(this.getStateClass(i)),t.concat(this.getClasses(i,this.innerValue,t.join(" ")))},getYearClasses:function(e){var t=[];if("year"!==this.type){this.calendarYear===e&&t.push("active");var a=this.getYearCellDate(e);return this.disabledCalendarChanger(a,"year")&&t.push("disabled"),t}var i=this.getYearCellDate(e);return t.push(this.getStateClass(i)),t.concat(this.getClasses(i,this.innerValue,t.join(" ")))},getStateClass:function(e){return this.isDisabled(e)?"disabled":this.innerValue.some((function(t){return t.getTime()===e.getTime()}))?"active":""},getWeekState:function(e){if("week"!==this.type)return"";var t=e[0].getTime(),a=e[6].getTime();return this.innerValue.some((function(e){var i=e.getTime();return i>=t&&i<=a}))?"".concat(this.prefixClass,"-active-week"):""}},render:function(){var e=arguments[0],t=this.panel,a=this.innerCalendar;return"year"===t?e(Pe,{attrs:{disabledCalendarChanger:this.disabledCalendarChanger,calendar:a,getCellClasses:this.getYearClasses,getYearPanel:this.getYearPanel},on:{select:this.handleSelectYear,changecalendar:this.handleCalendarChange}}):"month"===t?e(Te,{attrs:{disabledCalendarChanger:this.disabledCalendarChanger,calendar:a,getCellClasses:this.getMonthClasses},on:{select:this.handleSelectMonth,changepanel:this.handelPanelChange,changecalendar:this.handleCalendarChange}}):e(Me,{attrs:{disabledCalendarChanger:this.disabledCalendarChanger,calendar:a,getCellClasses:this.getDateClasses,getRowClasses:this.getWeekState,titleFormat:this.titleFormat,showWeekNumber:"boolean"==typeof this.showWeekNumber?this.showWeekNumber:"week"===this.type},class:H({},"".concat(this.prefixClass,"-calendar-week-mode"),"week"===this.type),on:{select:this.handleSelectDate,changepanel:this.handelPanelChange,changecalendar:this.handleCalendarChange}})}},Ne={name:"CalendarRange",components:{CalendarPanel:Oe},provide:function(){return{onDateMouseEnter:this.onDateMouseEnter,onDateMouseLeave:this.onDateMouseLeave}},inject:{prefixClass:{default:"mx"}},props:W({},Oe.props),data:function(){return{innerValue:[],calendars:[],hoveredValue:null}},computed:{calendarMinDiff:function(){var e={date:1,month:12,year:120};return e[this.type]||e.date},calendarMaxDiff:function(){return 1/0},defaultValues:function(){return Array.isArray(this.defaultValue)?this.defaultValue:[this.defaultValue,this.defaultValue]}},watch:{value:{immediate:!0,handler:function(){var e=this;this.innerValue=ie(this.value)?this.value:[new Date(NaN),new Date(NaN)];var t=this.innerValue.map((function(t,a){return ne(se(t,e.defaultValues[a]))}));this.updateCalendars(t)}}},methods:{handleSelect:function(e,t){var a=z(this.innerValue,2),i=a[0],s=a[1];ae(i)&&!ae(s)?(i.getTime()>e.getTime()?this.innerValue=[e,i]:this.innerValue=[i,e],this.emitDate(this.innerValue,t)):this.innerValue=[e,new Date(NaN)]},onDateMouseEnter:function(e){this.hoveredValue=e},onDateMouseLeave:function(){this.hoveredValue=null},emitDate:function(e,t){this.$emit("select",e,t)},updateStartCalendar:function(e){this.updateCalendars([e,this.calendars[1]],1)},updateEndCalendar:function(e){this.updateCalendars([this.calendars[0],e],0)},updateCalendars:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,a=this.getCalendarGap(e);if(a){var i=new Date(e[t]);i.setMonth(i.getMonth()+(0===t?-a:a)),e[t]=i}this.calendars=e},getCalendarGap:function(e){var t=z(e,2),a=t[0],i=t[1],s=12*(i.getFullYear()-a.getFullYear())+(i.getMonth()-a.getMonth()),r=this.calendarMinDiff,n=this.calendarMaxDiff;return s<r?r-s:s>n?n-s:0},getRangeClasses:function(e,t,a){var i=[].concat(this.getClasses(e,t,a));if(/disabled|active/.test(a))return i;var s=function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:function(e){return e.getTime()},i=a(e),s=t.map(a),r=z(s,2),n=r[0],o=r[1];if(n>o){var l=[o,n];n=l[0],o=l[1]}return i>n&&i<o};return 2===t.length&&s(e,t)?i.concat("in-range"):1===t.length&&this.hoveredValue&&s(e,[t[0],this.hoveredValue])?i.concat("hover-in-range"):i}},render:function(){var e=this,t=arguments[0],a=this.calendars.map((function(a,i){var s=W({},e.$props,{calendar:a,value:e.innerValue,defaultValue:e.defaultValues[i],getClasses:e.getRangeClasses,partialUpdate:!1}),r={select:e.handleSelect,"update:calendar":0===i?e.updateStartCalendar:e.updateEndCalendar};return t("calendar-panel",{props:W({},s),on:W({},r)})})),i=this.prefixClass;return t("div",{class:"".concat(i,"-range-wrapper")},[a])}},Ae=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:e.prefixClass+"-scrollbar",style:{position:"relative",overflow:"hidden"}},[a("div",{ref:"wrap",class:e.prefixClass+"-scrollbar-wrap",style:{marginRight:"-"+e.scrollbarWidth+"px"},on:{scroll:e.handleScroll}},[e._t("default")],2),e._v(" "),a("div",{class:e.prefixClass+"-scrollbar-track"},[a("div",{ref:"thumb",class:e.prefixClass+"-scrollbar-thumb",style:{height:e.thumbHeight,top:e.thumbTop},on:{mousedown:e.handleDragstart}})])])},staticRenderFns:[]},void 0,{inject:{prefixClass:{default:"mx"}},data:function(){return{scrollbarWidth:0,thumbTop:"",thumbHeight:""}},created:function(){this.scrollbarWidth=function(){if("undefined"==typeof window)return 0;if(void 0!==ke)return ke;var e=document.createElement("div");e.style.visibility="hidden",e.style.overflow="scroll",e.style.width="100px",e.style.position="absolute",e.style.top="-9999px",document.body.appendChild(e);var t=document.createElement("div");return t.style.width="100%",e.appendChild(t),ke=e.offsetWidth-t.offsetWidth,e.parentNode.removeChild(e),ke}(),document.addEventListener("mouseup",this.handleDragend)},beforeDestroy:function(){document.addEventListener("mouseup",this.handleDragend)},mounted:function(){this.$nextTick(this.getThumbSize)},methods:{getThumbSize:function(){var e=this.$refs.wrap;if(e){var t=100*e.clientHeight/e.scrollHeight;this.thumbHeight=t<100?"".concat(t,"%"):""}},handleScroll:function(e){var t=e.currentTarget,a=t.scrollHeight,i=t.scrollTop;this.thumbTop="".concat(100*i/a,"%")},handleDragstart:function(e){e.stopImmediatePropagation(),this._draggable=!0;var t=this.$refs.thumb.offsetTop;this._prevY=e.clientY-t,document.addEventListener("mousemove",this.handleDraging)},handleDraging:function(e){if(this._draggable){var t=e.clientY,a=this.$refs.wrap,i=a.scrollHeight,s=a.clientHeight,r=(t-this._prevY)*i/s;a.scrollTop=r}},handleDragend:function(){this._draggable&&(this._draggable=!1,document.removeEventListener("mousemove",this.handleDraging))}}},void 0,!1,void 0,!1,void 0,void 0,void 0),Ie=function(e){return(e=parseInt(e,10))<10?"0".concat(e):"".concat(e)},Ve=function(e,t,a){if(Array.isArray(a))return a.filter((function(t){return t>=0&&t<e}));t<=0&&(t=1);for(var i=[],s=0;s<e;s+=t)i.push(s);return i},Le=function e(t,a){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(i<=0)requestAnimationFrame((function(){t.scrollTop=a}));else{var s=a-t.scrollTop,r=s/i*10;requestAnimationFrame((function(){var s=t.scrollTop+r;s>=a?t.scrollTop=a:(t.scrollTop=s,e(t,a,i-10))}))}},Ye=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:e.prefixClass+"-time-columns"},e._l(e.columns,(function(t,i){return a("scrollbar-vertical",{key:i,class:e.prefixClass+"-time-column"},[a("ul",{class:e.prefixClass+"-time-list",attrs:{"data-type":t.type,"data-index":i},on:{click:e.handleSelect}},e._l(t.list,(function(i,s){return a("li",{key:i.value,class:[e.prefixClass+"-time-item",e.getClasses(i.value,t.type)],attrs:{"data-index":s}},[e._v("\n        "+e._s(i.text)+"\n      ")])})),0)])})),1)},staticRenderFns:[]},void 0,{name:"ListColumns",components:{ScrollbarVertical:Ae},inject:{prefixClass:{default:"mx"}},props:{date:Date,scrollDuration:{type:Number,default:100},getClasses:{type:Function,default:function(){return[]}},hourOptions:Array,minuteOptions:Array,secondOptions:Array,showHour:{type:Boolean,default:!0},showMinute:{type:Boolean,default:!0},showSecond:{type:Boolean,default:!0},hourStep:{type:Number,default:1},minuteStep:{type:Number,default:1},secondStep:{type:Number,default:1},use12h:{type:Boolean,default:!1}},computed:{columns:function(){var e=[];return this.showHour&&e.push({type:"hour",list:this.getHoursList()}),this.showMinute&&e.push({type:"minute",list:this.getMinutesList()}),this.showSecond&&e.push({type:"second",list:this.getSecondsList()}),this.use12h&&e.push({type:"ampm",list:this.getAMPMList()}),e.filter((function(e){return e.list.length>0}))}},watch:{date:{handler:function(){var e=this;this.$nextTick((function(){e.scrollToSelected(e.scrollDuration)}))}}},mounted:function(){this.scrollToSelected(0)},methods:{getHoursList:function(){var e=this;return Ve(this.use12h?12:24,this.hourStep,this.hourOptions).map((function(t){var a=new Date(e.date),i=Ie(t);return e.use12h&&(0===t&&(i="12"),a.getHours()>=12&&(t+=12)),{value:a.setHours(t),text:i}}))},getMinutesList:function(){var e=this;return Ve(60,this.minuteStep,this.minuteOptions).map((function(t){return{value:new Date(e.date).setMinutes(t),text:Ie(t)}}))},getSecondsList:function(){var e=this;return Ve(60,this.secondStep,this.secondOptions).map((function(t){return{value:new Date(e.date).setSeconds(t),text:Ie(t)}}))},getAMPMList:function(){var e=this;return["AM","PM"].map((function(t,a){var i=new Date(e.date);return{text:t,value:i.setHours(i.getHours()%12+12*a)}}))},scrollToSelected:function(e){for(var t=this.$el.querySelectorAll(".active"),a=0;a<t.length;a++){var i=t[a],s=we(i,this.$el);if(s){var r=i.offsetTop;Le(s,r,e)}}},handleSelect:function(e){var t=e.target,a=e.currentTarget;if("LI"===t.tagName.toUpperCase()){var i=a.getAttribute("data-type"),s=parseInt(a.getAttribute("data-index"),10),r=parseInt(t.getAttribute("data-index"),10),n=this.columns[s].list[r].value;this.$emit("select",n,i)}}}},void 0,!1,void 0,!1,void 0,void 0,void 0);function je(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=e.split(":");if(t.length>=2){var a=parseInt(t[0],10),i=parseInt(t[1],10);return{hours:a,minutes:i}}return null}var Re=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("scrollbar-vertical",e._l(e.list,(function(t){return a("div",{key:t.value,class:[e.prefixClass+"-time-option",e.getClasses(t.value)],on:{click:function(a){return e.handleSelect(t.value)}}},[e._v("\n    "+e._s(t.text)+"\n  ")])})),0)},staticRenderFns:[]},void 0,{name:"ListOptions",components:{ScrollbarVertical:Ae},inject:{getLocale:{default:function(){return Ce}},prefixClass:{default:"mx"}},props:{date:Date,options:{type:[Object,Function],default:function(){return[]}},format:{type:String,default:"HH:mm:ss"},getClasses:{type:Function,default:function(){return[]}}},computed:{list:function(){var e=[],t=this.options;if("function"==typeof t)return t()||[];var a=je(t.start),i=je(t.end),s=je(t.step),r=t.format||this.format;if(a&&i&&s)for(var n=a.minutes+60*a.hours,o=i.minutes+60*i.hours,l=s.minutes+60*s.hours,c=Math.floor((o-n)/l),u=0;u<=c;u++){var d=n+u*l,h=Math.floor(d/60),p=d%60,m=new Date(this.date).setHours(h,p,0);e.push({value:m,text:this.formatDate(m,r)})}return e}},mounted:function(){this.scrollToSelected()},methods:{formatDate:function(e,t){return v(e,t,{locale:this.getLocale().formatLocale})},scrollToSelected:function(){var e=this.$el.querySelector(".active");if(e){var t=we(e,this.$el);t&&function(e,t){e&&(e.scrollTop=t)}(t,e.offsetTop)}},handleSelect:function(e){this.$emit("select",e,"time")}}},void 0,!1,void 0,!1,void 0,void 0,void 0),Be=De({render:function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{class:e.prefixClass+"-time"},[e.showTimeHeader?a("div",{class:e.prefixClass+"-time-header"},[a("button",{class:e.prefixClass+"-btn "+e.prefixClass+"-btn-text "+e.prefixClass+"-time-header-title",attrs:{type:"button"},on:{click:e.handleClickTitle}},[e._v("\n      "+e._s(e.title)+"\n    ")])]):e._e(),e._v(" "),a("div",{class:e.prefixClass+"-time-content"},[e.timePickerOptions?a("list-options",{attrs:{date:e.innerValue,"get-classes":e.getClasses,options:e.timePickerOptions,format:e.innerForamt},on:{select:e.handleSelect}}):a("list-columns",e._b({attrs:{date:e.innerValue,"get-classes":e.getClasses,"hour-options":e.hourOptions,"minute-options":e.minuteOptions,"second-options":e.secondOptions,"hour-step":e.hourStep,"minute-step":e.minuteStep,"second-step":e.secondStep,"scroll-duration":e.scrollDuration},on:{select:e.handleSelect}},"list-columns",e.ShowHourMinuteSecondAMPM,!1))],1)])},staticRenderFns:[]},void 0,{name:"TimePanel",components:{ListColumns:Ye,ListOptions:Re},inject:{getLocale:{default:function(){return Ce}},prefixClass:{default:"mx"}},props:{value:{},defaultValue:{default:function(){var e=new Date;return e.setHours(0,0,0,0),e}},format:{default:"HH:mm:ss"},timeTitleFormat:{type:String,default:"YYYY-MM-DD"},showTimeHeader:{type:Boolean,default:!1},disabledTime:{type:Function,default:function(){return!1}},timePickerOptions:{type:[Object,Function],default:function(){return null}},hourOptions:Array,minuteOptions:Array,secondOptions:Array,hourStep:{type:Number,default:1},minuteStep:{type:Number,default:1},secondStep:{type:Number,default:1},showHour:{type:Boolean,default:void 0},showMinute:{type:Boolean,default:void 0},showSecond:{type:Boolean,default:void 0},use12h:{type:Boolean,default:void 0},scrollDuration:{type:Number,default:100}},data:function(){return{innerValue:se(this.value,this.defaultValue)}},computed:{title:function(){var e=this.timeTitleFormat,t=new Date(this.innerValue);return this.formatDate(t,e)},innerForamt:function(){return"string"==typeof this.format?this.format:"HH:mm:ss"},ShowHourMinuteSecondAMPM:function(){var e=this,t=this.innerForamt,a={showHour:/[HhKk]/.test(t),showMinute:/m/.test(t),showSecond:/s/.test(t),use12h:/a/i.test(t)},i={};return Object.keys(a).forEach((function(t){i[t]="boolean"==typeof e[t]?e[t]:a[t]})),i}},watch:{value:{immediate:!0,handler:function(){this.innerValue=se(this.value,this.defaultValue)}}},methods:{formatDate:function(e,t){return v(e,t,{locale:this.getLocale().formatLocale})},isDisabledTime:function(e){return this.disabledTime(new Date(e))},isDisabledHour:function(e){var t=new Date(e);return this.isDisabledTime(t)&&this.isDisabledTime(t.setMinutes(0,0,0))&&this.isDisabledTime(t.setMinutes(59,59,999))},isDisabledMinute:function(e){var t=new Date(e);return this.isDisabledTime(t)&&this.isDisabledTime(t.setSeconds(0,0))&&this.isDisabledTime(t.setSeconds(59,999))},isDisabledAMPM:function(e){var t=new Date(e),a=t.getHours()<12?0:12,i=a+11;return this.isDisabledTime(t)&&this.isDisabledTime(t.setHours(a,0,0,0))&&this.isDisabledTime(t.setHours(i,59,59,999))},isDisabled:function(e,t){return"hour"===t?this.isDisabledHour(e):"minute"===t?this.isDisabledMinute(e):"ampm"===t?this.isDisabledAMPM(e):this.isDisabledTime(e)},handleSelect:function(e,t){var a=new Date(e);this.isDisabled(e,t)||(this.innerValue=a,this.isDisabledTime(a)||this.$emit("select",a,t))},handleClickTitle:function(){this.$emit("clicktitle")},getClasses:function(e,t){var a=new Date(e);return this.isDisabled(e,t)?"disabled":a.getTime()===this.innerValue.getTime()?"active":""}}},void 0,!1,void 0,!1,void 0,void 0,void 0),He={name:"TimeRange",inject:{prefixClass:{default:"mx"}},props:W({},Be.props),data:function(){return{startValue:new Date(NaN),endValue:new Date(NaN)}},watch:{value:{immediate:!0,handler:function(){if(ie(this.value)){var e=z(this.value,2),t=e[0],a=e[1];this.startValue=t,this.endValue=a}else this.startValue=new Date(NaN),this.endValue=new Date(NaN)}}},methods:{emitChange:function(e,t){var a=[this.startValue,this.endValue];this.$emit("select",a,"time"===e?"time-range":e,t)},handleSelectStart:function(e,t){this.startValue=e,this.endValue.getTime()>=e.getTime()||(this.endValue=e),this.emitChange(t,0)},handleSelectEnd:function(e,t){this.endValue=e,this.startValue.getTime()<=e.getTime()||(this.startValue=e),this.emitChange(t,1)},disabledStartTime:function(e){return this.disabledTime(e,0)},disabledEndTime:function(e){return e.getTime()<this.startValue.getTime()||this.disabledTime(e,1)}},render:function(){var e=arguments[0],t=Array.isArray(this.defaultValue)?this.defaultValue:[this.defaultValue,this.defaultValue],a=this.prefixClass;return e("div",{class:"".concat(a,"-range-wrapper")},[e(Be,{props:W({},W({},this.$props,{value:this.startValue,defaultValue:t[0],disabledTime:this.disabledStartTime})),on:W({},W({},this.$listeners,{select:this.handleSelectStart}))}),e(Be,{props:W({},W({},this.$props,{value:this.endValue,defaultValue:t[1],disabledTime:this.disabledEndTime})),on:W({},W({},this.$listeners,{select:this.handleSelectEnd}))})])}},qe={name:"DatetimePanel",inject:{prefixClass:{default:"mx"}},emits:["select","update:show-time-panel"],props:W({},Oe.props,{},Be.props,{showTimePanel:{type:Boolean,default:void 0}}),data:function(){return{defaultTimeVisible:!1,currentValue:this.value}},computed:{timeVisible:function(){return"boolean"==typeof this.showTimePanel?this.showTimePanel:this.defaultTimeVisible}},watch:{value:function(e){this.currentValue=e}},methods:{closeTimePanel:function(){this.defaultTimeVisible=!1,this.$emit("update:show-time-panel",!1)},openTimePanel:function(){this.defaultTimeVisible=!0,this.$emit("update:show-time-panel",!0)},emitDate:function(e,t){this.$emit("select",e,t)},handleSelect:function(e,t){"date"===t&&this.openTimePanel();var a=ue(e,se(this.value,this.defaultValue));this.disabledTime(new Date(a))&&(a=ue(e,this.defaultValue),this.disabledTime(new Date(a)))?this.currentValue=a:this.emitDate(a,t)}},render:function(){var e=arguments[0],t={props:W({},pe(this.$props,Object.keys(Oe.props)),{type:"date",value:this.currentValue}),on:{select:this.handleSelect}},a={props:W({},pe(this.$props,Object.keys(Be.props)),{showTimeHeader:!0,value:this.currentValue}),on:{select:this.emitDate,clicktitle:this.closeTimePanel}},i=this.prefixClass;return e("div",[e(Oe,ee([{},t])),this.timeVisible&&e(Be,ee([{class:"".concat(i,"-calendar-time")},a]))])}},Ue={name:"DatetimeRange",inject:{prefixClass:{default:"mx"}},emits:["select","update:show-time-panel"],props:W({},Ne.props,{},He.props,{showTimePanel:{type:Boolean,default:void 0}}),data:function(){return{defaultTimeVisible:!1,currentValue:this.value}},computed:{timeVisible:function(){return"boolean"==typeof this.showTimePanel?this.showTimePanel:this.defaultTimeVisible}},watch:{value:function(e){this.currentValue=e}},methods:{closeTimePanel:function(){this.defaultTimeVisible=!1,this.$emit("update:show-time-panel",!1)},openTimePanel:function(){this.defaultTimeVisible=!0,this.$emit("update:show-time-panel",!0)},emitDate:function(e,t){this.$emit("select",e,t)},handleSelect:function(e,t){var a=this;"date"===t&&this.openTimePanel();var i=Array.isArray(this.defaultValue)?this.defaultValue:[this.defaultValue,this.defaultValue],s=e.map((function(e,t){return ue(e,ie(a.value)?a.value[t]:i[t])}));s[1].getTime()<s[0].getTime()&&(s=[s[0],s[0]]),s.some(this.disabledTime)&&(s=e.map((function(e,t){return ue(e,i[t])}))).some(this.disabledTime)?this.currentValue=s:this.emitDate(s,t)}},render:function(){var e=arguments[0],t={props:W({},pe(this.$props,Object.keys(Ne.props)),{type:"date",value:this.currentValue}),on:{select:this.handleSelect}},a={props:W({},pe(this.$props,Object.keys(He.props)),{value:this.currentValue,showTimeHeader:!0}),on:{select:this.emitDate,clicktitle:this.closeTimePanel}},i=this.prefixClass;return e("div",[e(Ne,ee([{},t])),this.timeVisible&&e(He,ee([{class:"".concat(i,"-calendar-time")},a]))])}},We={default:Oe,time:Be,datetime:qe},ze={default:Ne,time:He,datetime:Ue},Ze={name:"DatePicker",provide:function(){var e=this;return{getLocale:function(){return e.locale},getWeek:this.getWeek,prefixClass:this.prefixClass,dispatchDatePicker:this.$emit.bind(this)}},props:W({},qe.props,{value:{},valueType:{type:String,default:"date"},type:{type:String,default:"date"},format:{type:String},formatter:{type:Object},range:{type:Boolean,default:!1},multiple:{type:Boolean,default:!1},rangeSeparator:{type:String},lang:{type:[String,Object]},placeholder:{type:String,default:""},editable:{type:Boolean,default:!0},disabled:{type:Boolean,default:!1},clearable:{type:Boolean,default:!0},prefixClass:{type:String,default:"mx"},inputClass:{},inputAttr:{type:Object,default:function(){return{}}},appendToBody:{type:Boolean,default:!0},open:{type:Boolean,default:void 0},popupClass:{},popupStyle:{type:Object,default:function(){return{}}},inline:{type:Boolean,default:!1},confirm:{type:Boolean,default:!1},confirmText:{type:String,default:"OK"},renderInputText:{type:Function},shortcuts:{type:Array,validator:function(e){return Array.isArray(e)&&e.every((function(e){return he(e)&&"string"==typeof e.text&&"function"==typeof e.onClick}))},default:function(){return[]}}}),data:function(){return{currentValue:null,userInput:null,defaultOpen:!1}},computed:{popupVisible:function(){return!this.disabled&&("boolean"==typeof this.open?this.open:this.defaultOpen)},innerRangeSeparator:function(){return this.rangeSeparator||(this.multiple?",":" ~ ")},innerFormat:function(){var e={date:"YYYY-MM-DD",datetime:"YYYY-MM-DD HH:mm:ss",year:"YYYY",month:"YYYY-MM",time:"HH:mm:ss",week:"w"};return this.format||e[this.type]||e.date},innerValue:function(){var e=this.value;return this.validMultipleType?(e=Array.isArray(e)?e:[]).map(this.value2date):this.range?(e=Array.isArray(e)?e.slice(0,2):[null,null]).map(this.value2date):this.value2date(e)},text:function(){var e=this;return null!==this.userInput?this.userInput:"function"==typeof this.renderInputText?this.renderInputText(this.innerValue):this.isValidValue(this.innerValue)?Array.isArray(this.innerValue)?this.innerValue.map((function(t){return e.formatDate(t)})).join(this.innerRangeSeparator):this.formatDate(this.innerValue):""},showClearIcon:function(){return!this.disabled&&this.clearable&&this.text},locale:function(){return he(this.lang)?me(Ce(),this.lang):Ce(this.lang)},validMultipleType:function(){return this.multiple&&!this.range&&-1!==["date","month","year"].indexOf(this.type)}},watch:{innerValue:{immediate:!0,handler:function(e){this.currentValue=e}},popupVisible:{handler:function(e){e&&(this.currentValue=this.innerValue)}}},created:function(){"object"===B(this.format)&&console.warn("[vue2-datepicker]: The prop `format` don't support Object any more. You can use the new prop `formatter` to replace it")},methods:{handleClickOutSide:function(e){var t=e.target;this.$el.contains(t)||this.closePopup()},getFormatter:function(e){return he(this.formatter)&&this.formatter[e]||he(this.format)&&this.format[e]},getWeek:function(e,t){return"function"==typeof this.getFormatter("getWeek")?this.getFormatter("getWeek")(e,t):l(e,t)},parseDate:function(e,t){if(t=t||this.innerFormat,"function"==typeof this.getFormatter("parse"))return this.getFormatter("parse")(e,t);var a=new Date;return function(e,t){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};try{var i=a.locale,s=void 0===i?c:i,r=a.backupDate,n=void 0===r?new Date:r,l=R(e,t,s),u=l.year,d=l.month,h=l.day,p=l.hour,m=l.minute,f=l.second,v=l.millisecond,b=l.isPM,y=l.date,_=l.offset,C=l.weekday,w=l.week;if(y)return y;var D,k=[u,d,h,p,m,f,v];if(k[3]=V(k[3],b),void 0!==w&&void 0===d&&void 0===h){var x=o(void 0===u?n:new Date(u,3),{firstDayOfWeek:s.firstDayOfWeek,firstWeekContainsDate:s.firstWeekContainsDate});return new Date(x.getTime()+7*(w-1)*24*3600*1e3)}var F=L(k,n);return void 0!==_?(F[6]+=60*_*1e3,D=j.apply(void 0,g(F))):D=Y.apply(void 0,g(F)),void 0!==C&&D.getDay()!==C?new Date(NaN):D}catch(e){return new Date(NaN)}}(e,t,{locale:this.locale.formatLocale,backupDate:a})},formatDate:function(e,t){return t=t||this.innerFormat,"function"==typeof this.getFormatter("stringify")?this.getFormatter("stringify")(e,t):v(e,t,{locale:this.locale.formatLocale})},value2date:function(e){switch(this.valueType){case"date":return e instanceof Date?new Date(e.getTime()):new Date(NaN);case"timestamp":return"number"==typeof e?new Date(e):new Date(NaN);case"format":return"string"==typeof e?this.parseDate(e):new Date(NaN);default:return"string"==typeof e?this.parseDate(e,this.valueType):new Date(NaN)}},date2value:function(e){if(!ae(e))return null;switch(this.valueType){case"date":return e;case"timestamp":return e.getTime();case"format":return this.formatDate(e);default:return this.formatDate(e,this.valueType)}},emitValue:function(e,t){var a=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];this.userInput=null;var i=Array.isArray(e)?e.map(this.date2value):this.date2value(e);return this.$emit("input",i),this.$emit("change",i,t),a&&this.closePopup(),i},isValidValue:function(e){return this.validMultipleType?(t=e,Array.isArray(t)&&t.every(ae)):this.range?ie(e):ae(e);var t},isValidValueAndNotDisabled:function(e){if(!this.isValidValue(e))return!1;var t="function"==typeof this.disabledDate?this.disabledDate:function(){return!1},a="function"==typeof this.disabledTime?this.disabledTime:function(){return!1};return Array.isArray(e)||(e=[e]),e.every((function(e){return!t(e)&&!a(e)}))},handleMultipleDates:function(e,t){if(this.validMultipleType&&t){var a=t.filter((function(t){return t.getTime()!==e.getTime()}));return a.length===t.length&&a.push(e),a}return e},handleSelectDate:function(e,t,a){e=this.handleMultipleDates(e,a),this.confirm?this.currentValue=e:this.emitValue(e,t,!this.validMultipleType&&(t===this.type||"time"===t))},clear:function(){this.emitValue(this.range?[null,null]:null),this.$emit("clear")},handleClear:function(e){e.stopPropagation(),this.clear()},handleConfirmDate:function(){var e=this.emitValue(this.currentValue);this.$emit("confirm",e)},handleSelectShortcut:function(e){var t=e.currentTarget.getAttribute("data-index"),a=this.shortcuts[parseInt(t,10)];if(he(a)&&"function"==typeof a.onClick){var i=a.onClick(this);i&&this.emitValue(i)}},openPopup:function(e){this.popupVisible||this.disabled||(this.defaultOpen=!0,this.$emit("open",e),this.$emit("update:open",!0))},closePopup:function(){this.popupVisible&&(this.defaultOpen=!1,this.$emit("close"),this.$emit("update:open",!1))},blur:function(){this.$refs.input&&this.$refs.input.blur()},focus:function(){this.$refs.input&&this.$refs.input.focus()},handleInputChange:function(){var e=this;if(this.editable&&null!==this.userInput){var t=this.userInput.trim();if(this.userInput=null,""!==t){var a;if(this.validMultipleType)a=t.split(this.innerRangeSeparator).map((function(t){return e.parseDate(t.trim())}));else if(this.range){var i=t.split(this.innerRangeSeparator);2!==i.length&&(i=t.split(this.innerRangeSeparator.trim())),a=i.map((function(t){return e.parseDate(t.trim())}))}else a=this.parseDate(t);this.isValidValueAndNotDisabled(a)?(this.emitValue(a),this.blur()):this.$emit("input-error",t)}else this.clear()}},handleInputInput:function(e){this.userInput="string"==typeof e?e:e.target.value},handleInputKeydown:function(e){var t=e.keyCode;9===t?this.closePopup():13===t&&this.handleInputChange()},handleInputBlur:function(e){this.$emit("blur",e)},handleInputFocus:function(e){this.openPopup(e),this.$emit("focus",e)},hasSlot:function(e){return!(!this.$slots[e]&&!this.$scopedSlots[e])},renderSlot:function(e,t,a){var i=this.$scopedSlots[e];return i?i(a)||t:this.$slots[e]||t},renderInput:function(){var e=this.$createElement,t=this.prefixClass,a=W({name:"date",type:"text",autocomplete:"off",value:this.text,class:this.inputClass||"".concat(this.prefixClass,"-input"),readonly:!this.editable,disabled:this.disabled,placeholder:this.placeholder},this.inputAttr),i=a.value,s=a.class,r=function(e,t){if(null==e)return{};var a,i,s=function(e,t){if(null==e)return{};var a,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}(a,["value","class"]),n={keydown:this.handleInputKeydown,focus:this.handleInputFocus,blur:this.handleInputBlur,input:this.handleInputInput,change:this.handleInputChange},o=this.renderSlot("input",e("input",{domProps:{value:i},class:s,attrs:W({},r),on:W({},n),ref:"input"}),{props:a,events:n}),l="time"===this.type?e(Se):e(Fe);return e("div",{class:"".concat(t,"-input-wrapper"),on:{mousedown:this.openPopup,touchstart:this.openPopup}},[o,this.showClearIcon?e("i",{class:"".concat(t,"-icon-clear"),on:{mousedown:this.handleClear,touchstart:this.handleClear}},[this.renderSlot("icon-clear",e(Ee))]):null,e("i",{class:"".concat(t,"-icon-calendar")},[this.renderSlot("icon-calendar",l)])])},renderContent:function(){var e=this.$createElement,t=this.range?ze:We,a=t[this.type]||t.default,i=W({},pe(this.$props,Object.keys(a.props)),{value:this.currentValue}),s=W({},pe(this.$listeners,a.emits||[]),{select:this.handleSelectDate}),r=e(a,ee([{},{props:i,on:s,ref:"picker"}]));return e("div",{class:"".concat(this.prefixClass,"-datepicker-body")},[this.renderSlot("content",r,{value:this.currentValue,emit:this.handleSelectDate})])},renderSidebar:function(){var e=this,t=this.$createElement,a=this.prefixClass;return t("div",{class:"".concat(a,"-datepicker-sidebar")},[this.renderSlot("sidebar",null,{value:this.currentValue,emit:this.handleSelectDate}),this.shortcuts.map((function(i,s){return t("button",{key:s,attrs:{"data-index":s,type:"button"},class:"".concat(a,"-btn ").concat(a,"-btn-text ").concat(a,"-btn-shortcut"),on:{click:e.handleSelectShortcut}},[i.text])}))])},renderHeader:function(){return(0,this.$createElement)("div",{class:"".concat(this.prefixClass,"-datepicker-header")},[this.renderSlot("header",null,{value:this.currentValue,emit:this.handleSelectDate})])},renderFooter:function(){var e=this.$createElement,t=this.prefixClass;return e("div",{class:"".concat(t,"-datepicker-footer")},[this.renderSlot("footer",null,{value:this.currentValue,emit:this.handleSelectDate}),this.confirm?e("button",{attrs:{type:"button"},class:"".concat(t,"-btn ").concat(t,"-datepicker-btn-confirm"),on:{click:this.handleConfirmDate}},[this.confirmText]):null])}},render:function(){var e,t=arguments[0],a=this.prefixClass,i=this.inline,s=this.disabled,r=this.hasSlot("sidebar")||this.shortcuts.length?this.renderSidebar():null,n=t("div",{class:"".concat(a,"-datepicker-content")},[this.hasSlot("header")?this.renderHeader():null,this.renderContent(),this.hasSlot("footer")||this.confirm?this.renderFooter():null]);return t("div",{class:(e={},H(e,"".concat(a,"-datepicker"),!0),H(e,"".concat(a,"-datepicker-range"),this.range),H(e,"".concat(a,"-datepicker-inline"),i),H(e,"disabled",s),e)},[i?null:this.renderInput(),i?t("div",{class:"".concat(a,"-datepicker-main")},[r,n]):t(xe,{ref:"popup",class:this.popupClass,style:this.popupStyle,attrs:{visible:this.popupVisible,appendToBody:this.appendToBody},on:{clickoutside:this.handleClickOutSide}},[r,n])])}};Ze.locale=_e,Ze.install=function(e){e.component(Ze.name,Ze)},"undefined"!=typeof window&&window.Vue&&Ze.install(window.Vue),q(Ze,{CalendarPanel:Oe,CalendarRange:Ne,TimePanel:Be,TimeRange:He,DatetimePanel:qe,DatetimeRange:Ue});const Je=Ze},644:function(e,t,a){e.exports=function(e){"use strict";e=e&&e.hasOwnProperty("default")?e.default:e;var t,a={formatLocale:(t=function(e,t){return e(t={exports:{}},t.exports),t.exports}((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0,t.default={months:["январь","февраль","март","апрель","май","июнь","июль","август","сентябрь","октябрь","ноябрь","декабрь"],monthsShort:["янв.","февр.","март","апр.","май","июнь","июль","авг.","сент.","окт.","нояб.","дек."],weekdays:["воскресенье","понедельник","вторник","среда","четверг","пятница","суббота"],weekdaysShort:["вс","пн","вт","ср","чт","пт","сб"],weekdaysMin:["вс","пн","вт","ср","чт","пт","сб"],firstDayOfWeek:1,firstWeekContainsDate:1},e.exports=t.default})),t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t),yearFormat:"YYYY",monthFormat:"MMM",monthBeforeYear:!0};return e.locale("ru",a),a}(a(170))}},e=>{"use strict";e(e.s=404)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9heGlvcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2J1aWxkRnVsbFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3V0aWxzLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdXRpbHMvbnVtYmVycy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9ldmVudEJ1cy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9EeW5hbWljRm9ybUFwcC52dWU/ZGI0MyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvRWxlbWVudC52dWU/NzMzZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvSW1wb3J0YW50QmxvY2sudnVlPzFkYWQiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL01peGlucy91bml0TWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvbGFuZy5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvSW1wb3J0YW50QmxvY2sudnVlPzk1MzIiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9JbXBvcnRhbnRCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ltcG9ydGFudEJsb2NrLnZ1ZT8wYjk3Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9IZWFkZXJCbG9jay52dWU/NDRlZiIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0hlYWRlckJsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvSGVhZGVyQmxvY2sudnVlPzZjODkiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0hlYWRlckJsb2NrLnZ1ZT8yNzU5Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9DaGVja0JveEJsb2NrLnZ1ZT85YjBkIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9NaXhpbnMvbGFiZWxNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvTWl4aW5zL2NvbXB1dGVkTWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0NoZWNrQm94QmxvY2sudnVlPzc0MDQiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9DaGVja0JveEJsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ2hlY2tCb3hCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1RleHRJbnB1dEJsb2NrLnZ1ZT8wMTg0Iiwid2VicGFjazovLy9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvVGV4dElucHV0QmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9UZXh0SW5wdXRCbG9jay52dWU/ZjgxMyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvVGV4dElucHV0QmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9OdW1iZXJJbnB1dEJsb2NrLnZ1ZT84MmNiIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9NaXhpbnMvbnVtYmVyRm9ybWF0TWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL051bWJlcklucHV0QmxvY2sudnVlPzE1NzMiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9OdW1iZXJJbnB1dEJsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvTnVtYmVySW5wdXRCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0NoZWNrTnVtYmVySW5wdXQudnVlPzQ1ZGYiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9DaGVja051bWJlcklucHV0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ2hlY2tOdW1iZXJJbnB1dC52dWU/YWEwYSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ2hlY2tOdW1iZXJJbnB1dC52dWU/ZWU5ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvU2VsZWN0QmxvY2sudnVlPzIwNTUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL01peGlucy9zZWxlY3RNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvTWl4aW5zL3RleHRUcmFuc2xhdGVNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvU2VsZWN0QmxvY2sudnVlPzdkNzIiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9TZWxlY3RCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1NlbGVjdEJsb2NrLnZ1ZT9hYmYxIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9GcmllemVCbG9jay52dWU/MTMwOSIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ZyaWV6ZUJsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvRnJpZXplQmxvY2sudnVlPzQ2MzAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ZyaWV6ZUJsb2NrLnZ1ZT9kYzYyIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9NdWx0aVNlbGVjdEJsb2NrLnZ1ZT8yNDU2Iiwid2VicGFjazovLy9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvTXVsdGlTZWxlY3RCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL011bHRpU2VsZWN0QmxvY2sudnVlP2JkNjEiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL011bHRpU2VsZWN0QmxvY2sudnVlP2E4ZTAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1VuZGVmaW5lZEJsb2NrLnZ1ZT9mNDlkIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9VbmRlZmluZWRCbG9jay52dWU/MjBlZSIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1VuZGVmaW5lZEJsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvUmFkaW9CbG9jay52dWU/NGExMCIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1JhZGlvQmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9SYWRpb0Jsb2NrLnZ1ZT82YWM5Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9SYWRpb0Jsb2NrLnZ1ZT9hZDc4Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9FcXVpcG1lbnRCbG9jay52dWU/Nzc3ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ29tcG9uZW50cy9FcXVpcG1lbnRMaXN0LnZ1ZT8xNTk1Iiwid2VicGFjazovLy9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ29tcG9uZW50cy9FcXVpcG1lbnRMaXN0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ29tcG9uZW50cy9FcXVpcG1lbnRMaXN0LnZ1ZT9mMTg1Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9Db21wb25lbnRzL0VxdWlwbWVudExpc3QudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9FcXVpcG1lbnRCbG9jay52dWU/OTliZSIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0VxdWlwbWVudEJsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvRXF1aXBtZW50QmxvY2sudnVlPzVkNDYiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0dyb3VwQmxvY2sudnVlPzBmYTciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0VsZW1lbnRJbkdyb3VwLnZ1ZT8yYzc1Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9JbXBvcnRhbnRJbmZvcm1hdGlvbi52dWU/YzU1ZCIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ltcG9ydGFudEluZm9ybWF0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvSW1wb3J0YW50SW5mb3JtYXRpb24udnVlP2YyMjEiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ltcG9ydGFudEluZm9ybWF0aW9uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvRWxlbWVudEluR3JvdXAudnVlP2Q0YjkiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9FbGVtZW50SW5Hcm91cC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0VsZW1lbnRJbkdyb3VwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvR3JvdXBCbG9jay52dWU/YzA1OSIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0dyb3VwQmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9Hcm91cEJsb2NrLnZ1ZT9mYTcxIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9EYXRlVGltZUJsb2NrLnZ1ZT9hNzYyIiwid2VicGFjazovLy9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvRGF0ZVRpbWVCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0RhdGVUaW1lQmxvY2sudnVlP2Q4MDciLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0RhdGVUaW1lQmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9EYXRlQmxvY2sudnVlPzQ5NjEiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9EYXRlQmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9EYXRlQmxvY2sudnVlP2FhMTAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0RhdGVCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0RhdGVNdWx0aXBsZUJsb2NrLnZ1ZT8xNTY0Iiwid2VicGFjazovLy9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvRGF0ZU11bHRpcGxlQmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9EYXRlTXVsdGlwbGVCbG9jay52dWU/YmU5MyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvRGF0ZU11bHRpcGxlQmxvY2sudnVlPzQ5OWEiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ZpbGVCbG9jay52dWU/ZTFiYyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ZpbGVCbG9jay52dWU/ZGVkNCIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ZpbGVCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ZpbGVCbG9jay52dWU/YTQ2MSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQWRkcmVzc0Jsb2NrLnZ1ZT8xNWQyIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9NaXhpbnMvZm9ybUxpc3RNaXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQWRkcmVzc0Jsb2NrLnZ1ZT83OGQzIiwid2VicGFjazovLy9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQWRkcmVzc0Jsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQWRkcmVzc0Jsb2NrLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQmFkZ2VCbG9jay52dWU/NmNhNCIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0JhZGdlQmxvY2sudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9CYWRnZUJsb2NrLnZ1ZT8yNjQ3Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9CYWRnZUJsb2NrLnZ1ZT8zOWM0Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9JbmZvcm1hdGlvbkZvcm0udnVlPzkyMjYiLCJ3ZWJwYWNrOi8vL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9JbmZvcm1hdGlvbkZvcm0udnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9JbmZvcm1hdGlvbkZvcm0udnVlPzdlZWYiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0luZm9ybWF0aW9uRm9ybS52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1J1YnJpY2F0b3JCbG9jay52dWU/NTVkOCIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1J1YnJpY2F0b3JCbG9jay52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1J1YnJpY2F0b3JCbG9jay52dWU/MTNiNSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvUnVicmljYXRvckJsb2NrLnZ1ZT83YjQxIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9FbGVtZW50LnZ1ZT9lZDAzIiwid2VicGFjazovLy9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvRWxlbWVudC52dWUiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0VsZW1lbnQudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Hcm91cC52dWU/YWQ2MSIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0dyb3VwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvR3JvdXAudnVlPzlhNTIiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0dyb3VwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvQ29tcHV0ZWRFbC52dWU/MzhkNSIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0NvbXB1dGVkRWwudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Db21wdXRlZEVsLnZ1ZT8yY2Y2Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Db21wdXRlZEVsLnZ1ZSIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9EeW5hbWljRm9ybUFwcC52dWU/OTI2YSIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRHluYW1pY0Zvcm1BcHAudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0R5bmFtaWNGb3JtQXBwLnZ1ZT81M2Y0Iiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2R5bmFtaWMtZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ29tcG9uZW50cy9SdWJyaWNhdG9yRWxlbWVudC52dWU/OTU3ZiIsIndlYnBhY2s6Ly8vYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0NvbXBvbmVudHMvUnVicmljYXRvckVsZW1lbnQudnVlIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9Db21wb25lbnRzL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZT83YjVkIiwid2VicGFjazovLy8uL2Fzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9Db21wb25lbnRzL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZT9kM2QwIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm9ybWF0LXBhcnNlL2VzL3V0aWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RhdGUtZm9ybWF0LXBhcnNlL2VzL2xvY2FsZS9lbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGF0ZS1mb3JtYXQtcGFyc2UvZXMvZm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kYXRlLWZvcm1hdC1wYXJzZS9lcy9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlMi1kYXRlcGlja2VyL2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdnVlMi1kYXRlcGlja2VyL2xvY2FsZS9ydS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXRpbHMiLCJzZXR0bGUiLCJjb29raWVzIiwiYnVpbGRVUkwiLCJidWlsZEZ1bGxQYXRoIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJjb25maWciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3REYXRhIiwiZGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiaGVhZGVycyIsImlzRm9ybURhdGEiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiQXV0aG9yaXphdGlvbiIsImJ0b2EiLCJmdWxsUGF0aCIsImJhc2VVUkwiLCJ1cmwiLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInhzcmZDb29raWVOYW1lIiwicmVhZCIsInVuZGVmaW5lZCIsInhzcmZIZWFkZXJOYW1lIiwiZm9yRWFjaCIsInZhbCIsImtleSIsInRvTG93ZXJDYXNlIiwic2V0UmVxdWVzdEhlYWRlciIsImlzVW5kZWZpbmVkIiwiZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsImJpbmQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwiZXh0ZW5kIiwiYXhpb3MiLCJjcmVhdGUiLCJpbnN0YW5jZUNvbmZpZyIsImRlZmF1bHRzIiwiQ2FuY2VsIiwiQ2FuY2VsVG9rZW4iLCJpc0NhbmNlbCIsImFsbCIsInByb21pc2VzIiwic3ByZWFkIiwiaXNBeGlvc0Vycm9yIiwiZGVmYXVsdCIsIm1lc3NhZ2UiLCJ0aGlzIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwiZXhlY3V0b3IiLCJUeXBlRXJyb3IiLCJyZXNvbHZlUHJvbWlzZSIsInRva2VuIiwicmVhc29uIiwidGhyb3dJZlJlcXVlc3RlZCIsInNvdXJjZSIsImMiLCJ2YWx1ZSIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImludGVyY2VwdG9ycyIsImFyZ3VtZW50cyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJ1bnNoaWZ0IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJwdXNoIiwibGVuZ3RoIiwic2hpZnQiLCJnZXRVcmkiLCJyZXBsYWNlIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImlkIiwiZm4iLCJoIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwicmVxdWVzdGVkVVJMIiwiZW5oYW5jZUVycm9yIiwiY29kZSIsImVycm9yIiwiRXJyb3IiLCJ0cmFuc2Zvcm1EYXRhIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsInRyYW5zZm9ybVJlcXVlc3QiLCJtZXJnZSIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInRvSlNPTiIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsIm51bWJlciIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImNvbHVtbk51bWJlciIsInN0YWNrIiwiY29uZmlnMSIsImNvbmZpZzIiLCJ2YWx1ZUZyb21Db25maWcyS2V5cyIsIm1lcmdlRGVlcFByb3BlcnRpZXNLZXlzIiwiZGVmYXVsdFRvQ29uZmlnMktleXMiLCJkaXJlY3RNZXJnZUtleXMiLCJnZXRNZXJnZWRWYWx1ZSIsInRhcmdldCIsImlzUGxhaW5PYmplY3QiLCJpc0FycmF5Iiwic2xpY2UiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwicHJvcCIsImF4aW9zS2V5cyIsImNvbmNhdCIsIm90aGVyS2V5cyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJ2YWxpZGF0ZVN0YXR1cyIsImZucyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsInByb2Nlc3MiLCJjYWxsIiwiaXNBcnJheUJ1ZmZlciIsImlzQnVmZmVyIiwiaXNTdHJlYW0iLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0FycmF5QnVmZmVyVmlldyIsImJ1ZmZlciIsImlzVVJMU2VhcmNoUGFyYW1zIiwiaXNPYmplY3QiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJtYXhDb250ZW50TGVuZ3RoIiwibWF4Qm9keUxlbmd0aCIsInRoaXNBcmciLCJhcmdzIiwiQXJyYXkiLCJpIiwiYXBwbHkiLCJlbmNvZGUiLCJzZXJpYWxpemVkUGFyYW1zIiwicGFydHMiLCJ2IiwiaXNEYXRlIiwidG9JU09TdHJpbmciLCJqb2luIiwiaGFzaG1hcmtJbmRleCIsInJlbGF0aXZlVVJMIiwid3JpdGUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImlzTnVtYmVyIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwiaXNTdHJpbmciLCJkb2N1bWVudCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93IiwidGVzdCIsInBheWxvYWQiLCJvcmlnaW5VUkwiLCJtc2llIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidXJsUGFyc2luZ05vZGUiLCJjcmVhdGVFbGVtZW50IiwicmVzb2x2ZVVSTCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJjaGFyQXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCJub3JtYWxpemVkTmFtZSIsImlnbm9yZUR1cGxpY2F0ZU9mIiwic3BsaXQiLCJsaW5lIiwidHJpbSIsInN1YnN0ciIsImNhbGxiYWNrIiwiYXJyIiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Z1bmN0aW9uIiwib2JqIiwibCIsImhhc093blByb3BlcnR5IiwiY29uc3RydWN0b3IiLCJGb3JtRGF0YSIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwicGlwZSIsIlVSTFNlYXJjaFBhcmFtcyIsInByb2R1Y3QiLCJyZXN1bHQiLCJhc3NpZ25WYWx1ZSIsImEiLCJiIiwic3RyIiwic3RyaXBCT00iLCJjb250ZW50IiwiY2hhckNvZGVBdCIsImZvcm1hdFdpdGhTZXBhcmF0b3JzIiwiZXZlbnRCdXMiLCJWdWUiLCJtZXRob2RzIiwidmFsaWRhdGUiLCIkZW1pdCIsInNob3dFcnJvcnMiLCJyZW5kZXIiLCJfdm0iLCJfaCIsIiRjcmVhdGVFbGVtZW50IiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwiX3YiLCJfcyIsInRpdGxlIiwiZGljdCIsImNvbnRyYWN0SW5mbyIsInN0YW5kTnVtYmVyIiwiaGFsbCIsInN0YW5kU3F1YXJlIiwiX2wiLCJlbGVtZW50cyIsImVsZW0iLCJpc0dyb3VwIiwiX2UiLCJhdHRycyIsInVuaXREYXRhIiwibGFuZyIsImxhbmd1YWdlIiwiZGljIiwib24iLCJtb2RpZmljYXRpb24iLCJmaWVsZHNNb2RpZmljYXRlIiwiZmllbGRzIiwiZ2V0RmllbGROYW1lIiwibmFtZV9lbmciLCJkaXJlY3RpdmVzIiwicmF3TmFtZSIsImlzRmlsZVVwbG9hZCIsImV4cHJlc3Npb24iLCJmaWxlQXR0YWNoIiwiYXR0YWNoRmlsZSIsInJlZiIsInR5cGUiLCJjaGFuZ2UiLCJmaWxlTG9hZCIsImJyb3dzZSIsImZvciIsImhhc0ZpbGUiLCJhdHRhY2hlZEZpbGUiLCJzaG93TGltaXRTaXplT2ZGaWxlTXNnIiwibGltaXRTaXplTWVzc2FnZSIsImlzQ29tcHV0ZWQiLCJ0b3RhbCIsInRvdGFsUHJpY2UiLCJpc1JlYWRPbmx5IiwiY2xpY2siLCJzYXZlRHJhZnQiLCJidXR0b25zIiwiZHJhZnQiLCJmb3JtU3VibWl0IiwiY2xvc2UiLCJfd2l0aFN0cmlwcGVkIiwiY3VycmVudEVsZW1lbnQiLCJ0YWciLCJjaGFuZ2VGaWVsZCIsImZpZWxkQ2hhbmdlZCIsImRvbVByb3BzIiwiaW5uZXJIVE1MIiwidW5pdE1peGluIiwicHJvcHMiLCJwYXJhbWV0ZXJzIiwidW5pdCIsInVuaXROYW1lIiwiY29tcHV0ZWQiLCJyZXF1aXJlZCIsInBhcnNlSW50IiwibGFuZ3VhZ2VzIiwiY29tcG9uZW50Iiwib3B0aW9ucyIsIl9fZmlsZSIsImhlYWRlciIsImRlc2MiLCJjaGVja2VkIiwiX2kiLCIkZXZlbnQiLCIkJGEiLCIkJGVsIiwiJCRjIiwiJCRpIiwidGl0bGVMYWJlbCIsImxhYmVsTWl4aW4iLCJkZXNjcmlwdGlvbkxhYmVsIiwiZGVzY3JpcHRpb25fZW5nIiwiY29tcHV0ZWRNaXhpbiIsImJhc2VQcmljZSIsInVuaXRQcmljZSIsImNsYXNzIiwiaGFzRXJyb3JzRm9yU2hvdyIsInBsYWNlaG9sZGVyIiwib25DaGFuZ2UiLCJpbnB1dCIsImNvbXBvc2luZyIsImVycm9ycyIsInZhbHV0ZSIsIl9mIiwiY3VycmVudEVycm9yIiwibnVtYmVyRm9ybWF0TWl4aW4iLCJmaWx0ZXJzIiwic2VwYXJhdGUiLCJzZWxlY3RlZCIsIiQkc2VsZWN0ZWRWYWwiLCJvIiwibWFwIiwiX3ZhbHVlIiwibXVsdGlwbGUiLCJlbnVtcyIsImVsZW1lbnQiLCJnZXROYW1lIiwic2VsZWN0TWl4aW4iLCJlbnVtc0xpc3QiLCJ0ZXh0VHJhbnNsYXRlTWl4aW4iLCJ2YWxFbmciLCJmcmllemVGaWVsZFR5cGUiLCJjb2xzIiwicm93cyIsImlzUGFpZCIsImFkZFN5bWJvbHMiLCJwYWllZEZyaXplU2lnbnMiLCJzeW1ib2wiLCJmcml6ZURpZ2l0UHJpY2UiLCJmcml6ZVByaWNlIiwiX20iLCJfcSIsImNhdGVnb3JpZXMiLCJjYXRlZ29yeSIsImluZGV4IiwiaXNTaG93ZWQiLCJleHBhbmQiLCJ2YWx1ZXMiLCJmaWVsZElkIiwiYnVzIiwiY2hhbmdlVmFsdWUiLCJzZXRWYWx1ZSIsImNvdW50Iiwic2hvcnRfbmFtZSIsInNob3J0X25hbWVfZW5nIiwicHJpY2UiLCJjb2xzcGFuIiwidG90YWxNc2ciLCJlcXVpcG1lbnRzIiwiZXF1aXBtZW50IiwiZ2V0SWQiLCJpbnB1dHMiLCJzZXRWYWwiLCIkc2V0IiwiZ2V0VG90YWxQcmljZSIsInNob3dUaXRsZSIsImlucHV0QXR0ciIsImRhdGVBdHRyaWJ1dGVzIiwiaW5wdXRDbGFzcyIsImZvcm1hdCIsIm1vZGVsIiwiJCR2IiwiZGF0ZSIsImFkZCIsImlzRmlsZUV4aXN0IiwiZmlsZVVybCIsInJlbW92ZUZpbGUiLCJpc0ZpbGVTZWxlY3QiLCJyZWFkb25seSIsInNlbGVjdGVkRmlsZSIsImNhbmNlbFVwbG9hZCIsImFjY2VwdCIsIm1pbWVGaWx0ZXIiLCJBVFRBQ0hNRU5UX0FUVFJJQlVURSIsImZvcm1FbGVtZW50cyIsIml0ZW0iLCJibG9ja3NDb3VudCIsInJlbW92ZUl0ZW0iLCJjb3VudHJ5IiwiYXJlYSIsImNpdHkiLCJhZGRyZXNzIiwiYWRkRm9ybUJsb2NrIiwiZm9ybUxpc3QiLCJjcmVhdGVkIiwiYmFkZ2VfaW5mbyIsIm1pZGRsZU5hbWUiLCJtaWRkbGVfbmFtZSIsInN1ck5hbWUiLCJzdXJuYW1lIiwiY29tcGFueSIsImRlZmF1bHRFbGVtZW50IiwiZ2V0RGF0YSIsInZhbGlkIiwiZnJlZUNvdW50IiwiaXNOYU4iLCJzcGxpY2UiLCJldmVudCIsInNpdGUiLCJlbWFpbCIsInBob25lIiwiaXNBY3RpdmUiLCJhY3RpdmUiLCJydWJyaWNzIiwiY2hpbGRyZW4iLCJydWJyaWMiLCJydWJyaWNzSW5DYXRhbG9nIiwiZWwiLCJyZW1vdmVSdWJyaWMiLCJ3aWR0aCIsInRvdGFsSGVhZCIsImFwcFJvb3RFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJkYXRhc2V0IiwicmVhZE9ubHkiLCJjb250cmFjdElkIiwiY29uc29sZSIsImxvZyIsIkR5bmFtaWNGb3JtQXBwIiwicnVicmljX19jaGVja2VkIiwiaXNDaGVja2VkIiwiaGFzQ2hpbGRyZW4iLCJhZGRSdWJyaWMiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwic3RhdGljUmVuZGVyRm5zIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiaG9vayIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsIiR2bm9kZSIsInNzckNvbnRleHQiLCJwYXJlbnQiLCJfX1ZVRV9TU1JfQ09OVEVYVF9fIiwiX3JlZ2lzdGVyZWRDb21wb25lbnRzIiwiX3NzclJlZ2lzdGVyIiwiJHJvb3QiLCIkb3B0aW9ucyIsInNoYWRvd1Jvb3QiLCJfaW5qZWN0U3R5bGVzIiwib3JpZ2luYWxSZW5kZXIiLCJleGlzdGluZyIsImJlZm9yZUNyZWF0ZSIsInRvRGF0ZSIsImdldFRpbWUiLCJOYU4iLCJpc1ZhbGlkRGF0ZSIsInN0YXJ0T2ZXZWVrIiwiZmlyc3REYXlPZldlZWsiLCJSYW5nZUVycm9yIiwiZGF5IiwiZ2V0RGF5IiwiZGlmZiIsInNldERhdGUiLCJnZXREYXRlIiwic2V0SG91cnMiLCJzdGFydE9mV2Vla1llYXIiLCJfcmVmIiwiX3JlZiRmaXJzdERheU9mV2VlayIsIl9yZWYkZmlyc3RXZWVrQ29udGFpbiIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsInllYXIiLCJnZXRGdWxsWWVhciIsImZpcnN0RGF0ZU9mRmlyc3RXZWVrIiwic2V0RnVsbFllYXIiLCJnZXRXZWVrIiwiX3JlZjIiLCJfcmVmMiRmaXJzdERheU9mV2VlayIsIl9yZWYyJGZpcnN0V2Vla0NvbnRhaSIsImZpcnN0RGF0ZU9mVGhpc1dlZWsiLCJNYXRoIiwicm91bmQiLCJtb250aHMiLCJtb250aHNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTWluIiwiUkVHRVhfRk9STUFUIiwicGFkIiwibGVuIiwib3V0cHV0IiwiYWJzIiwic2lnbiIsImdldE9mZnNldCIsImdldFRpbWV6b25lT2Zmc2V0IiwiZm9ybWF0VGltZXpvbmUiLCJvZmZzZXQiLCJkZWxpbWV0ZXIiLCJhYnNPZmZzZXQiLCJob3VycyIsImZsb29yIiwibWludXRlcyIsIm1lcmlkaWVtIiwiXyIsImlzTG93ZXJjYXNlIiwid29yZCIsInRvTG9jYWxlTG93ZXJDYXNlIiwiZm9ybWF0RmxhZ3MiLCJZIiwieSIsIllZIiwiWVlZWSIsIk0iLCJnZXRNb250aCIsIk1NIiwiTU1NIiwibG9jYWxlIiwiTU1NTSIsIkQiLCJERCIsIkgiLCJnZXRIb3VycyIsIkhIIiwiaGgiLCJtIiwiZ2V0TWludXRlcyIsIm1tIiwicyIsImdldFNlY29uZHMiLCJzcyIsIlMiLCJnZXRNaWxsaXNlY29uZHMiLCJTUyIsIlNTUyIsImQiLCJkZCIsImRkZCIsImRkZGQiLCJBIiwiWiIsIlpaIiwiWCIsIngiLCJ3Iiwid3ciLCJmb3JtYXRTdHIiLCJTdHJpbmciLCJwMSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJpdGVyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJmcm9tIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIm93bktleXMiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiX29iamVjdFNwcmVhZCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImZvcm1hdHRpbmdUb2tlbnMiLCJtYXRjaDEiLCJtYXRjaDIiLCJtYXRjaDF0bzIiLCJtYXRjaFNpZ25lZCIsIllFQVIiLCJNT05USCIsIkhPVVIiLCJNSU5VVEUiLCJTRUNPTkQiLCJNSUxMSVNFQ09ORCIsInBhcnNlRmxhZ3MiLCJhZGRQYXJzZUZsYWciLCJyZWdleCIsImZ1bmMiLCJ0b2tlbnMiLCJlc2NhcGVTdHJpbmdSZWdFeHAiLCJtYXRjaFdvcmRSZWdFeHAiLCJsb2NhbGVLZXkiLCJhcnJheSIsIm1hdGNoV29yZENhbGxiYWNrIiwidG8yNGhvdXIiLCJob3VyIiwiaXNQTSIsImdldEZ1bGxJbnB1dEFycmF5IiwiYmFja3VwRGF0ZSIsImJhY2t1cEFyciIsInVzZUJhY2t1cCIsImNyZWF0ZURhdGUiLCJtcyIsImlzRmluaXRlIiwiY3JlYXRlVVRDRGF0ZSIsIl9sZW4iLCJfa2V5IiwiVVRDIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsIm1ha2VQYXJzZXIiLCJkYXRlU3RyaW5nIiwibWFyayIsInBhcnNlVG8iLCJwYXJzZXIiLCJleGVjIiwiX3R5cGVvZiIsIl9leHRlbmRzIiwiYXNzaWduIiwiX29iamVjdFNwcmVhZDIiLCJfYXJyIiwiX24iLCJfZCIsIm5leHQiLCJkb25lIiwiZXJyIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX2V4dGVuZHMkMSIsImNlbnQiLCJtZXJpZGllbVBhcnNlIiwiZGVmYXVsdElzUE0iLCJfcmVmOSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl9ub25JdGVyYWJsZVJlc3QiLCJtaW51dGUiLCJwYXJzZUZsb2F0Iiwibm9ybWFsTWVyZ2UiLCJ0b0FycmF5TWVyZ2UiLCJmdW5jdGlvbmFsTWVyZ2UiLCJtZXJnZUZuIiwiaGVscGVyIiwicmVkdWNlIiwiZiIsImciLCJpc1ZhbGlkUmFuZ2VEYXRlIiwiZXZlcnkiLCJnZXRWYWxpZERhdGUiLCJiYWNrdXAiLCJzdGFydE9mWWVhciIsInNldE1vbnRoIiwic3RhcnRPZk1vbnRoIiwic3RhcnRPZkRheSIsImRpcnR5RGF0ZSIsImRpcnR5TW9udGgiLCJtb250aCIsIk51bWJlciIsImRheXNJbk1vbnRoIiwibWluIiwic2V0WWVhciIsImRpcnR5WWVhciIsImFzc2lnblRpbWUiLCJ0aW1lIiwiY2h1bmsiLCJzaXplIiwicGljayIsInJlcyIsIm1lcmdlRGVlcCIsImZvcm1hdExvY2FsZSIsIl9fZXNNb2R1bGUiLCJ5ZWFyRm9ybWF0IiwibW9udGhGb3JtYXQiLCJtb250aEJlZm9yZVllYXIiLCJkZWZhdWx0TG9jYWxlIiwibG9jYWxlcyIsImlzTG9jYWwiLCJnZXRMb2NhbGUiLCJnZXRTY3JvbGxQYXJlbnQiLCJub2RlIiwidW50aWwiLCJib2R5Iiwic3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInNjcm9sbCIsInBhcmVudE5vZGUiLCJ0ZW1wbGF0ZSIsInNjcmlwdCIsImlzRnVuY3Rpb25hbFRlbXBsYXRlIiwiY3JlYXRlSW5qZWN0b3IiLCJjcmVhdGVJbmplY3RvclNTUiIsImNyZWF0ZUluamVjdG9yU2hhZG93Iiwic2Nyb2xsQmFyV2lkdGgiLCJfX3Z1ZV9jb21wb25lbnRfXyIsInByZWZpeENsYXNzIiwidmlzaWJsZSIsInRvcCIsImxlZnQiLCJwb3NpdGlvbiIsIl90IiwiaW5qZWN0IiwiQm9vbGVhbiIsImFwcGVuZFRvQm9keSIsIndhdGNoIiwiaW1tZWRpYXRlIiwiaGFuZGxlciIsIl90aGlzIiwiJG5leHRUaWNrIiwiZGlzcGxheVBvcHVwIiwibW91bnRlZCIsIl90aGlzMiIsImFwcGVuZENoaWxkIiwiJGVsIiwiX2NsaWNrb3V0RXZlbnQiLCJoYW5kbGVDbGlja091dHNpZGUiLCJpc1J1bm5pbmciLCJyZWxhdGl2ZUVsZW1lbnQiLCIkcGFyZW50IiwiX2Rpc3BsYXlQb3B1cCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9zY3JvbGxQYXJlbnQiLCJiZWZvcmVEZXN0cm95IiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXZ0IiwiY29udGFpbnMiLCJwb3B1cCIsIl9wb3B1cFJlY3QiLCJvcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5Iiwib3JpZ2luYWxWaXNpYmlsaXR5IiwidmlzaWJpbGl0eSIsInN0eWxlcyIsIm9mZnNldFdpZHRoIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwiZ2V0UG9wdXBFbGVtZW50U2l6ZSIsIl90aGlzJF9wb3B1cFJlY3QiLCJfZ2V0UmVsYXRpdmVQb3NpdGlvbiIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiZml4ZWQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInJlbGF0aXZlUmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImR3IiwiZG9jdW1lbnRFbGVtZW50IiwiY2xpZW50V2lkdGgiLCJkaCIsImNsaWVudEhlaWdodCIsInBhZ2VYT2Zmc2V0IiwicGFnZVlPZmZzZXQiLCJyaWdodCIsImJvdHRvbSIsImdldFJlbGF0aXZlUG9zaXRpb24iLCJfX3Z1ZV9jb21wb25lbnRfXyQxIiwiX192dWVfY29tcG9uZW50X18kMiIsIl9fdnVlX2NvbXBvbmVudF9fJDMiLCJfX3Z1ZV9jb21wb25lbnRfXyQ0IiwiX2ciLCJkaXNhYmxlZCIsIiRsaXN0ZW5lcnMiLCJfX3Z1ZV9jb21wb25lbnRfXyQ1IiwiaXNEaXNhYmxlZEFycm93cyIsImhhbmRsZUljb25Eb3VibGVMZWZ0Q2xpY2siLCJoYW5kbGVJY29uTGVmdENsaWNrIiwiaGFuZGxlSWNvbkRvdWJsZVJpZ2h0Q2xpY2siLCJoYW5kbGVJY29uUmlnaHRDbGljayIsInllYXJNb250aCIsInBhbmVsIiwiaGFuZGxlUGFuZWxDaGFuZ2UiLCJsYWJlbCIsInNob3dXZWVrTnVtYmVyIiwiZGF5cyIsImhhbmRsZUNlbGxDbGljayIsImRhdGVzIiwicm93IiwiZ2V0Um93Q2xhc3NlcyIsImdldFdlZWtOdW1iZXIiLCJjZWxsIiwiaiIsImdldENlbGxDbGFzc2VzIiwiZ2V0Q2VsbFRpdGxlIiwiaGFuZGxlTW91c2VFbnRlciIsImhhbmRsZU1vdXNlTGVhdmUiLCJjb21wb25lbnRzIiwiSWNvbkJ1dHRvbiIsIm9uRGF0ZU1vdXNlRW50ZXIiLCJvbkRhdGVNb3VzZUxlYXZlIiwiZGlzYWJsZWRDYWxlbmRhckNoYW5nZXIiLCJGdW5jdGlvbiIsImNhbGVuZGFyIiwidGl0bGVGb3JtYXQiLCJfdGhpcyRnZXRMb2NhbGUiLCJfdGhpcyRnZXRMb2NhbGUkbW9udGgiLCJ5ZWFyTGFiZWwiLCJmb3JtYXREYXRlIiwibW9udGhMYWJlbCIsImxhc3REYXlJbkxhc3RNb250aCIsImZpcnN0RGF5SW5MYXN0TW9udGgiLCJsYXN0RGF5SW5DdXJyZW50TW9udGgiLCJuZXh0TW9udGhMZW5ndGgiLCJfaTIiLCJnZXRDYWxlbmRhciIsInRhZ05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJfaW5kZXgkc3BsaXQkbWFwMiIsImNvbCIsImZtdCIsIl9fdnVlX2NvbXBvbmVudF9fJDYiLCJjYWxlbmRhclllYXIiLCJoYW5kbGVDbGljayIsInRleHQiLCJjbGFzc0xpc3QiLCJfX3Z1ZV9jb21wb25lbnRfXyQ3IiwiZmlyc3RZZWFyIiwibGFzdFllYXIiLCJ5ZWFycyIsImdldFllYXJQYW5lbCIsImdldFllYXJzIiwibGFzdCIsIkNhbGVuZGFyUGFuZWwiLCJkaXNwYXRjaERhdGVQaWNrZXIiLCJkZWZhdWx0VmFsdWUiLCJkZWZhdWx0UGFuZWwiLCJkaXNhYmxlZERhdGUiLCJnZXRDbGFzc2VzIiwicGFydGlhbFVwZGF0ZSIsInBhbmVscyIsIm1heCIsImlubmVyQ2FsZW5kYXIiLCJpbm5lclZhbHVlIiwic3RhcnQiLCJjYWxlbmRhck1vbnRoIiwiaW5pdENhbGVuZGFyIiwiY2FsZW5kYXJEYXRlIiwiaXNEaXNhYmxlZCIsImVtaXREYXRlIiwiaGFuZGxlQ2FsZW5kYXJDaGFuZ2UiLCJvbGRDYWxlbmRhciIsImhhbmRlbFBhbmVsQ2hhbmdlIiwib2xkUGFuZWwiLCJoYW5kbGVTZWxlY3RZZWFyIiwiZ2V0WWVhckNlbGxEYXRlIiwiX2RhdGUiLCJoYW5kbGVTZWxlY3RNb250aCIsImdldE1vbnRoQ2VsbERhdGUiLCJfZGF0ZTIiLCJoYW5kbGVTZWxlY3REYXRlIiwiZ2V0RGF0ZUNsYXNzZXMiLCJjZWxsRGF0ZSIsIm5vdEN1cnJlbnRNb250aCIsImNsYXNzZXMiLCJzdGF0ZSIsImdldFN0YXRlQ2xhc3MiLCJnZXRNb250aENsYXNzZXMiLCJfY2VsbERhdGUiLCJnZXRZZWFyQ2xhc3NlcyIsIl9jZWxsRGF0ZTIiLCJzb21lIiwiZ2V0V2Vla1N0YXRlIiwiZW5kIiwiQ2FsZW5kYXJSYW5nZSIsInByb3ZpZGUiLCJjYWxlbmRhcnMiLCJob3ZlcmVkVmFsdWUiLCJjYWxlbmRhck1pbkRpZmYiLCJjYWxlbmRhck1heERpZmYiLCJJbmZpbml0eSIsImRlZmF1bHRWYWx1ZXMiLCJ1cGRhdGVDYWxlbmRhcnMiLCJoYW5kbGVTZWxlY3QiLCJfdGhpcyRpbm5lclZhbHVlIiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwidXBkYXRlU3RhcnRDYWxlbmRhciIsInVwZGF0ZUVuZENhbGVuZGFyIiwiYWRqdXN0SW5kZXgiLCJnYXAiLCJnZXRDYWxlbmRhckdhcCIsIl9jYWxlbmRhcnMiLCJjYWxlbmRhckxlZnQiLCJjYWxlbmRhclJpZ2h0IiwiZ2V0UmFuZ2VDbGFzc2VzIiwiY3VycmVudERhdGVzIiwiY2xhc3NuYW1lcyIsImluUmFuZ2UiLCJyYW5nZSIsIl9yYW5nZSRtYXAiLCJfcmFuZ2UkbWFwMiIsImNhbGVuZGFyUmFuZ2UiLCIkcHJvcHMiLCJzZWxlY3QiLCJfX3Z1ZV9jb21wb25lbnRfXyQ4Iiwib3ZlcmZsb3ciLCJzY3JvbGxiYXJXaWR0aCIsImhhbmRsZVNjcm9sbCIsInRodW1iSGVpZ2h0IiwidGh1bWJUb3AiLCJoYW5kbGVEcmFnc3RhcnQiLCJvdXRlciIsImlubmVyIiwiZ2V0U2Nyb2xsYmFyV2lkdGgiLCJoYW5kbGVEcmFnZW5kIiwiZ2V0VGh1bWJTaXplIiwid3JhcCIsIiRyZWZzIiwiaGVpZ2h0UGVyY2VudGFnZSIsInNjcm9sbEhlaWdodCIsImN1cnJlbnRUYXJnZXQiLCJzY3JvbGxUb3AiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJfZHJhZ2dhYmxlIiwib2Zmc2V0VG9wIiwidGh1bWIiLCJfcHJldlkiLCJjbGllbnRZIiwiaGFuZGxlRHJhZ2luZyIsInBhZE51bWJlciIsImdlbmVyYXRlT3B0aW9ucyIsInN0ZXAiLCJzY3JvbGxUbyIsInRvIiwiZHVyYXRpb24iLCJkaWZmZXJlbmNlIiwidGljayIsIl9fdnVlX2NvbXBvbmVudF9fJDkiLCJjb2x1bW5zIiwibGlzdCIsIlNjcm9sbGJhclZlcnRpY2FsIiwic2Nyb2xsRHVyYXRpb24iLCJob3VyT3B0aW9ucyIsIm1pbnV0ZU9wdGlvbnMiLCJzZWNvbmRPcHRpb25zIiwic2hvd0hvdXIiLCJzaG93TWludXRlIiwic2hvd1NlY29uZCIsImhvdXJTdGVwIiwibWludXRlU3RlcCIsInNlY29uZFN0ZXAiLCJ1c2UxMmgiLCJnZXRIb3Vyc0xpc3QiLCJnZXRNaW51dGVzTGlzdCIsImdldFNlY29uZHNMaXN0IiwiZ2V0QU1QTUxpc3QiLCJzY3JvbGxUb1NlbGVjdGVkIiwibnVtIiwiX3RoaXMzIiwic2V0TWludXRlcyIsIl90aGlzNCIsInNldFNlY29uZHMiLCJfdGhpczUiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2Nyb2xsRWxlbWVudCIsImNvbEluZGV4IiwiY2VsbEluZGV4IiwicGFyc2VPcHRpb24iLCJfX3Z1ZV9jb21wb25lbnRfXyRhIiwic3RhcnRNaW51dGVzIiwiZW5kTWludXRlcyIsInN0ZXBNaW51dGVzIiwidGltZU1pbnV0ZXMiLCJxdWVyeVNlbGVjdG9yIiwic2Nyb2xsVG8kMSIsIl9fdnVlX2NvbXBvbmVudF9fJGIiLCJzaG93VGltZUhlYWRlciIsImhhbmRsZUNsaWNrVGl0bGUiLCJ0aW1lUGlja2VyT3B0aW9ucyIsImlubmVyRm9yYW10IiwiX2IiLCJTaG93SG91ck1pbnV0ZVNlY29uZEFNUE0iLCJMaXN0Q29sdW1ucyIsIkxpc3RPcHRpb25zIiwidGltZVRpdGxlRm9ybWF0IiwiZGlzYWJsZWRUaW1lIiwiZGVmYXVsdFByb3BzIiwiaXNEaXNhYmxlZFRpbWUiLCJpc0Rpc2FibGVkSG91ciIsImlzRGlzYWJsZWRNaW51dGUiLCJpc0Rpc2FibGVkQU1QTSIsIm1pbkhvdXIiLCJtYXhIb3VyIiwiVGltZVJhbmdlIiwiX3RoaXMkdmFsdWUiLCJlbWl0Q2hhbmdlIiwiaGFuZGxlU2VsZWN0U3RhcnQiLCJoYW5kbGVTZWxlY3RFbmQiLCJkaXNhYmxlZFN0YXJ0VGltZSIsImRpc2FibGVkRW5kVGltZSIsIkRhdGV0aW1lUGFuZWwiLCJlbWl0cyIsInNob3dUaW1lUGFuZWwiLCJkZWZhdWx0VGltZVZpc2libGUiLCJjdXJyZW50VmFsdWUiLCJ0aW1lVmlzaWJsZSIsImNsb3NlVGltZVBhbmVsIiwib3BlblRpbWVQYW5lbCIsImRhdGV0aW1lIiwiY2FsZW5kYXJQcm9wcyIsInRpbWVQcm9wcyIsImNsaWNrdGl0bGUiLCJEYXRldGltZVJhbmdlIiwiZGF0ZXRpbWVzIiwiY29tcG9uZW50TWFwIiwiY29tcG9uZW50UmFuZ2VNYXAiLCJEYXRlUGlja2VyIiwidmFsdWVUeXBlIiwiZm9ybWF0dGVyIiwicmFuZ2VTZXBhcmF0b3IiLCJlZGl0YWJsZSIsImNsZWFyYWJsZSIsInBvcHVwQ2xhc3MiLCJwb3B1cFN0eWxlIiwiaW5saW5lIiwiY29uZmlybSIsImNvbmZpcm1UZXh0IiwicmVuZGVySW5wdXRUZXh0Iiwic2hvcnRjdXRzIiwidmFsaWRhdG9yIiwib25DbGljayIsInVzZXJJbnB1dCIsImRlZmF1bHRPcGVuIiwicG9wdXBWaXNpYmxlIiwiaW5uZXJSYW5nZVNlcGFyYXRvciIsImlubmVyRm9ybWF0Iiwid2VlayIsInZhbGlkTXVsdGlwbGVUeXBlIiwidmFsdWUyZGF0ZSIsImlzVmFsaWRWYWx1ZSIsInNob3dDbGVhckljb24iLCJ3YXJuIiwiaGFuZGxlQ2xpY2tPdXRTaWRlIiwiY2xvc2VQb3B1cCIsImdldEZvcm1hdHRlciIsInBhcnNlRGF0ZSIsIl9vcHRpb25zJGxvY2FsZSIsIl9sb2NhbGUiLCJfb3B0aW9ucyRiYWNrdXBEYXRlIiwicGFyc2VSZXN1bHQiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsIndlZWtkYXkiLCJwYXJzZWREYXRlIiwiaW5wdXRBcnJheSIsImZpcnN0RGF0ZSIsImRhdGUydmFsdWUiLCJlbWl0VmFsdWUiLCJpc1ZhbGlkVmFsdWVBbmROb3REaXNhYmxlZCIsImhhbmRsZU11bHRpcGxlRGF0ZXMiLCJuZXh0RGF0ZXMiLCJjbGVhciIsImhhbmRsZUNsZWFyIiwic3RvcFByb3BhZ2F0aW9uIiwiaGFuZGxlQ29uZmlybURhdGUiLCJoYW5kbGVTZWxlY3RTaG9ydGN1dCIsIm9wZW5Qb3B1cCIsImJsdXIiLCJmb2N1cyIsImhhbmRsZUlucHV0Q2hhbmdlIiwiaGFuZGxlSW5wdXRJbnB1dCIsImhhbmRsZUlucHV0S2V5ZG93biIsImtleUNvZGUiLCJoYW5kbGVJbnB1dEJsdXIiLCJoYW5kbGVJbnB1dEZvY3VzIiwiaGFzU2xvdCIsIiRzbG90cyIsIiRzY29wZWRTbG90cyIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsInNsb3RGbiIsInJlbmRlcklucHV0IiwiYXV0b2NvbXBsZXRlIiwiY2xhc3NOYW1lIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJzb3VyY2VTeW1ib2xLZXlzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJldmVudHMiLCJrZXlkb3duIiwiY2FsZW5kYXJJY29uIiwicmVuZGVyQ29udGVudCIsIkNvbXBvbmVudCIsImVtaXQiLCJyZW5kZXJTaWRlYmFyIiwicmVuZGVySGVhZGVyIiwicmVuZGVyRm9vdGVyIiwiX2NsYXNzIiwic2lkZWRhciIsImluc3RhbGwiLCJUaW1lUGFuZWwiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImZhY3RvcnkiXSwibWFwcGluZ3MiOiJpRkFBQUEsRUFBT0MsUUFBVSxFQUFqQixNLDJCQ0VBLElBQUlDLEVBQVEsRUFBUSxLQUNoQkMsRUFBUyxFQUFRLElBQ2pCQyxFQUFVLEVBQVEsS0FDbEJDLEVBQVcsRUFBUSxLQUNuQkMsRUFBZ0IsRUFBUSxJQUN4QkMsRUFBZSxFQUFRLEtBQ3ZCQyxFQUFrQixFQUFRLEtBQzFCQyxFQUFjLEVBQVEsSUFFMUJULEVBQU9DLFFBQVUsU0FBb0JTLEdBQ25DLE9BQU8sSUFBSUMsU0FBUSxTQUE0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QU05UixHQUVqQkEsRUE3Q3lFczJCLENBQVEsRUFBUSxRIiwiZmlsZSI6InNjcmlwdHMvZHluYW1pYy1mb3JtLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHNldHRsZSA9IHJlcXVpcmUoJy4vLi4vY29yZS9zZXR0bGUnKTtcbnZhciBjb29raWVzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2Nvb2tpZXMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9idWlsZFVSTCcpO1xudmFyIGJ1aWxkRnVsbFBhdGggPSByZXF1aXJlKCcuLi9jb3JlL2J1aWxkRnVsbFBhdGgnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgLy8gSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvblxuICAgIGlmIChjb25maWcuYXV0aCkge1xuICAgICAgdmFyIHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICB2YXIgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICB2YXIgeHNyZlZhbHVlID0gKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgfHwgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnNbY29uZmlnLnhzcmZIZWFkZXJOYW1lXSA9IHhzcmZWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBBZGQgaGVhZGVycyB0byB0aGUgcmVxdWVzdFxuICAgIGlmICgnc2V0UmVxdWVzdEhlYWRlcicgaW4gcmVxdWVzdCkge1xuICAgICAgdXRpbHMuZm9yRWFjaChyZXF1ZXN0SGVhZGVycywgZnVuY3Rpb24gc2V0UmVxdWVzdEhlYWRlcih2YWwsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3REYXRhID09PSAndW5kZWZpbmVkJyAmJiBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ2NvbnRlbnQtdHlwZScpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGFkZCBoZWFkZXIgdG8gdGhlIHJlcXVlc3RcbiAgICAgICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoa2V5LCB2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL2NvcmUvbWVyZ2VDb25maWcnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoYXhpb3MuZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbCcpO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWxUb2tlbicpO1xuYXhpb3MuaXNDYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9pc0NhbmNlbCcpO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuYXhpb3Muc3ByZWFkID0gcmVxdWlyZSgnLi9oZWxwZXJzL3NwcmVhZCcpO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEEgYENhbmNlbGAgaXMgYW4gb2JqZWN0IHRoYXQgaXMgdGhyb3duIHdoZW4gYW4gb3BlcmF0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBDYW5jZWwobWVzc2FnZSkge1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxuXG5DYW5jZWwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnQ2FuY2VsJyArICh0aGlzLm1lc3NhZ2UgPyAnOiAnICsgdGhpcy5tZXNzYWdlIDogJycpO1xufTtcblxuQ2FuY2VsLnByb3RvdHlwZS5fX0NBTkNFTF9fID0gdHJ1ZTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBidWlsZFVSTCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG52YXIgbWVyZ2VDb25maWcgPSByZXF1aXJlKCcuL21lcmdlQ29uZmlnJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSBhcmd1bWVudHNbMV0gfHwge307XG4gICAgY29uZmlnLnVybCA9IGFyZ3VtZW50c1swXTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gIH1cblxuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuXG4gIC8vIFNldCBjb25maWcubWV0aG9kXG4gIGlmIChjb25maWcubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IGNvbmZpZy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIGlmICh0aGlzLmRlZmF1bHRzLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSB0aGlzLmRlZmF1bHRzLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvbmZpZy5tZXRob2QgPSAnZ2V0JztcbiAgfVxuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5BeGlvcy5wcm90b3R5cGUuZ2V0VXJpID0gZnVuY3Rpb24gZ2V0VXJpKGNvbmZpZykge1xuICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICByZXR1cm4gYnVpbGRVUkwoY29uZmlnLnVybCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLnJlcGxhY2UoL15cXD8vLCAnJyk7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG4vKipcbiAqIENvbmZpZy1zcGVjaWZpYyBtZXJnZS1mdW5jdGlvbiB3aGljaCBjcmVhdGVzIGEgbmV3IGNvbmZpZy1vYmplY3RcbiAqIGJ5IG1lcmdpbmcgdHdvIGNvbmZpZ3VyYXRpb24gb2JqZWN0cyB0b2dldGhlci5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMVxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzJcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgdmFyIGNvbmZpZyA9IHt9O1xuXG4gIHZhciB2YWx1ZUZyb21Db25maWcyS2V5cyA9IFsndXJsJywgJ21ldGhvZCcsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5JywgJ3BhcmFtcyddO1xuICB2YXIgZGVmYXVsdFRvQ29uZmlnMktleXMgPSBbXG4gICAgJ2Jhc2VVUkwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd0aW1lb3V0TWVzc2FnZScsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsICdkZWNvbXByZXNzJyxcbiAgICAnbWF4Q29udGVudExlbmd0aCcsICdtYXhCb2R5TGVuZ3RoJywgJ21heFJlZGlyZWN0cycsICd0cmFuc3BvcnQnLCAnaHR0cEFnZW50JyxcbiAgICAnaHR0cHNBZ2VudCcsICdjYW5jZWxUb2tlbicsICdzb2NrZXRQYXRoJywgJ3Jlc3BvbnNlRW5jb2RpbmcnXG4gIF07XG4gIHZhciBkaXJlY3RNZXJnZUtleXMgPSBbJ3ZhbGlkYXRlU3RhdHVzJ107XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICBpZiAodXRpbHMuaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzJbcHJvcF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgbWVyZ2VEZWVwUHJvcGVydGllcyk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcxW3Byb3BdKTtcbiAgICB9XG4gIH0pO1xuXG4gIHV0aWxzLmZvckVhY2goZGlyZWN0TWVyZ2VLZXlzLCBmdW5jdGlvbiBtZXJnZShwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgY29uZmlnW3Byb3BdID0gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgYXhpb3NLZXlzID0gdmFsdWVGcm9tQ29uZmlnMktleXNcbiAgICAuY29uY2F0KG1lcmdlRGVlcFByb3BlcnRpZXNLZXlzKVxuICAgIC5jb25jYXQoZGVmYXVsdFRvQ29uZmlnMktleXMpXG4gICAgLmNvbmNhdChkaXJlY3RNZXJnZUtleXMpO1xuXG4gIHZhciBvdGhlcktleXMgPSBPYmplY3RcbiAgICAua2V5cyhjb25maWcxKVxuICAgIC5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIG1lcmdlRGVlcFByb3BlcnRpZXMpO1xuXG4gIHJldHVybiBjb25maWc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChjcmVhdGVFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICBudWxsLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiAodHlwZW9mIHBheWxvYWQgPT09ICdvYmplY3QnKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCBub3JtYWxpemVkTmFtZSkge1xuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMsIGZ1bmN0aW9uIHByb2Nlc3NIZWFkZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAhPT0gbm9ybWFsaXplZE5hbWUgJiYgbmFtZS50b1VwcGVyQ2FzZSgpID09PSBub3JtYWxpemVkTmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICBoZWFkZXJzW25vcm1hbGl6ZWROYW1lXSA9IHZhbHVlO1xuICAgICAgZGVsZXRlIGhlYWRlcnNbbmFtZV07XG4gICAgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLy8gSGVhZGVycyB3aG9zZSBkdXBsaWNhdGVzIGFyZSBpZ25vcmVkIGJ5IG5vZGVcbi8vIGMuZi4gaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9odHRwLmh0bWwjaHR0cF9tZXNzYWdlX2hlYWRlcnNcbnZhciBpZ25vcmVEdXBsaWNhdGVPZiA9IFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSAmJiBpZ25vcmVEdXBsaWNhdGVPZi5pbmRleE9mKGtleSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSAocGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSA6IFtdKS5jb25jYXQoW3ZhbF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsKSB7XG4gIGlmICh0b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gcHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIERhdGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0RhdGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IERhdGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0ZpbGUodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZpbGVdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJsb2IsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Jsb2IodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEJsb2JdJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGdW5jdGlvbiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJlYW1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyZWFtKHZhbCkge1xuICByZXR1cm4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VSTFNlYXJjaFBhcmFtcyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnICYmIHZhbCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMqLywgJycpLnJlcGxhY2UoL1xccyokLywgJycpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqL1xuZnVuY3Rpb24gaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05hdGl2ZVNjcmlwdCcgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ05TJykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRba2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqIEByZXR1cm4ge3N0cmluZ30gY29udGVudCB2YWx1ZSB3aXRob3V0IEJPTVxuICovXG5mdW5jdGlvbiBzdHJpcEJPTShjb250ZW50KSB7XG4gIGlmIChjb250ZW50LmNoYXJDb2RlQXQoMCkgPT09IDB4RkVGRikge1xuICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKDEpO1xuICB9XG4gIHJldHVybiBjb250ZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbSxcbiAgc3RyaXBCT006IHN0cmlwQk9NXG59O1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFdpdGhTZXBhcmF0b3JzKG51bWJlcikge1xyXG4gICAgbGV0IHZhbCA9IG51bWJlci50b1N0cmluZygpLnJlcGxhY2UoL1teMC05XS9nLCAnJyk7XHJcbiAgICB2YWwgPSB2YWwucmVwbGFjZSgvXjAvLCAnJyk7XHJcbiAgICBpZiAodmFsID09ICcnKSB7XHJcbiAgICAgICAgdmFsID0gJzAnO1xyXG4gICAgfVxyXG4gICAgdmFsID0gdmFsLnJlcGxhY2UoLyhcXGQpKD89KFxcZHszfSkrKD8hXFxkKSkvZywgJyQxICcpOyAgICAgICAgXHJcblxyXG4gICAgcmV0dXJuIHZhbDtcclxufSIsImV4cG9ydCBjb25zdCBldmVudEJ1cyA9IG5ldyBWdWUoe1xyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIHZhbGlkYXRlKCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCd2YWxpZGF0ZScpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hvd0Vycm9ycygpIHtcclxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnc2hvd0Vycm9ycycpO1xyXG4gICAgICAgIH0gICAgICAgIFxyXG4gICAgfVxyXG59KTsiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZCBjYXJkLXByaW1hcnlcIiB9LCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLWhlYWRlclwiIH0sIFtcbiAgICAgIF92bS5fdihcIlxcbiAgICAgICAgXCIgKyBfdm0uX3MoX3ZtLnRpdGxlKSArIFwiXFxuICAgIFwiKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJjYXJkLWJvZHlcIiB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImFwcC1pbmZvX193cmFwcGVyXCIgfSwgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYXBwLWluZm9cIiB9LCBbXG4gICAgICAgICAgICBfYyhcInBcIiwgW1xuICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5kaWN0LmNvbnRyYWN0SW5mby5zdGFuZE51bWJlcikgKyBcIjpcIiksXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyh0aGlzLnN0YW5kTnVtYmVyKSldKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJwXCIsIFtcbiAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZGljdC5jb250cmFjdEluZm8uaGFsbCkgKyBcIjpcIiksXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyh0aGlzLmhhbGwpKV0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcInBcIiwgW1xuICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5kaWN0LmNvbnRyYWN0SW5mby5zdGFuZFNxdWFyZSkgKyBcIjpcIiksXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyh0aGlzLnN0YW5kU3F1YXJlKSldKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLl9sKF92bS5lbGVtZW50cywgZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAhZWxlbS5pc0dyb3VwXG4gICAgICAgICAgICAgID8gX2MoXCJlbFwiLCB7XG4gICAgICAgICAgICAgICAgICBhdHRyczogeyB1bml0RGF0YTogZWxlbSwgbGFuZzogX3ZtLmxhbmd1YWdlLCBkaWM6IF92bS5kaWN0IH0sXG4gICAgICAgICAgICAgICAgICBvbjogeyBtb2RpZmljYXRpb246IF92bS5maWVsZHNNb2RpZmljYXRlIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIGVsZW0uaXNHcm91cFxuICAgICAgICAgICAgICA/IF9jKFwiZ3JvdXBcIiwge1xuICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzOiBlbGVtLmZpZWxkcyxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IF92bS5nZXRGaWVsZE5hbWUoZWxlbS5uYW1lLCBlbGVtLm5hbWVfZW5nKSxcbiAgICAgICAgICAgICAgICAgICAgbGFuZzogX3ZtLmxhbmd1YWdlLFxuICAgICAgICAgICAgICAgICAgICBkaWM6IF92bS5kaWN0XG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgb246IHsgbW9kaWZpY2F0aW9uOiBfdm0uZmllbGRzTW9kaWZpY2F0ZSB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgIF1cbiAgICAgICAgfSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmlzRmlsZVVwbG9hZCxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImlzRmlsZVVwbG9hZFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWdyb3VwIGNsclwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJkLWZsZXggZmxleC1jb2x1bW5cIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyhfdm0uZGljdC5maWxlQXR0YWNoLmF0dGFjaEZpbGUpKV0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImN1c3RvbS1maWxlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgcmVmOiBcInVzZXJGaWxlXCIsXG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjdXN0b20tZmlsZS1pbnB1dFwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJmaWxlXCIsIGlkOiBcInVzZXJGaWxlXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNoYW5nZTogX3ZtLmZpbGVMb2FkIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjdXN0b20tZmlsZS1sYWJlbFwiLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS1icm93c2VcIjogX3ZtLmRpY3QuZmlsZUF0dGFjaC5icm93c2UsXG4gICAgICAgICAgICAgICAgICAgICAgZm9yOiBcInVzZXJGaWxlXCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoXCJTZWxlY3QgZmlsZVwiKV1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfdm0uaGFzRmlsZVxuICAgICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZmlsZV9fYWRkZWRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcImlcIiwge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmYSBmYS1maWxlXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfVxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJhXCIsIHsgYXR0cnM6IHsgaHJlZjogX3ZtLmF0dGFjaGVkRmlsZSB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uYXR0YWNoZWRGaWxlKSlcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfdm0uc2hvd0xpbWl0U2l6ZU9mRmlsZU1zZ1xuICAgICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZXJyb3ItbWVzc2FnZVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmRpY3QuZmlsZUF0dGFjaC5saW1pdFNpemVNZXNzYWdlKSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgXVxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uaXNDb21wdXRlZFxuICAgICAgICAgID8gX2MoXCJjb21wdXRlZFwiLCB7IGF0dHJzOiB7IHRvdGFsOiBfdm0udG90YWxQcmljZSwgZGljOiBfdm0uZGljdCB9IH0pXG4gICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLWZvb3RlclwiIH0sIFtcbiAgICAgICAgICAhX3ZtLmlzUmVhZE9ubHlcbiAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLXByaW1hcnlcIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uc2F2ZURyYWZ0IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5kaWN0LmJ1dHRvbnMuZHJhZnQpKV1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICFfdm0uaXNSZWFkT25seVxuICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tc3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5mb3JtU3VibWl0IH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5kaWN0LmJ1dHRvbnMuc2VuZCkpXVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgIV92bS5pc1JlYWRPbmx5XG4gICAgICAgICAgICA/IF9jKFxuICAgICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1zZWNvbmRhcnlcIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uY2FuY2VsIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5kaWN0LmJ1dHRvbnMuY2FuY2VsKSldXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0uaXNSZWFkT25seVxuICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0biBidG4tc2Vjb25kYXJ5XCIsXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmNsb3NlIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5kaWN0LmJ1dHRvbnMuY2xvc2UpKV1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICBdKVxuICAgICAgXSxcbiAgICAgIDJcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiY29tcFwiIH0sXG4gICAgW1xuICAgICAgX2MoX3ZtLmN1cnJlbnRFbGVtZW50LCB7XG4gICAgICAgIHRhZzogXCJjb21wb25lbnRcIixcbiAgICAgICAgYXR0cnM6IHsgcGFyYW1zOiBfdm0udW5pdERhdGEsIGxhbmc6IF92bS5sYW5nLCBkaWM6IF92bS5kaWMgfSxcbiAgICAgICAgb246IHsgY2hhbmdlRmllbGQ6IF92bS5maWVsZENoYW5nZWQgfVxuICAgICAgfSlcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwge1xuICAgIHN0YXRpY0NsYXNzOiBcImluZm9ybVwiLFxuICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS50aXRsZSkgfVxuICB9KVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCBjb25zdCB1bml0TWl4aW4gPSB7XHJcbiAgICBwcm9wczogW1xyXG4gICAgICAgICdwYXJhbXMnXHJcbiAgICBdLFxyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwYXJhbWV0ZXJzOiB0aGlzLnBhcmFtcy5wYXJhbWV0ZXJzLCBcclxuICAgICAgICAgICAgdW5pdDogdGhpcy5wYXJhbXMucGFyYW1ldGVycy51bml0TmFtZSBcclxuICAgICAgICAvLyAgICB2YWw6IHRoaXMucGFyYW1zLnZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgcmVxdWlyZWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIXBhcnNlSW50KHRoaXMucGFyYW1zLnBhcmFtZXRlcnMucmVxdWlyZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH0gICAgICBcclxufSIsImV4cG9ydCBjb25zdCBsYW5ndWFnZXMgPSB7XHJcbiAgICBydXNzaWFuOiAncnUtUlUnLFxyXG4gICAgZW5nbGlzaDogJ2VuJ1xyXG59IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ltcG9ydGFudEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ltcG9ydGFudEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuPGRpdiBjbGFzcz1cImluZm9ybVwiIHYtaHRtbD1cInRpdGxlXCI+PC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbiAgICBpbXBvcnQgeyB1bml0TWl4aW4gfSBmcm9tICcuL01peGlucy91bml0TWl4aW4nXHJcbiAgICBpbXBvcnQgeyBsYW5ndWFnZXMgfSBmcm9tICcuLi8uLi8uLi9sYW5nJ1xyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIHByb3BzOiBbXHJcbiAgICAgICAgICAgICdsYW5nJ1xyXG4gICAgICAgIF0sXHJcbiAgICAgICBtaXhpbnM6IFtcclxuICAgICAgICAgICB1bml0TWl4aW5cclxuICAgICAgIF0sXHJcbiAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgIHRpdGxlKCkge1xyXG4gICAgICAgICAgICAgICAvLyB0aGlzLnBhcmFtZXRlcnMuaHRtbFxyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5sYW5nID09IGxhbmd1YWdlcy5ydXNzaWFuIHx8ICF0aGlzLnBhcmFtZXRlcnMuaHRtbEVuZykge1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy5odG1sO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmFtZXRlcnMuaHRtbEVuZztcclxuICAgICAgICAgICB9XHJcbiAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG4uaW5mb3JtIHtcclxuICAgIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbn1cclxuPC9zdHlsZT4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0ltcG9ydGFudEJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yYmY2ZWI4NiZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9JbXBvcnRhbnRCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0ltcG9ydGFudEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9JbXBvcnRhbnRCbG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yYmY2ZWI4NiZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMmJmNmViODZcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzJiZjZlYjg2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzJiZjZlYjg2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzJiZjZlYjg2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9JbXBvcnRhbnRCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MmJmNmViODYmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMmJmNmViODYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImFzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9JbXBvcnRhbnRCbG9jay52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGVyX19ibG9ja1wiIH0sIFtcbiAgICBfYyhcImg0XCIsIFtfdm0uX3YoX3ZtLl9zKF92bS5oZWFkZXIpKV0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJwXCIsIHsgc3RhdGljQ2xhc3M6IFwiZGVzY3JpcHRpb25cIiB9LCBbX3ZtLl92KF92bS5fcyhfdm0uZGVzYykpXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJpbmZvXCIgfSwgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlKSldKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJoZWFkZXJfX2Jsb2NrXCI+XHJcbiAgICAgICAgPGg0Pnt7IGhlYWRlciB9fTwvaDQ+XHJcbiAgICAgICAgPHAgY2xhc3M9XCJkZXNjcmlwdGlvblwiPnt7IGRlc2MgfX08L3A+XHJcbiAgICAgICAgPHAgY2xhc3M9XCJpbmZvXCI+e3sgdGl0bGUgfX08L3A+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IHVuaXRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3VuaXRNaXhpbidcclxuICAgIGltcG9ydCB7IGxhbmd1YWdlcyB9IGZyb20gJy4uLy4uLy4uL2xhbmcnICAgIFxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIHByb3BzOiBbXHJcbiAgICAgICAgICAgICdsYW5nJ1xyXG4gICAgICAgIF0sICAgICAgICBcclxuICAgICAgIG1peGluczogW1xyXG4gICAgICAgICAgIHVuaXRNaXhpblxyXG4gICAgICAgXSxcclxuICAgICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgICAgdGl0bGUoKSB7XHJcbiAgICAgICAgICAgICAgIC8vIHRoaXMucGFyYW1ldGVycy5odG1sXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMubGFuZyA9PSBsYW5ndWFnZXMucnVzc2lhbiB8fCAhdGhpcy5wYXJhbWV0ZXJzLnRleHRFbmcpID9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtZXRlcnMudGV4dCA6ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbWV0ZXJzLnRleHRFbmc7XHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICBoZWFkZXIoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMubGFuZyA9PSBsYW5ndWFnZXMucnVzc2lhbiB8fCAhdGhpcy5wYXJhbXMudGV4dEVuZykgP1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLm5hbWUgOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLm5hbWVfZW5nO1xyXG4gICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgZGVzYygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy5sYW5nID09IGxhbmd1YWdlcy5ydXNzaWFuIHx8ICF0aGlzLnBhcmFtcy50ZXh0RW5nKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMuZGVzY3JpcHRpb24gOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLmRlc2NyaXB0aW9uX2VuZztcclxuICAgICAgICAgICB9XHJcblxyXG4gICAgICAgfSAgICAgICBcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBzY29wZWQ+XHJcbnAge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcclxufVxyXG4uZGVzY3JpcHRpb24geyAgIFxyXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTsgXHJcbn1cclxuLmluZm8ge1xyXG4gICAgZm9udC1zaXplOiAuOXJlbTtcclxuICAgIGNvbG9yOiAjNjg2ODY4O1xyXG59XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hlYWRlckJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0hlYWRlckJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vSGVhZGVyQmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTBmM2U5Mjk1JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0hlYWRlckJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vSGVhZGVyQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0hlYWRlckJsb2NrLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTBmM2U5Mjk1JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIwZjNlOTI5NVwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkc6XFxcXE9wZW5TZXJ2ZXJcXFxcZG9tYWluc1xcXFxhZ3JvZm9ybXMubG9jYWxcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMGYzZTkyOTUnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMGYzZTkyOTUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMGYzZTkyOTUnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0hlYWRlckJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wZjNlOTI5NSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwZjNlOTI5NScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0hlYWRlckJsb2NrLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWdyb3VwXCIgfSwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLWNoZWNrYm94XCIgfSwgW1xuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgIHZhbHVlOiBfdm0uY2hlY2tlZCxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwiY2hlY2tlZFwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzdGF0aWNDbGFzczogXCJjdXN0b20tY29udHJvbC1pbnB1dFwiLFxuICAgICAgICBhdHRyczogeyB0eXBlOiBcImNoZWNrYm94XCIsIGlkOiBfdm0uaWQgfSxcbiAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICBjaGVja2VkOiBBcnJheS5pc0FycmF5KF92bS5jaGVja2VkKVxuICAgICAgICAgICAgPyBfdm0uX2koX3ZtLmNoZWNrZWQsIG51bGwpID4gLTFcbiAgICAgICAgICAgIDogX3ZtLmNoZWNrZWRcbiAgICAgICAgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBjaGFuZ2U6IFtcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICB2YXIgJCRhID0gX3ZtLmNoZWNrZWQsXG4gICAgICAgICAgICAgICAgJCRlbCA9ICRldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgJCRjID0gJCRlbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlXG4gICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KCQkYSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgJCR2ID0gbnVsbCxcbiAgICAgICAgICAgICAgICAgICQkaSA9IF92bS5faSgkJGEsICQkdilcbiAgICAgICAgICAgICAgICBpZiAoJCRlbC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAkJGkgPCAwICYmIChfdm0uY2hlY2tlZCA9ICQkYS5jb25jYXQoWyQkdl0pKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAkJGkgPiAtMSAmJlxuICAgICAgICAgICAgICAgICAgICAoX3ZtLmNoZWNrZWQgPSAkJGEuc2xpY2UoMCwgJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSArIDEpKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX3ZtLmNoZWNrZWQgPSAkJGNcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92bS5jaGFuZ2VcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImxhYmVsXCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIiwgYXR0cnM6IHsgZm9yOiBfdm0uaWQgfSB9LFxuICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0udGl0bGVMYWJlbCkpXVxuICAgICAgKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgbGFuZ3VhZ2VzIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGFuZydcclxuZXhwb3J0IGNvbnN0IGxhYmVsTWl4aW4gPSB7XHJcbiAgICBjb21wdXRlZDoge1xyXG4gICAgICAgIHRpdGxlTGFiZWwoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxhbmcgPT0gbGFuZ3VhZ2VzLnJ1c3NpYW4gfHwgIXRoaXMucGFyYW1zLm5hbWVfZW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMubmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMubmFtZV9lbmc7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZXNjcmlwdGlvbkxhYmVsKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sYW5nID09IGxhbmd1YWdlcy5ydXNzaWFuIHx8ICF0aGlzLnBhcmFtcy5kZXNjcmlwdGlvbl9lbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMuZGVzY3JpcHRpb247XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICB9LCAgICBcclxufSIsImV4cG9ydCBjb25zdCBjb21wdXRlZE1peGluID0ge1xyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICBsZXQgYmFzZVByaWNlLCB1bml0UHJpY2U7XHJcbiAgICAgICAgYmFzZVByaWNlID0gdGhpcy5wYXJhbXMucGFyYW1ldGVycy5oYXNPd25Qcm9wZXJ0eSgnYmFzZVByaWNlJykgP1xyXG4gICAgICAgICAgICArdGhpcy5wYXJhbXMucGFyYW1ldGVycy5iYXNlUHJpY2UgOiAwO1xyXG4gICAgICAgIHVuaXRQcmljZSA9IHRoaXMucGFyYW1zLnBhcmFtZXRlcnMuaGFzT3duUHJvcGVydHkoJ3VuaXRQcmljZScpID9cclxuICAgICAgICAgICAgK3RoaXMucGFyYW1zLnBhcmFtZXRlcnMudW5pdFByaWNlIDogMDsgICAgICAgICBcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1bml0UHJpY2UsXHJcbiAgICAgICAgICAgIGJhc2VQcmljZSxcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29tcHV0ZWQ6IHtcclxuICAgICAgICBpc0NvbXB1dGVkKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISFwYXJzZUludCh0aGlzLnBhcmFtcy5wYXJhbWV0ZXJzLmlzQ29tcHV0ZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2hlY2tCb3hCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9DaGVja0JveEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tY2hlY2tib3hcIj5cclxuICAgICAgICA8aW5wdXQgQGNoYW5nZT1cImNoYW5nZVwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIiB0eXBlPVwiY2hlY2tib3hcIiA6aWQ9XCJpZFwiIHYtbW9kZWw9XCJjaGVja2VkXCI+XHJcbiAgICAgICAgPGxhYmVsIDpmb3I9XCJpZFwiIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIj57eyB0aXRsZUxhYmVsIH19PC9sYWJlbD5cclxuICAgIDwvZGl2PlxyXG48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IHVuaXRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3VuaXRNaXhpbidcclxuICAgIGltcG9ydCB7IGxhYmVsTWl4aW4gfSBmcm9tICcuL01peGlucy9sYWJlbE1peGluJ1xyXG4gICAgaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nXHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgcHJvcHM6IFtcclxuICAgICAgICAgICAgJ2xhbmcnXHJcbiAgICAgICAgXSwgICAgICAgICBcclxuICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGlkOiAnaWQnICsgdGhpcy5wYXJhbXMuaWQsICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMucGFyYW1zLmNoZWNrZWQsXHJcbiAgICAgICAgICAgICAgICB2YWxpZDogdHJ1ZSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICB9XHJcbiAgICAgICB9LCAgICAgICAgXHJcbiAgICAgICBtaXhpbnM6IFtcclxuICAgICAgICAgICB1bml0TWl4aW4sXHJcbiAgICAgICAgICAgY29tcHV0ZWRNaXhpbixcclxuICAgICAgICAgICBsYWJlbE1peGluXHJcbiAgICAgICBdLFxyXG4gICAgICAgY3JlYXRlZCgpIHtcclxuICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgfSwgXHJcbiAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgIHRvdGFsKCkge1xyXG4gICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDb21wdXRlZCB8fCAhdGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICByZXR1cm4gK3RoaXMudW5pdFByaWNlO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0sICAgICAgIFxyXG4gICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgIGNoYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMudmFsdWUgPSB0aGlzLmNoZWNrZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpOyAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgICAgICAgIGRhdGE6ICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudW5pdFByaWNlLCBcclxuICAgICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiB0aGlzLmNoZWNrZWQgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgdmFsaWQ6IHRoaXMudmFsaWQsXHJcbiAgICAgICAgICAgICAgICAgICBjaGVja2JveDogdHJ1ZSwgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgIGRhdGEuY29tcHV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgZGF0YS50b3RhbCA9IHRoaXMudG90YWw7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSAgICAgIFxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlPjwvc3R5bGU+IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9DaGVja0JveEJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YTcyMWVmZiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9DaGVja0JveEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQ2hlY2tCb3hCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkc6XFxcXE9wZW5TZXJ2ZXJcXFxcZG9tYWluc1xcXFxhZ3JvZm9ybXMubG9jYWxcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNWE3MjFlZmYnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNWE3MjFlZmYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNWE3MjFlZmYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0NoZWNrQm94QmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTVhNzIxZWZmJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzVhNzIxZWZmJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ2hlY2tCb3hCbG9jay52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAge1xuICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1ncm91cCBhbGlnbi1yaWdodFwiLFxuICAgICAgY2xhc3M6IHsgcmVxdWlyZWQ6IF92bS5yZXF1aXJlZCB9XG4gICAgfSxcbiAgICBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZsZXhfX3dyYXBwZXJcIiB9LCBbXG4gICAgICAgIF9jKFwibGFiZWxcIiwgeyBhdHRyczogeyBmb3I6IF92bS5pZCB9IH0sIFtcbiAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS50aXRsZUxhYmVsKSlcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgdmFsdWU6IF92bS52YWwsXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IFwidmFsXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgIGNsYXNzOiB7IFwiaXMtaW52YWxpZFwiOiBfdm0uaGFzRXJyb3JzRm9yU2hvdygpIH0sXG4gICAgICAgICAgYXR0cnM6IHsgaWQ6IF92bS5pZCwgdHlwZTogXCJ0ZXh0XCIsIHBsYWNlaG9sZGVyOiBcIlwiIH0sXG4gICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS52YWwgfSxcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkNoYW5nZSgkZXZlbnQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBfdm0udmFsID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5oYXNFcnJvcnNGb3JTaG93KClcbiAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImhlbHAtYmxvY2tcIiB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5lcnJvcnMucmVxdWlyZWQubWVzc2FnZSkpXG4gICAgICAgICAgXSlcbiAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAhX3ZtLmhhc0Vycm9yc0ZvclNob3coKVxuICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZGVzYy1ibG9ja1wiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmRlc2NyaXB0aW9uTGFiZWwpKVxuICAgICAgICAgIF0pXG4gICAgICAgIDogX3ZtLl9lKClcbiAgICBdXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbjxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGFsaWduLXJpZ2h0XCIgOmNsYXNzPVwieydyZXF1aXJlZCcgOiByZXF1aXJlZCB9XCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZmxleF9fd3JhcHBlclwiPlxyXG4gICAgICAgIDxsYWJlbCA6Zm9yPVwiaWRcIj57eyB0aXRsZUxhYmVsIH19PC9sYWJlbD5cclxuICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgIDppZD1cImlkXCJcclxuICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICAgICAgICA6Y2xhc3M9XCJ7J2lzLWludmFsaWQnIDogaGFzRXJyb3JzRm9yU2hvdygpIH1cIiBcclxuICAgICAgICAgICAgdi1tb2RlbD1cInZhbFwiXHJcbiAgICAgICAgICAgIEBjaGFuZ2U9XCJvbkNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiB2LWlmPVwiaGFzRXJyb3JzRm9yU2hvdygpXCIgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgZXJyb3JzLnJlcXVpcmVkLm1lc3NhZ2UgfX08L2Rpdj4gIFxyXG4gICAgPGRpdiB2LWlmPVwiIWhhc0Vycm9yc0ZvclNob3coKVwiIGNsYXNzPVwiZGVzYy1ibG9ja1wiPnt7IGRlc2NyaXB0aW9uTGFiZWwgfX08L2Rpdj4gICAgICAgICAgIFxyXG48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD4gXHJcbiAgICBpbXBvcnQgeyB1bml0TWl4aW4gfSBmcm9tICcuL01peGlucy91bml0TWl4aW4nXHJcbiAgICBpbXBvcnQgeyBsYWJlbE1peGluIH0gZnJvbSAnLi9NaXhpbnMvbGFiZWxNaXhpbicgIFxyXG4gICAgaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICcuLi8uLi9ldmVudEJ1cydcclxuICAgIGV4cG9ydCBkZWZhdWx0IHsgICAgICAgIFxyXG4gICAgICAgIHByb3BzOiBbXHJcbiAgICAgICAgICAgICdsYW5nJ1xyXG4gICAgICAgIF0sXHJcblxyXG4gICAgICAgZGF0YSgpIHsgICAgICAgICAgIFxyXG4gICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAnaWQnICsgdGhpcy5wYXJhbXMuaWQsXHJcbiAgICAgICAgICAgIHZhbDogdGhpcy5wYXJhbXMudmFsdWUgPyB0aGlzLnBhcmFtcy52YWx1ZSA6ICcnLFxyXG4gICAgICAgICAgICBjdXJyZW50VmFsOiB0aGlzLnBhcmFtcy52YWx1ZSxcclxuICAgICAgICAgICAgc2hvd0Vycm9ycyA6IGZhbHNlLFxyXG4gICAgICAgICAgICB2YWxpZDogdHJ1ZSxcclxuICAgICAgICAgICAgZXJyb3JzIDoge1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcItCf0L7Qu9C1INC+0LHRj9C30LDRgtC10LvRjNC90L4g0LTQu9GPINC30LDQv9C+0LvQvdC10L3QuNGPXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0sICAgICAgXHJcbiAgICAgICBtaXhpbnM6IFtcclxuICAgICAgICAgICB1bml0TWl4aW4sXHJcbiAgICAgICAgICAgbGFiZWxNaXhpblxyXG4gICAgICAgXSxcclxuICAgICAgIGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgICAgICAgICBldmVudEJ1cy4kb24oJ3Nob3dFcnJvcnMnLCgpID0+IHRoaXMuc2hvd0Vycm9ycyA9IHRydWUpO1xyXG4gICAgICAgICAgIGV2ZW50QnVzLiRvbigndmFsaWRhdGUnLCgpID0+IHtcclxuICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpXHJcbiAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICApO1xyXG4gICAgICAgfSxcclxuICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICB2YWxpZGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7IC8vIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICBpZih0aGlzLnZhbCA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFcnJvciA9IHRoaXMuZXJyb3JzLnJlcXVpcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH0sICAgICAgICAgICAgXHJcbiAgICAgICAgICAgaGFzRXJyb3JzRm9yU2hvdygpIHtcclxuICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNob3dFcnJvcnMgfHwgIXRoaXMuY3VycmVudEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgb25DaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgICAgICAgICBkYXRhOiAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbCwgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICB2YWxpZDogdGhpcy52YWxpZFxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSBcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UZXh0SW5wdXRCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UZXh0SW5wdXRCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1RleHRJbnB1dEJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1hZTUyNTEyYSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9UZXh0SW5wdXRCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1RleHRJbnB1dEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdhZTUyNTEyYScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdhZTUyNTEyYScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdhZTUyNTEyYScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVGV4dElucHV0QmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFlNTI1MTJhJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2FlNTI1MTJhJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvVGV4dElucHV0QmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXBcIiB9LCBbXG4gICAgX2MoXCJsYWJlbFwiLCB7IGF0dHJzOiB7IGZvcjogX3ZtLmlkIH0gfSwgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpKV0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cFwiIH0sIFtcbiAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbCxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwidmFsXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICBjbGFzczogeyBcImlzLWludmFsaWRcIjogX3ZtLmhhc0Vycm9yc0ZvclNob3coKSB9LFxuICAgICAgICBhdHRyczogeyBpZDogX3ZtLmlkLCB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiRW50ZXIgLi4uXCIgfSxcbiAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS52YWwgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF92bS5vbkNoYW5nZSgkZXZlbnQpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdm0udmFsID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLnVuaXRcbiAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLWFwcGVuZFwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnVuaXQpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5pc0NvbXB1dGVkXG4gICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC1hcHBlbmRcIiB9LCBbXG4gICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC10ZXh0XCIgfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCJ4XCIpLFxuICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJwcmljZVwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKCtfdm0udW5pdFByaWNlKSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiArIF92bS5fcyhfdm0uZGljLnZhbHV0ZSkpXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLmlzQ29tcHV0ZWRcbiAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLWFwcGVuZFwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIiB9LCBbXG4gICAgICAgICAgICAgIF92bS5fdihcIj1cIiksXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcInByaWNlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLl9mKFwic2VwYXJhdGVcIikoX3ZtLnRvdGFsKSkpXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIgKyBfdm0uX3MoX3ZtLmRpYy52YWx1dGUpKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICA6IF92bS5fZSgpXG4gICAgXSksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0uaGFzRXJyb3JzRm9yU2hvdygpXG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVscC1ibG9ja1wiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50RXJyb3IubWVzc2FnZSkpXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgZm9ybWF0V2l0aFNlcGFyYXRvcnMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy9udW1iZXJzJ1xyXG5leHBvcnQgY29uc3QgbnVtYmVyRm9ybWF0TWl4aW4gPSB7XHJcbiAgICBmaWx0ZXJzOiB7XHJcbiAgICAgICAgc2VwYXJhdGUodmFsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRXaXRoU2VwYXJhdG9ycyh2YWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9OdW1iZXJJbnB1dEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL051bWJlcklucHV0QmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxyXG48ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgPGxhYmVsIDpmb3I9XCJpZFwiPnt7IHRpdGxlTGFiZWwgfX08L2xhYmVsPlxyXG4gICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XHJcblxyXG4gICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgOmlkPVwiaWRcIlxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgIDpjbGFzcz1cInsnaXMtaW52YWxpZCcgOiBoYXNFcnJvcnNGb3JTaG93KCkgfVwiIFxyXG4gICAgICAgICAgICB2LW1vZGVsPVwidmFsXCJcclxuICAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIC4uLlwiPlxyXG4gICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgIHYtaWY9XCJ1bml0XCIgXHJcbiAgICAgICAgICAgIGNsYXNzPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCJcclxuICAgICAgICA+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPnt7IHVuaXQgfX08L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBcclxuICAgICAgICAgICAgdi1pZj1cImlzQ29tcHV0ZWRcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiXHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+eDxzcGFuIGNsYXNzPVwicHJpY2VcIj57eyArdW5pdFByaWNlIH19PC9zcGFuPiB7eyBkaWMudmFsdXRlIH19PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PiAgIFxyXG4gICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgIHYtaWY9XCJpc0NvbXB1dGVkXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmRcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPj08c3BhbiBjbGFzcz1cInByaWNlXCI+e3sgdG90YWwgfCBzZXBhcmF0ZSB9fTwvc3Bhbj4ge3sgZGljLnZhbHV0ZSB9fTwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj4gICAgICAgICBcclxuICAgIDwvZGl2PiAgICAgIFxyXG4gICAgPGRpdiB2LWlmPVwiaGFzRXJyb3JzRm9yU2hvdygpXCIgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgY3VycmVudEVycm9yLm1lc3NhZ2UgfX08L2Rpdj4gICAgICAgIFxyXG48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IHVuaXRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3VuaXRNaXhpbidcclxuICAgIGltcG9ydCB7IGxhYmVsTWl4aW4gfSBmcm9tICcuL01peGlucy9sYWJlbE1peGluJ1xyXG4gICAgaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nXHJcbiAgICBpbXBvcnQgeyBldmVudEJ1cyB9IGZyb20gJy4uLy4uL2V2ZW50QnVzJ1xyXG4gICAgaW1wb3J0IHsgbnVtYmVyRm9ybWF0TWl4aW4gfSBmcm9tICcuL01peGlucy9udW1iZXJGb3JtYXRNaXhpbidcclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBwcm9wczogW1xyXG4gICAgICAgICAgICAnZGljJywnbGFuZydcclxuICAgICAgICBdLCAgICBcclxuICAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6ICdpZCcgKyB0aGlzLnBhcmFtcy5pZCxcclxuICAgICAgICAgICAgdmFsOiB0aGlzLnBhcmFtcy52YWx1ZSwgICAgIFxyXG4gICAgICAgICAgICBjdXJyZW50RXJyb3I6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3dFcnJvcnMgOiBmYWxzZSxcclxuICAgICAgICAgICAgdmFsaWQgOiB0cnVlLCAgICAgICAgICAgIFxyXG4gICAgICAgICAgLy8gIHJlcXVpcmVkIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGVycm9ycyA6IHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCLQn9C+0LvQtSDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdC+INC00LvRjyDQt9Cw0L/QvtC70L3QtdC90LjRj1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbm90TnVtYmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCLQl9Cw0L/QvtC70L3Rj9C10LzQvtC1INC/0L7Qu9C1INC00L7Qu9C20L3QviDQsdGL0YLRjCDRh9C40YHQu9C+0LxcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSxcclxuICAgICAgIGNvbXB1dGVkOiB7ICAgICAgICAgIFxyXG4gICAgICAgICAgIHRvdGFsKCkge1xyXG4gICAgICAgICAgICAgICBsZXQgdG90YWwgPSAwO1xyXG4gICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDb21wdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgbGV0IHZhbCA9ICt0aGlzLnZhbDtcclxuICAgICAgICAgICAgICAgdG90YWwgPSB2YWwgKiAoK3RoaXMudW5pdFByaWNlKTtcclxuICAgICAgICAgICAgICAgaWYgKGlzTmFOKHRvdGFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsOyAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICB9XHJcbiAgICAgICB9LFxyXG4gICAgICAgbWl4aW5zOiBbXHJcbiAgICAgICAgICAgdW5pdE1peGluLFxyXG4gICAgICAgICAgIGNvbXB1dGVkTWl4aW4sXHJcbiAgICAgICAgICAgbnVtYmVyRm9ybWF0TWl4aW4sXHJcbiAgICAgICAgICAgbGFiZWxNaXhpblxyXG4gICAgICAgXSxcclxuICAgICAgIGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgICAgICAgICBldmVudEJ1cy4kb24oJ3Nob3dFcnJvcnMnLCgpID0+IHRoaXMuc2hvd0Vycm9ycyA9IHRydWUpO1xyXG4gICAgICAgICAgIGV2ZW50QnVzLiRvbigndmFsaWRhdGUnLCgpID0+IHtcclxuICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgICAgIH0pO1xyXG4gICAgICAgfSxcclxuICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICBpc051bWJlcih2YWwpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiAvXlxcZCskLy50ZXN0KHZhbCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgdmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlOyAvLyBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEVycm9yID0gbnVsbDtcclxuICAgICAgICAgICAgICAgaWYodGhpcy52YWwgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RXJyb3IgPSB0aGlzLmVycm9ycy5yZXF1aXJlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGlmICghdGhpcy5pc051bWJlcih0aGlzLnZhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEVycm9yID0gdGhpcy5lcnJvcnMubm90TnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgIH0sICAgICAgICAgICBcclxuICAgICAgICAgICBoYXNFcnJvcnNGb3JTaG93KCkge1xyXG4gICAgICAgICAgICAgICBpZiAoIXRoaXMuc2hvd0Vycm9ycyB8fCAhdGhpcy5jdXJyZW50RXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICBvbkNoYW5nZShldmVudCkge1xyXG4gICAgICAgICAgICAgICB0aGlzLnNob3dFcnJvcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgICAgICAgIGxldCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgICAgICAgICBkYXRhOiAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbCwgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICB2YWxpZDogdGhpcy52YWxpZFxyXG4gICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XHJcbiAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgIGRhdGEuY29tcHV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgZGF0YS50b3RhbCA9IHRoaXMudG90YWw7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSBcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT48L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTnVtYmVySW5wdXRCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzM2Y2RmYzcmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTnVtYmVySW5wdXRCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL051bWJlcklucHV0QmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzMzNmNkZmM3JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzMzNmNkZmM3JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzMzNmNkZmM3JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9OdW1iZXJJbnB1dEJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zMzZjZGZjNyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCczMzZjZGZjNycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL051bWJlcklucHV0QmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXAgY2hlY2tfX251bWJlclwiIH0sIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveFwiIH0sIFtcbiAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLmNoZWNrZWQsXG4gICAgICAgICAgICBleHByZXNzaW9uOiBcImNoZWNrZWRcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIixcbiAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJjaGVja2JveFwiLCBpZDogX3ZtLmlkIH0sXG4gICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgY2hlY2tlZDogQXJyYXkuaXNBcnJheShfdm0uY2hlY2tlZClcbiAgICAgICAgICAgID8gX3ZtLl9pKF92bS5jaGVja2VkLCBudWxsKSA+IC0xXG4gICAgICAgICAgICA6IF92bS5jaGVja2VkXG4gICAgICAgIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgY2hhbmdlOiBbXG4gICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyICQkYSA9IF92bS5jaGVja2VkLFxuICAgICAgICAgICAgICAgICQkZWwgPSAkZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgICQkYyA9ICQkZWwuY2hlY2tlZCA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSgkJGEpKSB7XG4gICAgICAgICAgICAgICAgdmFyICQkdiA9IG51bGwsXG4gICAgICAgICAgICAgICAgICAkJGkgPSBfdm0uX2koJCRhLCAkJHYpXG4gICAgICAgICAgICAgICAgaWYgKCQkZWwuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgJCRpIDwgMCAmJiAoX3ZtLmNoZWNrZWQgPSAkJGEuY29uY2F0KFskJHZdKSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgJCRpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgKF92bS5jaGVja2VkID0gJCRhLnNsaWNlKDAsICQkaSkuY29uY2F0KCQkYS5zbGljZSgkJGkgKyAxKSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF92bS5jaGVja2VkID0gJCRjXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBfdm0uY2hhbmdlXG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImN1c3RvbS1jb250cm9sLWxhYmVsXCIsIGF0dHJzOiB7IGZvcjogX3ZtLmlkIH0gfSxcbiAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpKV1cbiAgICAgIClcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5jaGVja2VkXG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5wdXQtYmxvY2tcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cFwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwidmFsXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBjbGFzczogeyBcImlzLWludmFsaWRcIjogX3ZtLmhhc0Vycm9yc0ZvclNob3coKSB9LFxuICAgICAgICAgICAgICBhdHRyczogeyBpZDogX3ZtLmlkLCB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiRW50ZXIgLi4uXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS52YWwgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkNoYW5nZSgkZXZlbnQpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBfdm0udmFsID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX3ZtLnVuaXRcbiAgICAgICAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLWFwcGVuZFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnVuaXQpKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF92bS5pc0NvbXB1dGVkXG4gICAgICAgICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC1hcHBlbmRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC10ZXh0XCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCJ4XCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJwcmljZVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKCtfdm0udW5pdFByaWNlKSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiArIF92bS5fcyhfdm0uZGljLnZhbHV0ZSkpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX3ZtLmlzQ29tcHV0ZWRcbiAgICAgICAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLWFwcGVuZFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIj1cIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcInByaWNlXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLl9mKFwic2VwYXJhdGVcIikoX3ZtLnRvdGFsKSkpXG4gICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIgKyBfdm0uX3MoX3ZtLmRpYy52YWx1dGUpKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0uaGFzRXJyb3JzRm9yU2hvdygpXG4gICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVscC1ibG9ja1wiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5jdXJyZW50RXJyb3IubWVzc2FnZSkpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG48ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBjaGVja19fbnVtYmVyXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveFwiPlxyXG4gICAgICAgIDxpbnB1dCBAY2hhbmdlPVwiY2hhbmdlXCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiIHR5cGU9XCJjaGVja2JveFwiIDppZD1cImlkXCIgdi1tb2RlbD1cImNoZWNrZWRcIj5cclxuICAgICAgICA8bGFiZWwgOmZvcj1cImlkXCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbFwiPnt7IHRpdGxlTGFiZWwgfX08L2xhYmVsPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IHYtaWY9XCJjaGVja2VkXCIgY2xhc3M9XCJpbnB1dC1ibG9ja1wiPlxyXG48ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cclxuXHJcbiAgICA8aW5wdXQgXHJcbiAgICAgICAgOmlkPVwiaWRcIlxyXG4gICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcbiAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICAgIDpjbGFzcz1cInsnaXMtaW52YWxpZCcgOiBoYXNFcnJvcnNGb3JTaG93KCkgfVwiIFxyXG4gICAgICAgIHYtbW9kZWw9XCJ2YWxcIlxyXG4gICAgICAgIEBjaGFuZ2U9XCJvbkNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIC4uLlwiPlxyXG4gICAgICAgIDxkaXYgdi1pZj1cInVuaXRcIiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj57eyB1bml0IH19PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgIHYtaWY9XCJpc0NvbXB1dGVkXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmRcIlxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+eDxzcGFuIGNsYXNzPVwicHJpY2VcIj57eyArdW5pdFByaWNlIH19PC9zcGFuPiB7eyBkaWMudmFsdXRlIH19PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgXHJcbiAgICAgICAgICAgIHYtaWY9XCJpc0NvbXB1dGVkXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmRcIlxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPj08c3BhbiBjbGFzcz1cInByaWNlXCI+e3sgdG90YWwgfCBzZXBhcmF0ZSB9fTwvc3Bhbj4ge3sgZGljLnZhbHV0ZSB9fTwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgPC9kaXY+ICAgICAgXHJcbiAgICA8ZGl2IHYtaWY9XCJoYXNFcnJvcnNGb3JTaG93KClcIiBjbGFzcz1cImhlbHAtYmxvY2tcIj57eyBjdXJyZW50RXJyb3IubWVzc2FnZSB9fTwvZGl2PiAgICAgICAgXHJcbjwvZGl2PlxyXG48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IHVuaXRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3VuaXRNaXhpbidcclxuICAgIGltcG9ydCB7IGxhYmVsTWl4aW4gfSBmcm9tICcuL01peGlucy9sYWJlbE1peGluJ1xyXG4gICAgaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nXHJcbiAgICBpbXBvcnQgeyBldmVudEJ1cyB9IGZyb20gJy4uLy4uL2V2ZW50QnVzJ1xyXG4gICAgaW1wb3J0IHsgbnVtYmVyRm9ybWF0TWl4aW4gfSBmcm9tICcuL01peGlucy9udW1iZXJGb3JtYXRNaXhpbidcclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBwcm9wczogW1xyXG4gICAgICAgICAgICAnZGljJywnbGFuZydcclxuICAgICAgICBdLCAgICAgICAgXHJcbiAgICAgICBkYXRhKCkge1xyXG4gICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAnaWQnICsgdGhpcy5wYXJhbXMuaWQsXHJcbiAgICAgICAgICAgIHZhbDogdGhpcy5wYXJhbXMudmFsdWUsICAgIFxyXG4gICAgICAgICAgICBjaGVja2VkOiB0aGlzLnBhcmFtcy5jaGVja2VkLCAgIFxyXG4gICAgICAgICAgICBjdXJyZW50RXJyb3I6IG51bGwsXHJcbiAgICAgICAgICAgIHNob3dFcnJvcnMgOiBmYWxzZSxcclxuICAgICAgICAgICAgdmFsaWQgOiB0cnVlLFxyXG4gICAgICAgICAgLy8gIHJlcXVpcmVkIDogZmFsc2UsXHJcbiAgICAgICAgICAgIGVycm9ycyA6IHtcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCLQn9C+0LvQtSDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdC+INC00LvRjyDQt9Cw0L/QvtC70L3QtdC90LjRj1wiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbm90TnVtYmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCLQl9Cw0L/QvtC70L3Rj9C10LzQvtC1INC/0L7Qu9C1INC00L7Qu9C20L3QviDQsdGL0YLRjCDRh9C40YHQu9C+0LxcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSxcclxuICAgICAgIG1peGluczogW1xyXG4gICAgICAgICAgIHVuaXRNaXhpbiwgY29tcHV0ZWRNaXhpbiwgbGFiZWxNaXhpbiwgbnVtYmVyRm9ybWF0TWl4aW5cclxuICAgICAgIF0sXHJcbiAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgIHRvdGFsKCkge1xyXG4gICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDb21wdXRlZCB8fCAhdGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBsZXQgdmFsID0gK3RoaXMudmFsICogKCt0aGlzLnVuaXRQcmljZSk7XHJcbiAgICAgICAgICAgICAgIGlmIChpc05hTih2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0sICAgICAgIFxyXG4gICAgICAgY3JlYXRlZCgpIHtcclxuICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgICAgIGV2ZW50QnVzLiRvbignc2hvd0Vycm9ycycsKCkgPT4gdGhpcy5zaG93RXJyb3JzID0gdHJ1ZSk7XHJcbiAgICAgICAgICAgZXZlbnRCdXMuJG9uKCd2YWxpZGF0ZScsKCkgPT4ge1xyXG4gICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlKCk7XHJcbiAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgfSk7XHJcbiAgICAgICB9LFxyXG4gICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgIGNoYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgfSwgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpc051bWJlcih2YWwpIHsgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiAvXlxcZCskLy50ZXN0KHZhbCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgdmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlOyAvLyBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICBpZih0aGlzLnZhbCA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFcnJvciA9IHRoaXMuZXJyb3JzLnJlcXVpcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTnVtYmVyKHRoaXMudmFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RXJyb3IgPSB0aGlzLmVycm9ycy5ub3ROdW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgfSwgICAgICAgICAgIFxyXG4gICAgICAgICAgIGhhc0Vycm9yc0ZvclNob3coKSB7XHJcbiAgICAgICAgICAgICAgIGlmICghdGhpcy5zaG93RXJyb3JzIHx8ICF0aGlzLmN1cnJlbnRFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIG9uQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9ycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGUoKTtcclxuICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6ICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ6IHRoaXMuY2hlY2tlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkOiB0aGlzLnZhbGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHV0ZWQgJiYgdGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICBkYXRhLmNvbXB1dGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgIGRhdGEudG90YWwgPSB0aGlzLnRvdGFsO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0gXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLmNoZWNrX19udW1iZXIge1xyXG4gICAgICAgZGlzcGxheTogZmxleDsgXHJcbiAgICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcbiAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgICAganVzdGlmeS1jb250ZW50OiBsZWZ0O1xyXG4gICAgfVxyXG4gICAgLmNoZWNrX19udW1iZXIgLmN1c3RvbS1jaGVja2JveCB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycmVtO1xyXG4gICAgfVxyXG4gICAgLmNoZWNrX19udW1iZXIgLmlucHV0LWJsb2NrIHtcclxuICAgICAgICBmbGV4LWdyb3c6IDE7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0NoZWNrTnVtYmVySW5wdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ2hlY2tOdW1iZXJJbnB1dC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0NoZWNrTnVtYmVySW5wdXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTEzNDBmNjE0JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0NoZWNrTnVtYmVySW5wdXQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9DaGVja051bWJlcklucHV0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9DaGVja051bWJlcklucHV0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTEzNDBmNjE0JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIxMzQwZjYxNFwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkc6XFxcXE9wZW5TZXJ2ZXJcXFxcZG9tYWluc1xcXFxhZ3JvZm9ybXMubG9jYWxcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMTM0MGY2MTQnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMTM0MGY2MTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMTM0MGY2MTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0NoZWNrTnVtYmVySW5wdXQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTEzNDBmNjE0JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzEzNDBmNjE0Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQ2hlY2tOdW1iZXJJbnB1dC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1ncm91cFwiIH0sIFtcbiAgICBfYyhcImxhYmVsXCIsIHsgc3RhdGljQ2xhc3M6IFwiY29udHJvbC1sYWJlbFwiIH0sIFtcbiAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcInNlbGVjdFwiLFxuICAgICAge1xuICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICB2YWx1ZTogX3ZtLnNlbGVjdGVkLFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJzZWxlY3RlZFwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgYXR0cnM6IHsgbmFtZTogX3ZtLmlkLCBpZDogX3ZtLmlkIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgY2hhbmdlOiBbXG4gICAgICAgICAgICBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyICQkc2VsZWN0ZWRWYWwgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gICAgICAgICAgICAgICAgLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLCBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gby5zZWxlY3RlZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgdmFsID0gXCJfdmFsdWVcIiBpbiBvID8gby5fdmFsdWUgOiBvLnZhbHVlXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdmFsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgX3ZtLnNlbGVjdGVkID0gJGV2ZW50LnRhcmdldC5tdWx0aXBsZVxuICAgICAgICAgICAgICAgID8gJCRzZWxlY3RlZFZhbFxuICAgICAgICAgICAgICAgIDogJCRzZWxlY3RlZFZhbFswXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92bS5jaGFuZ2VcbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfdm0uX2woX3ZtLmVudW1zLCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBfYyhcIm9wdGlvblwiLCB7IGRvbVByb3BzOiB7IHZhbHVlOiBlbGVtZW50LmlkIH0gfSwgW1xuICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmdldE5hbWUoZWxlbWVudC5uYW1lLCBlbGVtZW50Lm5hbWVfZW5nKSkpXG4gICAgICAgIF0pXG4gICAgICB9KSxcbiAgICAgIDBcbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmaWVsZF9fZGVzY1wiIH0sIFtcbiAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmRlc2NyaXB0aW9uTGFiZWwpKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLmlzQ29tcHV0ZWRcbiAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmaWVsZF9fcHJpY2VcIiB9LCBbXG4gICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwicHJpY2VcIiB9LCBbX3ZtLl92KF92bS5fcyhfdm0udG90YWwpKV0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiArIF92bS5fcyhfdm0uZGljLnZhbHV0ZSkpXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0IGNvbnN0IHNlbGVjdE1peGluID0ge1xyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBlbnVtczogdGhpcy5wYXJhbXMuZW51bXNMaXN0LCBcclxuICAgICAgICB9XHJcbiAgICB9ICAgICAgIFxyXG59IiwiaW1wb3J0IHsgbGFuZ3VhZ2VzIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGFuZydcclxuZXhwb3J0IGNvbnN0IHRleHRUcmFuc2xhdGVNaXhpbiA9IHtcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBnZXROYW1lKHZhbCx2YWxFbmcpIHtcclxuICAgICAgICAgICAgaWYgKCh0aGlzLmxhbmcgPT0gbGFuZ3VhZ2VzLnJ1c3NpYW4pIHx8ICF2YWxFbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbEVuZztcclxuICAgICAgICB9LCBcclxuICAgIH0sICAgIFxyXG59IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NlbGVjdEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NlbGVjdEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgIDxsYWJlbCBjbGFzcz1cImNvbnRyb2wtbGFiZWxcIj57eyB0aXRsZUxhYmVsIH19PC9sYWJlbD5cclxuICAgIDxzZWxlY3QgIEBjaGFuZ2U9XCJjaGFuZ2VcIiA6bmFtZT1cImlkXCIgOmlkPVwiaWRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIHYtbW9kZWw9XCJzZWxlY3RlZFwiPlxyXG4gICAgICAgIDxvcHRpb24gdi1mb3I9XCJlbGVtZW50IGluIGVudW1zXCIgOnZhbHVlPVwiZWxlbWVudC5pZFwiPnt7IGdldE5hbWUoZWxlbWVudC5uYW1lLCBlbGVtZW50Lm5hbWVfZW5nKSB9fTwvb3B0aW9uPlxyXG4gICAgPC9zZWxlY3Q+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZmllbGRfX2Rlc2NcIj57eyBkZXNjcmlwdGlvbkxhYmVsIH19PC9kaXY+XHJcbiAgICA8ZGl2IHYtaWY9XCJpc0NvbXB1dGVkXCIgY2xhc3M9XCJmaWVsZF9fcHJpY2VcIj48c3BhbiBjbGFzcz1cInByaWNlXCI+e3sgdG90YWwgfX08L3NwYW4+IHt7IGRpYy52YWx1dGUgfX08L2Rpdj5cclxuPC9kaXY+XHJcblxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgeyB1bml0TWl4aW4gfSBmcm9tICcuL01peGlucy91bml0TWl4aW4nO1xyXG5pbXBvcnQgeyBzZWxlY3RNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3NlbGVjdE1peGluJztcclxuaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nOyAgXHJcbmltcG9ydCB7IGxhYmVsTWl4aW4gfSBmcm9tICcuL01peGlucy9sYWJlbE1peGluJ1xyXG5pbXBvcnQgeyB0ZXh0VHJhbnNsYXRlTWl4aW4gfSBmcm9tICcuL01peGlucy90ZXh0VHJhbnNsYXRlTWl4aW4nO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgcHJvcHM6IFtcclxuICAgICAgICAgICAgJ2xhbmcnLCdkaWMnXHJcbiAgICAgICAgXSwgICAgIFxyXG4gICAgICAgZGF0YSgpIHtcclxuICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICdpZCcgKyB0aGlzLnBhcmFtcy5pZCxcclxuICAgICAgICAgICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHRoaXMucGFyYW1zLnZhbHVlICAgICAgICAgICAgICBcclxuICAgICAgICAgICB9XHJcbiAgICAgICB9LCAgXHJcbiAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgIHRvdGFsKCkge1xyXG4gICAgICAgICAgICAgICBsZXQgdG90YWwgPSAwO1xyXG4gICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNDb21wdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsO1xyXG4gICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWwgb2YgdGhpcy5lbnVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKGVsLmlkID09IHRoaXMuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCA9ICtlbC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGlmIChpc05hTih0b3RhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHJldHVybiB0b3RhbDtcclxuICAgICAgICAgICB9XHJcbiAgICAgICB9LCAgXHJcbiAgICAgICBjcmVhdGVkKCkge1xyXG4gICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICB9LCAgICAgICAgICAgIFxyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICBjaGFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMucGFyYW1zLnZhbHVlID0gdGhpcy5zZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgfSwgICAgICAgICAgICBcclxuICAgICAgICAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICAgICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgZGF0YTogIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zZWxlY3RlZCwgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICB2YWxpZDogdGhpcy52YWxpZCAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDb21wdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgZGF0YS5jb21wdXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICBkYXRhLnRvdGFsID0gdGhpcy50b3RhbDtcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgIG1peGluczogW1xyXG4gICAgICAgICAgIHVuaXRNaXhpbixcclxuICAgICAgICAgICBzZWxlY3RNaXhpbixcclxuICAgICAgICAgICBjb21wdXRlZE1peGluLFxyXG4gICAgICAgICAgIGxhYmVsTWl4aW4sXHJcbiAgICAgICAgICAgdGV4dFRyYW5zbGF0ZU1peGluICAgICAgICAgICBcclxuICAgICAgIF0sICAgIFxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLmZpZWxkX19wcmljZSB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9TZWxlY3RCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWM2ZWU1ZjQmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vU2VsZWN0QmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9TZWxlY3RCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vU2VsZWN0QmxvY2sudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MWM2ZWU1ZjQmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjFjNmVlNWY0XCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcxYzZlZTVmNCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcxYzZlZTVmNCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcxYzZlZTVmNCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vU2VsZWN0QmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTFjNmVlNWY0JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzFjNmVlNWY0Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvU2VsZWN0QmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXBcIiB9LCBbXG4gICAgX2MoXCJsYWJlbFwiLCB7IGF0dHJzOiB7IGZvcjogX3ZtLmlkIH0gfSwgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpKV0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwXCIgfSwgW1xuICAgICAgICBfdm0uZnJpZXplRmllbGRUeXBlICE9IDFcbiAgICAgICAgICA/IF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwidmFsXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyBpZDogX3ZtLmlkLCB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiRW50ZXIgLi4uXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS52YWwgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkNoYW5nZSgkZXZlbnQpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBfdm0udmFsID0gJGV2ZW50LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IF9jKFwidGV4dGFyZWFcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwidmFsXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiZnJpZXplX19hcmVhXCIsXG4gICAgICAgICAgICAgICAgY29sczogXCIzMFwiLFxuICAgICAgICAgICAgICAgIHJvd3M6IFwiMTBcIixcbiAgICAgICAgICAgICAgICBpZDogX3ZtLmlkLFxuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIkVudGVyIC4uLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0udmFsIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25DaGFuZ2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLnZhbCA9ICRldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0uaXNQYWlkXG4gICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwIGFkZGl0aW9tYWxcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyhfdm0uZGljLmFkZFN5bWJvbHMpICsgXCI6IFwiKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLWFwcGVuZFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC10ZXh0XCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLnBhaWVkRnJpemVTaWducykgKyBcIiBcIiArIF92bS5fcyhfdm0uZGljLnN5bWJvbClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC1hcHBlbmRcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5wdXQtZ3JvdXAtdGV4dFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgXCJ4IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmZyaXplRGlnaXRQcmljZSkgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmRpYy52YWx1dGUpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5wdXQtZ3JvdXAtYXBwZW5kXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIFwiPSBcIiArIF92bS5fcyhfdm0uZnJpemVQcmljZSkgKyBcIiBcIiArIF92bS5fcyhfdm0uZGljLnZhbHV0ZSlcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKVxuICAgICAgICA6IF92bS5fZSgpXG4gICAgXSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbjxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XHJcbiAgICA8bGFiZWwgOmZvcj1cImlkXCI+e3sgdGl0bGVMYWJlbCB9fTwvbGFiZWw+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMlwiPiAgICBcclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgdi1pZj1cImZyaWV6ZUZpZWxkVHlwZSAhPSAxXCJcclxuICAgICAgICAgICAgICAgICAgICA6aWQ9XCJpZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInZhbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgLi4uXCI+ICBcclxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBcclxuICAgICAgICAgICAgICAgICAgICB2LWVsc2VcclxuICAgICAgICAgICAgICAgICAgICBuYW1lPVwiZnJpZXplX19hcmVhXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgY29scz1cIjMwXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgcm93cz1cIjEwXCJcclxuICAgICAgICAgICAgICAgICAgICA6aWQ9XCJpZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdi1tb2RlbD1cInZhbFwiXHJcbiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW50ZXIgLi4uXCIgIFxyXG4gICAgICAgICAgICAgICAgPiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC90ZXh0YXJlYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2ICBjbGFzcz1cImNvbC0xMlwiIHYtaWY9XCJpc1BhaWRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cCBhZGRpdGlvbWFsXCI+ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPHNwYW4+e3tkaWMuYWRkU3ltYm9sc319OiA8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj57e3BhaWVkRnJpemVTaWduc319IHt7IGRpYy5zeW1ib2wgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPngge3tmcml6ZURpZ2l0UHJpY2V9fSB7eyBkaWMudmFsdXRlIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj49IHt7ZnJpemVQcmljZX19IHt7IGRpYy52YWx1dGUgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+IFxyXG4gICAgaW1wb3J0IHsgbGFiZWxNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2xhYmVsTWl4aW4nICBcclxuICAgIGV4cG9ydCBkZWZhdWx0IHsgICAgICAgIFxyXG4gICAgICAgIHByb3BzOiBbXHJcbiAgICAgICAgICAgICdsYW5nJyxcclxuICAgICAgICAgICAgJ3BhcmFtcycsXHJcbiAgICAgICAgICAgICdkaWMnXHJcbiAgICAgICAgXSxcclxuXHJcbiAgICAgICBkYXRhKCkgeyAgICAgICAgICAgXHJcbiAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6ICdpZCcgKyB0aGlzLnBhcmFtcy5pZCxcclxuICAgICAgICAgICAgdmFsOiB0aGlzLnBhcmFtcy52YWx1ZSxcclxuICAgICAgICAgICAgY3VycmVudFZhbDogdGhpcy5wYXJhbXMudmFsdWUsICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0sICAgICAgXHJcbiAgICAgICBtaXhpbnM6IFtcclxuICAgICAgICAvLyAgdW5pdE1peGluLFxyXG4gICAgICAgICAgIGxhYmVsTWl4aW5cclxuICAgICAgIF0sXHJcbiAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgIHN5bXNMZW5ndGgoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbC50cmltKCkubGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZnJpemVEaWdpdFByaWNlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5wYXJhbXMucGFyYW1ldGVycy5kaWdpdFByaWNlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZyaWV6ZUZpZWxkVHlwZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRoaXMucGFyYW1zLnBhcmFtZXRlcnMuZnJpZXplRmllbGRUeXBlKTtcclxuICAgICAgICB9LCAgICAgICAgXHJcbiAgICAgICAgZnJpemVGcmVlRGlnaXRzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5wYXJhbXMucGFyYW1ldGVycy5mcmVlRGlnaXRDb3VudCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1BhaWQoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy52YWwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLnN5bXNMZW5ndGggPiB0aGlzLmZyaXplRnJlZURpZ2l0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwYWllZEZyaXplU2lnbnM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHRoaXMuaXNQYWlkKSA/IHRoaXMuc3ltc0xlbmd0aCAtIHRoaXMuZnJpemVGcmVlRGlnaXRzIDogMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZyaXplUHJpY2U6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mcml6ZURpZ2l0UHJpY2UgKiB0aGlzLnBhaWVkRnJpemVTaWducztcclxuICAgICAgICB9LCBcclxuICAgICAgICB0b3RhbCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZnJpemVQcmljZTtcclxuICAgICAgICB9XHJcbiAgICAgICB9LFxyXG4gICAgICAgY3JlYXRlZCgpIHtcclxuICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgfSxcclxuICAgICAgIG1ldGhvZHM6IHsgICAgICAgICAgIFxyXG4gICAgICAgICAgIG9uQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0aGlzLnRvdGFsLFxyXG4gICAgICAgICAgICAgICAgICAgZGF0YTogIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWwsICBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgdmFsaWQ6IHRydWVcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0gXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGU+XHJcbi5hZGRpdGlvbWFsIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHJpZ2h0O1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIG1hcmdpbi10b3A6IDVweDtcclxufVxyXG4uYWRkaXRpb21hbCBzcGFuIHtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDFyZW07XHJcbn1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRnJpZXplQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRnJpZXplQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9GcmllemVCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MWU5Y2JmY2YmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRnJpZXplQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9GcmllemVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vRnJpZXplQmxvY2sudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkc6XFxcXE9wZW5TZXJ2ZXJcXFxcZG9tYWluc1xcXFxhZ3JvZm9ybXMubG9jYWxcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnMWU5Y2JmY2YnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMWU5Y2JmY2YnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMWU5Y2JmY2YnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0ZyaWV6ZUJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xZTljYmZjZiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcxZTljYmZjZicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0ZyaWV6ZUJsb2NrLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWdyb3VwXCIgfSwgW1xuICAgIF9jKFxuICAgICAgXCJzZWxlY3RcIixcbiAgICAgIHtcbiAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgdmFsdWU6IF92bS5zZWxlY3RlZCxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwic2VsZWN0ZWRcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgICAgIGF0dHJzOiB7IG5hbWU6IF92bS5pZCwgaWQ6IF92bS5pZCwgbXVsdGlwbGU6IFwiXCIgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBjaGFuZ2U6IFtcbiAgICAgICAgICAgIGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICB2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgICAgICAgICAgICAgICAuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsIGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBvLnNlbGVjdGVkXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBcIl92YWx1ZVwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWVcbiAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBfdm0uc2VsZWN0ZWQgPSAkZXZlbnQudGFyZ2V0Lm11bHRpcGxlXG4gICAgICAgICAgICAgICAgPyAkJHNlbGVjdGVkVmFsXG4gICAgICAgICAgICAgICAgOiAkJHNlbGVjdGVkVmFsWzBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3ZtLmNoYW5nZVxuICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF92bS5fbChfdm0uZW51bXMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIF9jKFwib3B0aW9uXCIsIHsgZG9tUHJvcHM6IHsgdmFsdWU6IGVsZW1lbnQuaWQgfSB9LCBbXG4gICAgICAgICAgX3ZtLl92KF92bS5fcyhlbGVtZW50Lm5hbWUpKVxuICAgICAgICBdKVxuICAgICAgfSksXG4gICAgICAwXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZmllbGRfX2Rlc2NcIiB9LCBbXG4gICAgICBfdm0uX3YoX3ZtLl9zKF92bS5kZXNjcmlwdGlvbkxhYmVsKSlcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5pc0NvbXB1dGVkXG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZmllbGRfX3ByaWNlXCIgfSwgW1xuICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcInByaWNlXCIgfSwgW192bS5fdihfdm0uX3MoX3ZtLnRvdGFsKSldKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIgKyBfdm0uX3MoX3ZtLmRpYy52YWx1dGUpKVxuICAgICAgICBdKVxuICAgICAgOiBfdm0uX2UoKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgIDxzZWxlY3QgIEBjaGFuZ2U9XCJjaGFuZ2VcIiA6bmFtZT1cImlkXCIgOmlkPVwiaWRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIG11bHRpcGxlIHYtbW9kZWw9XCJzZWxlY3RlZFwiPlxyXG4gICAgICAgIDxvcHRpb24gdi1mb3I9XCJlbGVtZW50IGluIGVudW1zXCIgOnZhbHVlPVwiZWxlbWVudC5pZFwiPnt7IGVsZW1lbnQubmFtZSB9fTwvb3B0aW9uPlxyXG4gICAgPC9zZWxlY3Q+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZmllbGRfX2Rlc2NcIj57eyBkZXNjcmlwdGlvbkxhYmVsIH19PC9kaXY+XHJcbiAgICA8ZGl2IHYtaWY9XCJpc0NvbXB1dGVkXCIgY2xhc3M9XCJmaWVsZF9fcHJpY2VcIj48c3BhbiBjbGFzcz1cInByaWNlXCI+e3sgdG90YWwgfX08L3NwYW4+IHt7IGRpYy52YWx1dGUgfX08L2Rpdj5cclxuPC9kaXY+XHJcblxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgeyB1bml0TWl4aW4gfSBmcm9tICcuL01peGlucy91bml0TWl4aW4nO1xyXG5pbXBvcnQgeyBzZWxlY3RNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3NlbGVjdE1peGluJztcclxuaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nO1xyXG5pbXBvcnQgeyBsYWJlbE1peGluIH0gZnJvbSAnLi9NaXhpbnMvbGFiZWxNaXhpbic7XHJcbmltcG9ydCB7IHRleHRUcmFuc2xhdGVNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3RleHRUcmFuc2xhdGVNaXhpbic7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBwcm9wczogW1xyXG4gICAgICAgICAgICAnbGFuZycsJ2RpYydcclxuICAgICAgICBdLCAgICAgXHJcbiAgICAgICBkYXRhKCkge1xyXG4gICAgICAgICAgIGxldCB2YWwgPSBBcnJheS5pc0FycmF5KHRoaXMucGFyYW1zLnZhbHVlKSA/IHRoaXMucGFyYW1zLnZhbHVlIDogW11cclxuICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaWQ6ICdpZCcgKyB0aGlzLnBhcmFtcy5pZCxcclxuICAgICAgICAgICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHZhbFxyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0sIFxyXG4gICAgICAgY29tcHV0ZWQ6IHtcclxuICAgICAgICAgICB0b3RhbCgpIHtcclxuICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWwgb2YgdGhpcy5lbnVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgaWYodGhpcy5zZWxlY3RlZC5pbmRleE9mKGVsLmlkKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsKz0gK2VsLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHJldHVybiAgdG90YWw7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSwgICAgICAgICAgIFxyXG4gICAgICAgY3JlYXRlZCgpIHtcclxuICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgfSwgICAgICAgICAgIFxyXG4gICAgICAgbWl4aW5zOiBbXHJcbiAgICAgICAgICAgdW5pdE1peGluLFxyXG4gICAgICAgICAgIHNlbGVjdE1peGluLFxyXG4gICAgICAgICAgIGNvbXB1dGVkTWl4aW4sXHJcbiAgICAgICAgICAgbGFiZWxNaXhpbixcclxuICAgICAgICAgICB0ZXh0VHJhbnNsYXRlTWl4aW5cclxuICAgICAgIF0sXHJcbiAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgY2hhbmdlKCkge1xyXG4gICAgICAgICAgICAgICB0aGlzLnBhcmFtcy52YWx1ZSA9IHRoaXMuc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpOyAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgIH0sICAgICAgICAgICBcclxuICAgICAgICAgICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICAgICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCxcclxuICAgICAgICAgICAgICAgICAgIGRhdGE6ICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuc2VsZWN0ZWQsICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgdmFsaWQ6IHRoaXMudmFsaWQgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgIGRhdGEuY29tcHV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgZGF0YS50b3RhbCA9IHRoaXMudG90YWw7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSAgICBcclxufVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIHNjb3BlZD5cclxuICAgIC5maWVsZF9fcHJpY2Uge1xyXG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgfVxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NdWx0aVNlbGVjdEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL011bHRpU2VsZWN0QmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9NdWx0aVNlbGVjdEJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zYjM0OWU5YSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9NdWx0aVNlbGVjdEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTXVsdGlTZWxlY3RCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vTXVsdGlTZWxlY3RCbG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zYjM0OWU5YSZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiM2IzNDllOWFcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzNiMzQ5ZTlhJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzNiMzQ5ZTlhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzNiMzQ5ZTlhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9NdWx0aVNlbGVjdEJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zYjM0OWU5YSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCczYjM0OWU5YScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL011bHRpU2VsZWN0QmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uX20oMClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYmxvY2tfX3VuZGVmaW5lZFwiIH0sIFtcbiAgICAgIF9jKFwiaDJcIiwgW192bS5fdihcItCd0LXQuNC30LLQtdGB0YLQvdGL0Lkg0YLQuNC/INCx0LvQvtC60LBcIildKVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9VbmRlZmluZWRCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YTkyN2IzZDAmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vVW5kZWZpbmVkQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9VbmRlZmluZWRCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vVW5kZWZpbmVkQmxvY2sudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmc2NvcGU9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdhOTI3YjNkMCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdhOTI3YjNkMCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdhOTI3YjNkMCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVW5kZWZpbmVkQmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWE5MjdiM2QwJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2E5MjdiM2QwJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvVW5kZWZpbmVkQmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxyXG4gICA8ZGl2IGNsYXNzPVwiYmxvY2tfX3VuZGVmaW5lZFwiPlxyXG4gICAgICA8aDI+0J3QtdC40LfQstC10YHRgtC90YvQuSDRgtC40L8g0LHQu9C+0LrQsDwvaDI+XHJcbiAgIDwvZGl2PiBcclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgXHJcbn1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBzY29wZT5cclxuICAgLmJsb2NrX191bmRlZmluZWQgaDIge1xyXG4gICAgICBjb2xvcjogcmVkO1xyXG4gICB9XHJcbjwvc3R5bGU+IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1ncm91cFwiIH0sXG4gICAgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsYWJlbFwiIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS5wYXJhbXMubmFtZSkpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLl9sKF92bS5lbnVtcywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrXCIgfSwgW1xuICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJzZWxlY3RlZFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrLWlucHV0XCIsXG4gICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInJhZGlvXCIsIG5hbWU6IF92bS5pZCB9LFxuICAgICAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICAgICAgdmFsdWU6IGVsZW1lbnQuaWQsXG4gICAgICAgICAgICAgIGNoZWNrZWQ6IF92bS5fcShfdm0uc2VsZWN0ZWQsIGVsZW1lbnQuaWQpXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgY2hhbmdlOiBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBfdm0uc2VsZWN0ZWQgPSBlbGVtZW50LmlkXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfdm0uY2hhbmdlXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwibGFiZWxcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWNoZWNrLWxhYmVsXCIgfSwgW1xuICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhlbGVtZW50Lm5hbWUpKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICB9KVxuICAgIF0sXG4gICAgMlxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG48ZGl2IGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgPGRpdiBjbGFzcz1cImxhYmVsXCI+e3sgcGFyYW1zLm5hbWUgfX08L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWZvcj1cImVsZW1lbnQgaW4gZW51bXNcIiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgQGNoYW5nZT1cImNoYW5nZVwiIGNsYXNzPVwiZm9ybS1jaGVjay1pbnB1dFwiIHR5cGU9XCJyYWRpb1wiIHYtbW9kZWw9XCJzZWxlY3RlZFwiIDpuYW1lPVwiaWRcIiA6dmFsdWU9XCJlbGVtZW50LmlkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiZm9ybS1jaGVjay1sYWJlbFwiPnt7IGVsZW1lbnQubmFtZSB9fTwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICAgIFxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgeyB1bml0TWl4aW4gfSBmcm9tICcuL01peGlucy91bml0TWl4aW4nOyAgICBcclxuaW1wb3J0IHsgc2VsZWN0TWl4aW4gfSBmcm9tICcuL01peGlucy9zZWxlY3RNaXhpbic7XHJcbmltcG9ydCB7IGNvbXB1dGVkTWl4aW4gfSBmcm9tICcuL01peGlucy9jb21wdXRlZE1peGluJzsgXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6ICdpZCcgKyB0aGlzLnBhcmFtcy5pZCwgXHJcbiAgICAgICAgICAgIHZhbDogdGhpcy5wYXJhbXMudmFsdWUsICAgXHJcbiAgICAgICAgICAgIHZhbGlkIDogdHJ1ZSxcclxuICAgICAgICAgICAgc2VsZWN0ZWQ6IHRoaXMucGFyYW1zLnZhbHVlXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgIH0sICAgICAgXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgY2hhbmdlKCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhcmFtcy52YWx1ZSA9IHRoaXMuc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfSwgICAgICAgICAgICBcclxuICAgICAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5zZWxlY3RlZCwgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbGlkOiB0aGlzLnZhbGlkICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEuY29tcHV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZGF0YS50b3RhbCA9IHRoaXMudG90YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgICAgXHJcbiAgICBjb21wdXRlZDoge1xyXG4gICAgICAgIHRvdGFsKCkge1xyXG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNDb21wdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChjb25zdCBlbCBvZiB0aGlzLmVudW1zKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWwuaWQgPT0gdGhpcy5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsID0gK2VsLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXNOYU4odG90YWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gIHRvdGFsO1xyXG4gICAgICAgIH1cclxuICAgIH0sICAgICBcclxuICAgIG1peGluczogW1xyXG4gICAgICAgIHVuaXRNaXhpbixcclxuICAgICAgICBzZWxlY3RNaXhpbixcclxuICAgICAgICBjb21wdXRlZE1peGluXHJcbiAgICBdLFxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLmxhYmVsIHtcclxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUmFkaW9CbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9SYWRpb0Jsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vUmFkaW9CbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YTM3YmE1NjYmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vUmFkaW9CbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1JhZGlvQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1JhZGlvQmxvY2sudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YTM3YmE1NjYmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImEzN2JhNTY2XCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdhMzdiYTU2NicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdhMzdiYTU2NicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdhMzdiYTU2NicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vUmFkaW9CbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YTM3YmE1NjYmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignYTM3YmE1NjYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImFzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9SYWRpb0Jsb2NrLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJlcXVpcG1lbnRzLWxpc3RfX2NvbnRhaW5lclwiIH0sIFtcbiAgICBfYyhcbiAgICAgIFwidWxcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwiYWRkaXRpb25hbC1lcXVpcG1lbnRfX2xpc3RcIiB9LFxuICAgICAgW1xuICAgICAgICBfdm0uX2woX3ZtLmNhdGVnb3JpZXMsIGZ1bmN0aW9uKGNhdGVnb3J5LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBfdm0uaXNTaG93ZWQoY2F0ZWdvcnkuaWQpXG4gICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICBcImxpXCIsXG4gICAgICAgICAgICAgICAgICB7IGtleTogaW5kZXggfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJzcGFuXCIsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uZXhwYW5kKGNhdGVnb3J5LmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uZ2V0TmFtZShjYXRlZ29yeS5uYW1lLCBjYXRlZ29yeS5uYW1lX2VuZykpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImVxdWlwbWVudC1saXN0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsOiBfdm0udmFsdWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGNhdGVnb3J5LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRJZDogX3ZtLnBhcmFtcy5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50QnVzOiBfdm0uYnVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGljOiBfdm0uZGljLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFuZzogX3ZtLmxhbmdcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGNoYW5nZVZhbHVlOiBfdm0uc2V0VmFsdWUgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgICBdLFxuICAgICAgMlxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfYyhcInRhYmxlXCIsIHsgc3RhdGljQ2xhc3M6IFwidGFibGVcIiB9LCBbXG4gICAgICBfYyhcbiAgICAgICAgXCJ0Ym9keVwiLFxuICAgICAgICBbXG4gICAgICAgICAgX3ZtLl9sKF92bS52YWx1ZXMsIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gX2MoXCJ0clwiLCB7IGtleToga2V5IH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyh2YWwuY29kZSkpXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoX3ZtLmdldE5hbWUodmFsLm5hbWUsIHZhbC5uYW1lX2VuZykpKV0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInRkXCIsIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLl9mKFwic2VwYXJhdGVcIikodmFsLmNvdW50KSkgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0TmFtZSh2YWwudW5pdC5zaG9ydF9uYW1lLCB2YWwudW5pdC5zaG9ydF9uYW1lX2VuZylcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwidGRcIiwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIFwieFwiICtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5fZihcInNlcGFyYXRlXCIpKHZhbC5wcmljZSkpICtcbiAgICAgICAgICAgICAgICAgICAgXCIgXCIgK1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmRpYy52YWx1dGUpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgXCI9XCIgK1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLl9mKFwic2VwYXJhdGVcIikodmFsLnByaWNlICogdmFsLmNvdW50KSkgK1xuICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uZGljLnZhbHV0ZSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX3ZtLmlzQ29tcHV0ZWRcbiAgICAgICAgICAgID8gX2MoXCJ0clwiLCBbXG4gICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCB7IHN0YXRpY0NsYXNzOiBcInRvdGFsXCIsIGF0dHJzOiB7IGNvbHNwYW46IFwiNVwiIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmRpYy50b3RhbC50b3RhbE1zZykgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiOiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5fZihcInNlcGFyYXRlXCIpKF92bS50b3RhbCkpICtcbiAgICAgICAgICAgICAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5kaWMudmFsdXRlKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgIF0sXG4gICAgICAgIDJcbiAgICAgIClcbiAgICBdKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX3ZtLmV4cGFuZFxuICAgID8gX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyXCIgfSxcbiAgICAgICAgX3ZtLl9sKF92bS5lcXVpcG1lbnRzLCBmdW5jdGlvbihlcXVpcG1lbnQsIGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1ncm91cFwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwibGFiZWxcIiwgeyBhdHRyczogeyBmb3I6IF92bS5nZXRJZChlcXVpcG1lbnQuaWQpIH0gfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5nZXROYW1lKGVxdWlwbWVudC5uYW1lLCBlcXVpcG1lbnQubmFtZV9lbmcpKSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5wdXQtZ3JvdXBcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5pbnB1dHNbZXF1aXBtZW50LmlkXSxcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJpbnB1dHNbZXF1aXBtZW50LmlkXVwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiRW50ZXIgLi4uXCIgfSxcbiAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmlucHV0c1tlcXVpcG1lbnQuaWRdIH0sXG4gICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2V0VmFsKGVxdWlwbWVudCwgX3ZtLmlucHV0c1tlcXVpcG1lbnQuaWRdKVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoX3ZtLmlucHV0cywgZXF1aXBtZW50LmlkLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5wdXQtZ3JvdXAtYXBwZW5kXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0TmFtZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGVxdWlwbWVudC51bml0LnNob3J0X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQudW5pdC5zaG9ydF9uYW1lX2VuZ1xuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLWFwcGVuZFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC10ZXh0XCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwieFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcInByaWNlXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5fZihcInNlcGFyYXRlXCIpKCtlcXVpcG1lbnQucHJpY2UpKSlcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiICsgX3ZtLl9zKF92bS5kaWMudmFsdXRlKSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC1hcHBlbmRcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5wdXQtZ3JvdXAtdGV4dFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIj1cIiksXG4gICAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJwcmljZVwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fZihcInNlcGFyYXRlXCIpKFxuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uZ2V0VG90YWxQcmljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpcG1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgK192bS5pbnB1dHNbZXF1aXBtZW50LmlkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiArIF92bS5fcyhfdm0uZGljLnZhbHV0ZSkpXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgfSksXG4gICAgICAgIDBcbiAgICAgIClcbiAgICA6IF92bS5fZSgpXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiB2LWlmPVwiZXhwYW5kXCIgY2xhc3M9XCJjb250YWluZXJcIj5cclxuICAgICAgICA8ZGl2IHYtZm9yPVwiKGVxdWlwbWVudCxpbmRleCkgaW4gZXF1aXBtZW50c1wiIGNsYXNzPVwiZm9ybS1ncm91cFwiPlxyXG4gICAgICAgICAgICA8bGFiZWwgOmZvcj1cImdldElkKGVxdWlwbWVudC5pZClcIj57eyBnZXROYW1lKGVxdWlwbWVudC5uYW1lLCBlcXVpcG1lbnQubmFtZV9lbmcpIH19PC9sYWJlbD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZT1cInNldFZhbChlcXVpcG1lbnQsaW5wdXRzW2VxdWlwbWVudC5pZF0pXCIgdi1tb2RlbD1cImlucHV0c1tlcXVpcG1lbnQuaWRdXCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiRW50ZXIgLi4uXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAtYXBwZW5kXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpbnB1dC1ncm91cC10ZXh0XCI+e3sgZ2V0TmFtZShlcXVpcG1lbnQudW5pdC5zaG9ydF9uYW1lLCBlcXVpcG1lbnQudW5pdC5zaG9ydF9uYW1lX2VuZykgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImlucHV0LWdyb3VwLXRleHRcIj54PHNwYW4gY2xhc3M9XCJwcmljZVwiPnt7ICtlcXVpcG1lbnQucHJpY2UgfCBzZXBhcmF0ZSB9fTwvc3Bhbj4ge3sgZGljLnZhbHV0ZSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPj08c3BhbiBjbGFzcz1cInByaWNlXCI+e3sgZ2V0VG90YWxQcmljZShlcXVpcG1lbnQsK2lucHV0c1tlcXVpcG1lbnQuaWRdKSB8IHNlcGFyYXRlIH19PC9zcGFuPiB7eyBkaWMudmFsdXRlIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgPC9kaXY+ICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIlxyXG5pbXBvcnQgeyB0ZXh0VHJhbnNsYXRlTWl4aW4gfSBmcm9tICcuLi9NaXhpbnMvdGV4dFRyYW5zbGF0ZU1peGluJ1xyXG5pbXBvcnQgeyBudW1iZXJGb3JtYXRNaXhpbiB9IGZyb20gJy4uL01peGlucy9udW1iZXJGb3JtYXRNaXhpbidcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG1peGluczogW1xyXG4gICAgICAgIG51bWJlckZvcm1hdE1peGluLCB0ZXh0VHJhbnNsYXRlTWl4aW5cclxuICAgIF0sXHJcbiAgICBwcm9wczogW1xyXG4gICAgICAgICdpZCcsXHJcbiAgICAgICAgJ2V2ZW50QnVzJyxcclxuICAgICAgICAndmFsJyxcclxuICAgICAgICAnZGljJyxcclxuICAgICAgICAnZmllbGRJZCcsXHJcbiAgICAgICAgJ2xhbmcnXHJcbiAgICBdLFxyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4geyAgICAgICAgIFxyXG4gICAgICAgICAgICBlcXVpcG1lbnRzOiBbXSxcclxuICAgICAgICAgICAgaXNMb2FkZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBleHBhbmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbnB1dHM6IFtdXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudEJ1cy4kb24oJ2V4cGFuZCcsdGhpcy5leHBhbmRFbGVtZW50KTsgICAgICAgIFxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHsgICAgICAgXHJcbiAgICAgICAgc2V0VmFsKGVxdWlwbWVudCxjb3VudCkge1xyXG4gICAgICAgICAgICBsZXQgZXEgPSB7fTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlcSwgZXF1aXBtZW50KTsgICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlVmFsdWUnLGVxLGNvdW50KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlzTnVtYmVyKHZhbCkgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gL15cXGQrJC8udGVzdCh2YWwpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXhwYW5kRWxlbWVudChpZCkge1xyXG4gICAgICAgICAgICBpZiAoaWQgPT09IHRoaXMuaWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kID0gIXRoaXMuZXhwYW5kO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRFcXVpcG1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldElkKGlkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnZXF1aXBtZW50LScgKyBpZDtcclxuICAgICAgICB9LCBcclxuICAgICAgICBnZXRFcXVpcG1lbnRzKCkge1xyXG4gICAgICAgICAgICBheGlvcy5nZXQoJy9hcGkvZXF1aXBtZW50L2dldC1lcXVpcG1lbnRzP2NhdGVnb3J5SWQ9JyArIHRoaXMuaWQgKyAnJmZpZWxkSWQ9JyArIHRoaXMuZmllbGRJZClcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXF1aXBtZW50cyA9IHJlc3BvbnNlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXFLZXlzID0gT2JqZWN0LmtleXModGhpcy5lcXVpcG1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBlcUtleXMpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZhbC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0c1trZXldID0gdGhpcy52YWxba2V5XS5jb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRUb3RhbFByaWNlKGVxdWlwbWVudCxjb3VudCkge1xyXG4gICAgICAgICAgICBsZXQgc3VtID0gMDtcclxuICAgICAgICAgICAgc3VtID0gKGNvdW50ID4gMCkgPyBjb3VudCAqIGVxdWlwbWVudC5wcmljZSA6IDA7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBzdW07XHJcblxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0VxdWlwbWVudExpc3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRXF1aXBtZW50TGlzdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0VxdWlwbWVudExpc3QudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWM1YmU5YmE0JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0VxdWlwbWVudExpc3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9FcXVpcG1lbnRMaXN0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiYzViZTliYTRcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJ2M1YmU5YmE0JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2M1YmU5YmE0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2M1YmU5YmE0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9FcXVpcG1lbnRMaXN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jNWJlOWJhNCZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdjNWJlOWJhNCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0NvbXBvbmVudHMvRXF1aXBtZW50TGlzdC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRXF1aXBtZW50QmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRXF1aXBtZW50QmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImVxdWlwbWVudHMtbGlzdF9fY29udGFpbmVyXCI+XHJcbiAgICAgICAgPHVsIGNsYXNzPVwiYWRkaXRpb25hbC1lcXVpcG1lbnRfX2xpc3RcIj5cclxuICAgICAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwiKGNhdGVnb3J5LGluZGV4KSBpbiBjYXRlZ29yaWVzXCI+XHJcbiAgICAgICAgICAgIDxsaSB2LWlmPVwiaXNTaG93ZWQoY2F0ZWdvcnkuaWQpXCIgOmtleT1cImluZGV4XCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBAY2xpY2s9XCJleHBhbmQoY2F0ZWdvcnkuaWQpXCI+e3sgZ2V0TmFtZShjYXRlZ29yeS5uYW1lLCBjYXRlZ29yeS5uYW1lX2VuZykgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8ZXF1aXBtZW50LWxpc3QgXHJcbiAgICAgICAgICAgICAgICAgICAgOnZhbD1cInZhbHVlc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgOmlkPVwiY2F0ZWdvcnkuaWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpmaWVsZElkPVwicGFyYW1zLmlkXCJcclxuICAgICAgICAgICAgICAgICAgICA6ZXZlbnRCdXM9XCJidXNcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpkaWM9XCJkaWNcIlxyXG4gICAgICAgICAgICAgICAgICAgIDpsYW5nPVwibGFuZ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgQGNoYW5nZVZhbHVlPVwic2V0VmFsdWVcIiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPjwvZXF1aXBtZW50LWxpc3Q+ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcblxyXG4gICAgICAgIDwvdWw+XHJcbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidGFibGVcIj5cclxuICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgPHRyIHYtZm9yPVwiKHZhbCxrZXkpIGluIHZhbHVlc1wiIDprZXk9XCJrZXlcIj4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD57eyB2YWwuY29kZSB9fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPnt7IGdldE5hbWUodmFsLm5hbWUsdmFsLm5hbWVfZW5nKSB9fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPnt7IHZhbC5jb3VudCB8IHNlcGFyYXRlIH19IHt7IGdldE5hbWUodmFsLnVuaXQuc2hvcnRfbmFtZSwgdmFsLnVuaXQuc2hvcnRfbmFtZV9lbmcpIH19PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+eHt7IHZhbC5wcmljZSB8IHNlcGFyYXRlIH19IHt7IGRpYy52YWx1dGUgfX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZD49e3sgKHZhbC5wcmljZSAqIHZhbC5jb3VudCkgfCBzZXBhcmF0ZSB9fSB7eyBkaWMudmFsdXRlIH19PC90ZD4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIDx0ciB2LWlmPVwiaXNDb21wdXRlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPVwiNVwiIGNsYXNzPVwidG90YWxcIj57eyBkaWMudG90YWwudG90YWxNc2cgfX06IHt7IHRvdGFsIHwgc2VwYXJhdGUgfX0ge3sgZGljLnZhbHV0ZSB9fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgIDwvdGFibGU+XHJcbiAgICA8L2Rpdj5cclxuXHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCB7IHVuaXRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3VuaXRNaXhpbidcclxuaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nXHJcbmltcG9ydCB7IG51bWJlckZvcm1hdE1peGluIH0gZnJvbSAnLi9NaXhpbnMvbnVtYmVyRm9ybWF0TWl4aW4nXHJcbmltcG9ydCB7IHRleHRUcmFuc2xhdGVNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3RleHRUcmFuc2xhdGVNaXhpbidcclxuaW1wb3J0IGF4aW9zIGZyb20gXCJheGlvc1wiXHJcbmltcG9ydCBFcXVpcG1lbnRMaXN0IGZyb20gXCIuL0NvbXBvbmVudHMvRXF1aXBtZW50TGlzdFwiXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHByb3BzOiBbXHJcbiAgICAgICAgJ2RpYycsXHJcbiAgICAgICAgJ2xhbmcnXHJcbiAgICBdLFxyXG4gICAgZGF0YSgpIHsgICBcclxuICAgICAgICBsZXQgdmFsID0ge307XHJcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhbCA9IHRoaXMucGFyYW1zLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6ICdpZCcgKyB0aGlzLnBhcmFtcy5pZCxcclxuICAgICAgICAgICAgY2F0ZWdvcmllczogW10sXHJcbiAgICAgICAgICAgIGF2YWlsYWJsZUNhdGVnb3JpZXM6IHRoaXMucGFyYW1zLnBhcmFtZXRlcnMuY2F0ZWdvcmllcyxcclxuICAgICAgICAgICAgYWxsQ2F0ZWdvcmllczogKHRoaXMucGFyYW1zLnBhcmFtZXRlcnMuYWxsQ2F0ZWdvcmllcyA9PSB0cnVlKSxcclxuICAgICAgICAgICAgYnVzOiBuZXcgVnVlKCksLy8g0KjQuNC90LAg0YHQvtCx0YvRgtC40LlcclxuICAgICAgICAgICAgdmFsdWVzOiB2YWwsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgdG90YWwoKSB7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0NvbXB1dGVkICkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvdGFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50VmFsO1xyXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy52YWx1ZXMpOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsID0gTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWVzW2tleV0uY291bnQpICogTnVtYmVyLnBhcnNlSW50KHRoaXMudmFsdWVzW2tleV0ucHJpY2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihjdXJyZW50VmFsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvdGFsKz0gY3VycmVudFZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1peGluczogW1xyXG4gICAgICAgIHVuaXRNaXhpbixcclxuICAgICAgICBudW1iZXJGb3JtYXRNaXhpbixcclxuICAgICAgICB0ZXh0VHJhbnNsYXRlTWl4aW4sXHJcbiAgICAgICAgY29tcHV0ZWRNaXhpbixcclxuICAgIF0sXHJcbiAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgICAgRXF1aXBtZW50TGlzdFxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBpc1Nob3dlZChpZCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSWQgPSAnLCBpZCk7XHJcbiAgICAgICAgICAgIHJldHVybiAoIHRoaXMuYWxsQ2F0ZWdvcmllcyB8fCB0aGlzLmF2YWlsYWJsZUNhdGVnb3JpZXMuaW5kZXhPZihpZCkgIT09IC0xKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGV4cGFuZChpZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1cy4kZW1pdCgnZXhwYW5kJyxpZCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXRWYWx1ZShlcXVpcG1lbnQsY291bnQpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSArZXF1aXBtZW50LmlkO1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBWdWUuc2V0KHRoaXMudmFsdWVzLCBpbmRleCwge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuZ2V0TmFtZShlcXVpcG1lbnQubmFtZSwgZXF1aXBtZW50Lm5hbWVfZW5nKSxcclxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBlcXVpcG1lbnQuY29kZSxcclxuICAgICAgICAgICAgICAgICAgICB1bml0OiBlcXVpcG1lbnQudW5pdC5zaG9ydF9uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGlkOiBlcXVpcG1lbnQuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IGNvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHByaWNlOiBlcXVpcG1lbnQucHJpY2UgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBWdWUuZGVsZXRlKHRoaXMudmFsdWVzLGluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgICAgb25DaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgICAgIH0sICAgICAgIFxyXG4gICAgICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIHRoaXMudmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMudmFsdWVzW2tleV0uaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMudmFsdWVzW2tleV0uY291bnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJpY2U6IHRoaXMudmFsdWVzW2tleV0ucHJpY2UsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZXNcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2YWxpZDogdHJ1ZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0NvbXB1dGVkKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhLmNvbXB1dGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGRhdGEuZXF1aXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZGF0YS50b3RhbCA9IHRoaXMudG90YWw7XHJcbiAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgYXhpb3MuZ2V0KCcvYXBpL2VxdWlwbWVudC9nZXQtY2F0ZWdvcmllcycpXHJcbiAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXRlZ29yaWVzID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlZCgpIHsgICAgICAgIFxyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBzY29wZWQ+XHJcbiAgICAuYWRkaXRpb25hbC1lcXVpcG1lbnRfX2xpc3QgbGkge1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIH1cclxuICAgIHRkLnRvdGFsIHtcclxuICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIH1cclxuPC9zdHlsZT4iLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0VxdWlwbWVudEJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ZTgxODc5YSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9FcXVpcG1lbnRCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0VxdWlwbWVudEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9FcXVpcG1lbnRCbG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03ZTgxODc5YSZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiN2U4MTg3OWFcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzdlODE4NzlhJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzdlODE4NzlhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzdlODE4NzlhJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9FcXVpcG1lbnRCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2U4MTg3OWEmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignN2U4MTg3OWEnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImFzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9FcXVpcG1lbnRCbG9jay52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJibG9ja19fZ3JvdXBcIiB9LFxuICAgIFtcbiAgICAgIF92bS5zaG93VGl0bGUgPyBfYyhcImgyXCIsIFtfdm0uX3YoX3ZtLl9zKF92bS50aXRsZUxhYmVsKSldKSA6IF92bS5fZSgpLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5fbChfdm0uZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW0pIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBfYyhcImVsXCIsIHtcbiAgICAgICAgICAgIGF0dHJzOiB7IGxhbmc6IF92bS5sYW5nLCB1bml0RGF0YTogZWxlbSwgZGljOiBfdm0uZGljIH0sXG4gICAgICAgICAgICBvbjogeyBtb2RpZmljYXRpb246IF92bS5maWVsZENoYW5nZWQgfVxuICAgICAgICAgIH0pXG4gICAgICAgIF1cbiAgICAgIH0pXG4gICAgXSxcbiAgICAyXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJjb21wXCIgfSxcbiAgICBbXG4gICAgICBfYyhfdm0uY3VycmVudEVsZW1lbnQsIHtcbiAgICAgICAgdGFnOiBcImNvbXBvbmVudFwiLFxuICAgICAgICBhdHRyczogeyBwYXJhbXM6IF92bS51bml0RGF0YSwgbGFuZzogX3ZtLmxhbmcsIGRpYzogX3ZtLmRpYyB9LFxuICAgICAgICBvbjogeyBjaGFuZ2VGaWVsZDogX3ZtLmZpZWxkQ2hhbmdlZCB9XG4gICAgICB9KVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiaW1wb3J0YW50XCIsXG4gICAgZG9tUHJvcHM6IHsgaW5uZXJIVE1MOiBfdm0uX3MoX3ZtLnRpdGxlKSB9XG4gIH0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG48ZGl2IGNsYXNzPVwiaW1wb3J0YW50XCIgdi1odG1sPVwidGl0bGVcIj48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGltcG9ydCB7IHVuaXRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3VuaXRNaXhpbidcclxuICAgIGltcG9ydCB7IGxhbmd1YWdlcyB9IGZyb20gJy4uLy4uLy4uL2xhbmcnXHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgcHJvcHM6IFtcclxuICAgICAgICAgICAgJ2xhbmcnXHJcbiAgICAgICAgXSxcclxuICAgICAgIG1peGluczogW1xyXG4gICAgICAgICAgIHVuaXRNaXhpblxyXG4gICAgICAgXSxcclxuICAgICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgICAgdGl0bGUoKSB7XHJcbiAgICAgICAgICAgICAgIC8vIHRoaXMucGFyYW1ldGVycy5odG1sXHJcbiAgICAgICAgICAgICAgIGlmICh0aGlzLmxhbmcgPT0gbGFuZ3VhZ2VzLnJ1c3NpYW4gfHwgIXRoaXMucGFyYW1ldGVycy50ZXh0RW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbWV0ZXJzLnRleHQ7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1ldGVycy50ZXh0RW5nO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbXBvcnRhbnRJbmZvcm1hdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9JbXBvcnRhbnRJbmZvcm1hdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0ltcG9ydGFudEluZm9ybWF0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00Y2NlYzdlNSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9JbXBvcnRhbnRJbmZvcm1hdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0ltcG9ydGFudEluZm9ybWF0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc0Y2NlYzdlNScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc0Y2NlYzdlNScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc0Y2NlYzdlNScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vSW1wb3J0YW50SW5mb3JtYXRpb24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTRjY2VjN2U1JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzRjY2VjN2U1Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvSW1wb3J0YW50SW5mb3JtYXRpb24udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0VsZW1lbnRJbkdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0VsZW1lbnRJbkdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJjb21wXCI+XHJcbiAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJjdXJyZW50RWxlbWVudFwiIDpwYXJhbXM9XCJ1bml0RGF0YVwiIEBjaGFuZ2VGaWVsZD1cImZpZWxkQ2hhbmdlZFwiIDpsYW5nPVwibGFuZ1wiIDpkaWM9XCJkaWNcIj48L2NvbXBvbmVudD4gICAgICAgIFxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBJbXBvcnRhbnRCbG9jayBmcm9tICcuL1VuaXRzL0ltcG9ydGFudEJsb2NrJztcclxuaW1wb3J0IEhlYWRlckJsb2NrIGZyb20gJy4vVW5pdHMvSGVhZGVyQmxvY2snO1xyXG5pbXBvcnQgQ2hlY2tCb3hCbG9jayBmcm9tICcuL1VuaXRzL0NoZWNrQm94QmxvY2snO1xyXG5pbXBvcnQgVGV4dElucHV0QmxvY2sgZnJvbSAnLi9Vbml0cy9UZXh0SW5wdXRCbG9jayc7XHJcbmltcG9ydCBOdW1iZXJJbnB1dEJsb2NrIGZyb20gJy4vVW5pdHMvTnVtYmVySW5wdXRCbG9jayc7XHJcbmltcG9ydCBDaGVja051bWJlcklucHV0IGZyb20gJy4vVW5pdHMvQ2hlY2tOdW1iZXJJbnB1dCc7XHJcbmltcG9ydCBTZWxlY3RCbG9jayBmcm9tICcuL1VuaXRzL1NlbGVjdEJsb2NrJztcclxuaW1wb3J0IEZyaWV6ZUJsb2NrIGZyb20gJy4vVW5pdHMvRnJpZXplQmxvY2snO1xyXG5pbXBvcnQgTXVsdGlTZWxlY3RCbG9jayBmcm9tICcuL1VuaXRzL011bHRpU2VsZWN0QmxvY2snO1xyXG5pbXBvcnQgVW5kZWZpbmVkQmxvY2sgZnJvbSAnLi9Vbml0cy9VbmRlZmluZWRCbG9jayc7XHJcbmltcG9ydCBSYWRpb0Jsb2NrIGZyb20gJy4vVW5pdHMvUmFkaW9CbG9jayc7XHJcbmltcG9ydCBFcXVpcG1lbnRCbG9jayBmcm9tICcuL1VuaXRzL0VxdWlwbWVudEJsb2NrJztcclxuaW1wb3J0IEdyb3VwQmxvY2sgZnJvbSAnLi9Vbml0cy9Hcm91cEJsb2NrJztcclxuaW1wb3J0IEltcG9ydGFudEluZm9ybWF0aW9uQmxvY2sgZnJvbSAnLi9Vbml0cy9JbXBvcnRhbnRJbmZvcm1hdGlvbic7ICAgICAgICBcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgcHJvcHM6IFtcclxuICAgICAgICAndW5pdERhdGEnLCdsYW5nJywnZGljJ1xyXG4gICAgXSxcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAnaW1wb3J0YW50JzogSW1wb3J0YW50QmxvY2ssXHJcbiAgICAgICAgJ2ltcG9ydGFudC1pbmZvcm1hdGlvbic6IEltcG9ydGFudEluZm9ybWF0aW9uQmxvY2ssXHJcbiAgICAgICAgJ2hlYWRlci1ibGNrJzogSGVhZGVyQmxvY2ssXHJcbiAgICAgICAgJ3RleHQtaW5wdXQnOiBUZXh0SW5wdXRCbG9jayxcclxuICAgICAgICAnbnVtYmVyLWlucHV0JzogTnVtYmVySW5wdXRCbG9jayxcclxuICAgICAgICAnY2hlY2stbnVtYmVyLWlucHV0JzogQ2hlY2tOdW1iZXJJbnB1dCxcclxuICAgICAgICAnY2hlY2tib3gnOiBDaGVja0JveEJsb2NrLFxyXG4gICAgICAgICdzZWxlY3QtaW5wdXQnOiBTZWxlY3RCbG9jayxcclxuICAgICAgICAnbXVsdGktc2VsZWN0LWlucHV0JzogTXVsdGlTZWxlY3RCbG9jayxcclxuICAgICAgICAncmFkaW8nOiBSYWRpb0Jsb2NrLFxyXG4gICAgICAgICdlcXVpcG1lbnQnOiBFcXVpcG1lbnRCbG9jayxcclxuICAgICAgICAnZnJpZXplJzogRnJpZXplQmxvY2ssXHJcbiAgICAgIC8vICAnZ3JvdXAnOiBHcm91cEJsb2NrLFxyXG4gICAgICAgICd1bmRlZmluZWQnOiBVbmRlZmluZWRCbG9jayAgICAgICAgXHJcbiAgICAgICAgXHJcbiAgICB9LFxyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0eXBlc0xpc3Q6IHtcclxuICAgICAgICAgICAgICAgIGJsb2NrQ2hlY2tib3g6IDEsXHJcbiAgICAgICAgICAgICAgICBibG9ja1NlbGVjdDogMixcclxuICAgICAgICAgICAgICAgIGJsb2NrTXVsdGlTZWxlY3Q6IDMsXHJcbiAgICAgICAgICAgICAgICBibG9ja1JhZGlvOiA2LFxyXG4gICAgICAgICAgICAgICAgYmxvY2tOdW1iZXJJbnB1dDogNyxcclxuICAgICAgICAgICAgICAgIGJsb2NrQ2hlY2tOdW1iZXI6IDgsXHJcbiAgICAgICAgICAgICAgICBibG9ja1RleHRJbnB1dDogOSxcclxuICAgICAgICAgICAgICAgIGJsb2NrSW1wb3J0YW50SW5mb3JtYXRpb246IDEyLFxyXG4gICAgICAgICAgICAgICAgYmxvY2tJbXBvcnRhbnQ6IDEzLFxyXG4gICAgICAgICAgICAgICAgYmxvY2tIZWFkZXI6IDE0LFxyXG4gICAgICAgICAgICAgICAgYmxvY2tFcXVpcG1lbnQ6IDE1LFxyXG4gICAgICAgICAgICAgICAgYmxvY2tHcm91cDogMTYsXHJcbiAgICAgICAgICAgICAgICBibG9ja0ZyaWV6ZTogMTdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgZmllbGRDaGFuZ2VkKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ21vZGlmaWNhdGlvbicsIGZpZWxkKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgY29tcHV0ZWQ6IHtcclxuICAgICAgICBjdXJyZW50RWxlbWVudCgpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChwYXJzZUludCh0aGlzLnVuaXREYXRhLmVsZW1lbnRfdHlwZV9pZCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tTZWxlY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdzZWxlY3QtaW5wdXQnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja1JhZGlvOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAncmFkaW8nOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrTXVsdGlTZWxlY3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtdWx0aS1zZWxlY3QtaW5wdXQnOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrQ2hlY2tib3g6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdjaGVja2JveCc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrTnVtYmVySW5wdXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdudW1iZXItaW5wdXQnOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrVGV4dElucHV0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndGV4dC1pbnB1dCc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrQ2hlY2tOdW1iZXI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdjaGVjay1udW1iZXItaW5wdXQnOyAgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tJbXBvcnRhbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbXBvcnRhbnQnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja0hlYWRlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hlYWRlci1ibGNrJzsgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tJbXBvcnRhbnRJbmZvcm1hdGlvbjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2ltcG9ydGFudC1pbmZvcm1hdGlvbic7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrRXF1aXBtZW50OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZXF1aXBtZW50JzsgIFxyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja0ZyaWV6ZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2ZyaWV6ZSc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrR3JvdXA6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdncm91cCc7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0gICAgICAgICBcclxufVxyXG5cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT48L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRWxlbWVudEluR3JvdXAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTg2ZjRiYzhlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0VsZW1lbnRJbkdyb3VwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vRWxlbWVudEluR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzg2ZjRiYzhlJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzg2ZjRiYzhlJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzg2ZjRiYzhlJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9FbGVtZW50SW5Hcm91cC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODZmNGJjOGUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignODZmNGJjOGUnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImFzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9FbGVtZW50SW5Hcm91cC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vR3JvdXBCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Hcm91cEJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuICAgPGRpdiBjbGFzcz1cImJsb2NrX19ncm91cFwiPlxyXG4gICAgICA8aDIgdi1pZj1cInNob3dUaXRsZVwiPnt7IHRpdGxlTGFiZWwgfX08L2gyPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cImVsZW0gaW4gZWxlbWVudHNcIj5cclxuICAgICAgICAgICAgPGVsIDpsYW5nPVwibGFuZ1wiIDp1bml0RGF0YT1cImVsZW1cIiBAbW9kaWZpY2F0aW9uPVwiZmllbGRDaGFuZ2VkXCIgOmRpYz1cImRpY1wiPjwvZWw+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT4gICAgICAgICBcclxuICAgPC9kaXY+IFxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgeyBsYWJlbE1peGluIH0gZnJvbSAnLi9NaXhpbnMvbGFiZWxNaXhpbidcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSBcIi4uL0VsZW1lbnRJbkdyb3VwLnZ1ZVwiO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgIGRhdGEoKSB7XHJcbiAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgIGlkOiAnaWQnICsgdGhpcy5wYXJhbXMuaWQsXHJcbiAgICAgICAgICAgICAgIGZpZWxkczoge30sXHJcbiAgICAgICAgICAgICAgIHZhbGlkOiB0cnVlICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICB9XHJcbiAgICAgIH0sICAgIFxyXG4gICAgY29tcG9uZW50czoge1xyXG4gICAgICAgICBlbDogRWxlbWVudCxcclxuICAgIH0sXHJcbiAgIGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgIC8vICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICB9LCAgICBcclxuICAgIHByb3BzOiBbXHJcbiAgICAgICAgJ3BhcmFtcycsXHJcbiAgICAgICAgICdsYW5nJyxcclxuICAgICAgICAgJ2RpYydcclxuICAgIF0sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgbWl4aW5zOiBbXHJcbiAgICAgICAgIGxhYmVsTWl4aW5cclxuICAgIF0sICAgICAgXHJcbiAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICBzaG93VGl0bGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgfSxcclxuICAgICAgICAgZWxlbWVudHMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5wYXJhbWV0ZXJzLmVsZW1lbnRzO1xyXG4gICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgICBmaWVsZENoYW5nZWQoZmllbGQpIHtcclxuICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLGZpZWxkKTsgICAgIFxyXG4gICAgICB9LFxyXG4gICAgfSAgICAgXHJcbn1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBzY29wZT5cclxuICAgIGgyIHtcclxuICAgICAgY29sb3I6IGZpcmVicmljaztcclxuICAgfVxyXG48L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vR3JvdXBCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTQxMWRmNDkmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vR3JvdXBCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0dyb3VwQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0dyb3VwQmxvY2sudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmc2NvcGU9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcxNDExZGY0OScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcxNDExZGY0OScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcxNDExZGY0OScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vR3JvdXBCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTQxMWRmNDkmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMTQxMWRmNDknLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImFzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9Hcm91cEJsb2NrLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmb3JtLWdyb3VwIGFsaWduLXJpZ2h0XCIgfSwgW1xuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZmxleF9fd3JhcHBlclwiLCBjbGFzczogeyByZXF1aXJlZDogX3ZtLnJlcXVpcmVkIH0gfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJsYWJlbFwiLCB7IGF0dHJzOiB7IGZvcjogX3ZtLmlkIH0gfSwgW1xuICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpKVxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkYXRlLXBpY2tlclwiLCB7XG4gICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgIGlucHV0QXR0cjogX3ZtLmRhdGVBdHRyaWJ1dGVzLFxuICAgICAgICAgICAgaW5wdXRDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgIHR5cGU6IFwiZGF0ZXRpbWVcIixcbiAgICAgICAgICAgIFwidmFsdWUtdHlwZVwiOiBcImZvcm1hdFwiLFxuICAgICAgICAgICAgZm9ybWF0OiBcIkRELk1NLllZWVkgaGg6bW1cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgIHZhbHVlOiBfdm0udmFsLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikge1xuICAgICAgICAgICAgICBfdm0udmFsID0gJCR2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJ2YWxcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIF0sXG4gICAgICAxXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5oYXNFcnJvcnNGb3JTaG93KClcbiAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJoZWxwLWJsb2NrXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmVycm9ycy5yZXF1aXJlZC5tZXNzYWdlKSlcbiAgICAgICAgXSlcbiAgICAgIDogX3ZtLl9lKCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICAhX3ZtLmhhc0Vycm9yc0ZvclNob3coKVxuICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImRlc2MtYmxvY2tcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZGVzY3JpcHRpb25MYWJlbCkpXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG48ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBhbGlnbi1yaWdodFwiPlxyXG48ZGl2IGNsYXNzPVwiZmxleF9fd3JhcHBlclwiIDpjbGFzcz1cInsncmVxdWlyZWQnIDogcmVxdWlyZWQgfVwiPlxyXG4gICAgPGxhYmVsICA6Zm9yPVwiaWRcIj57eyB0aXRsZUxhYmVsIH19PC9sYWJlbD5cclxuICAgIDxkYXRlLXBpY2tlciBcclxuICAgICAgICB2LW1vZGVsPVwidmFsXCIgXHJcbiAgICAgICAgOmlucHV0QXR0cj1cImRhdGVBdHRyaWJ1dGVzXCJcclxuICAgICAgICA6aW5wdXRDbGFzcz1cIidmb3JtLWNvbnRyb2wnXCJcclxuICAgICAgICB0eXBlPVwiZGF0ZXRpbWVcIiBcclxuICAgICAgICB2YWx1ZS10eXBlPVwiZm9ybWF0XCJcclxuICAgICAgICBmb3JtYXQ9XCJERC5NTS5ZWVlZIGhoOm1tXCI+PC9kYXRlLXBpY2tlcj4gICAgICAgICAgIFxyXG48L2Rpdj5cclxuICAgIDxkaXYgdi1pZj1cImhhc0Vycm9yc0ZvclNob3coKVwiIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IGVycm9ycy5yZXF1aXJlZC5tZXNzYWdlIH19PC9kaXY+ICBcclxuICAgIDxkaXYgdi1pZj1cIiFoYXNFcnJvcnNGb3JTaG93KClcIiBjbGFzcz1cImRlc2MtYmxvY2tcIj57eyBkZXNjcmlwdGlvbkxhYmVsIH19PC9kaXY+ICBcclxuPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+IFxyXG4gICAgaW1wb3J0IHsgdW5pdE1peGluIH0gZnJvbSAnLi9NaXhpbnMvdW5pdE1peGluJ1xyXG4gICAgaW1wb3J0IHsgbGFiZWxNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2xhYmVsTWl4aW4nICBcclxuICAgIGltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnLi4vLi4vZXZlbnRCdXMnXHJcbiAgICBpbXBvcnQgRGF0ZVBpY2tlciBmcm9tICAndnVlMi1kYXRlcGlja2VyJztcclxuICAgIGltcG9ydCAndnVlMi1kYXRlcGlja2VyL2xvY2FsZS9ydSc7XHJcbiAgICBpbXBvcnQgJ3Z1ZTItZGF0ZXBpY2tlci9pbmRleC5jc3MnOyBcclxuICAgIFxyXG4gICAgZXhwb3J0IGRlZmF1bHQgeyAgICAgICAgXHJcbiAgICAgICAgcHJvcHM6IFtcclxuICAgICAgICAgICAgJ2xhbmcnXHJcbiAgICAgICAgXSxcclxuICAgICAgICBjb21wb25lbnRzOiB7IERhdGVQaWNrZXIgfSxcclxuICAgICAgIGRhdGEoKSB7ICAgICAgICAgICBcclxuICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogJ2lkJyArIHRoaXMucGFyYW1zLmlkLFxyXG4gICAgICAgICAgICB2YWw6IHRoaXMucGFyYW1zLnZhbHVlID8gdGhpcy5wYXJhbXMudmFsdWUgOiAnJyxcclxuICAgICAgICAgICAgc2hvd0Vycm9ycyA6IGZhbHNlLFxyXG4gICAgICAgICAgICB2YWxpZDogdHJ1ZSwgIFxyXG4gICAgICAgICAgICBlcnJvcnMgOiB7XHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZDoge1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwi0J/QvtC70LUg0L7QsdGP0LfQsNGC0LXQu9GM0L3QviDQtNC70Y8g0LfQsNC/0L7Qu9C90LXQvdC40Y9cIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSwgIFxyXG4gICAgICAgY29tcHV0ZWQ6IHtcclxuICAgICAgICBkYXRlQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgIH0sXHJcbiAgICAgICBtaXhpbnM6IFtcclxuICAgICAgICAgICB1bml0TWl4aW4sXHJcbiAgICAgICAgICAgbGFiZWxNaXhpblxyXG4gICAgICAgXSxcclxuICAgICAgIGNyZWF0ZWQoKSB7XHJcbiAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgICAgICAgICBldmVudEJ1cy4kb24oJ3Nob3dFcnJvcnMnLCgpID0+IHRoaXMuc2hvd0Vycm9ycyA9IHRydWUpO1xyXG4gICAgICAgICAgIGV2ZW50QnVzLiRvbigndmFsaWRhdGUnLCgpID0+IHtcclxuICAgICAgICAgICAgICAgdGhpcy52YWxpZGF0ZSgpXHJcbiAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICApO1xyXG4gICAgICAgfSxcclxuICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICB2YWxpZGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7IC8vIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICBpZih0aGlzLnZhbCA9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVxdWlyZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFcnJvciA9IHRoaXMuZXJyb3JzLnJlcXVpcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH0sICAgICAgICAgICAgXHJcbiAgICAgICAgICAgaGFzRXJyb3JzRm9yU2hvdygpIHtcclxuICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNob3dFcnJvcnMgfHwgIXRoaXMuY3VycmVudEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG4gICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgb25DaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgdGhpcy5zaG93RXJyb3JzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgICAgICAgICBkYXRhOiAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbCwgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICB2YWxpZDogdGhpcy52YWxpZFxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfVxyXG4gICAgICAgfSBcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT5cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRGF0ZVRpbWVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9EYXRlVGltZUJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRGF0ZVRpbWVCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MGE3OGViZjImXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRGF0ZVRpbWVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0RhdGVUaW1lQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzBhNzhlYmYyJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzBhNzhlYmYyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzBhNzhlYmYyJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9EYXRlVGltZUJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wYTc4ZWJmMiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwYTc4ZWJmMicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0RhdGVUaW1lQmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXAgYWxpZ24tcmlnaHRcIiB9LCBbXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJmbGV4X193cmFwcGVyXCIsIGNsYXNzOiB7IHJlcXVpcmVkOiBfdm0ucmVxdWlyZWQgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImxhYmVsXCIsIHsgYXR0cnM6IHsgZm9yOiBfdm0uaWQgfSB9LCBbXG4gICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udGl0bGVMYWJlbCkpXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRhdGUtcGlja2VyXCIsIHtcbiAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgaW5wdXRBdHRyOiBfdm0uZGF0ZUF0dHJpYnV0ZXMsXG4gICAgICAgICAgICBpbnB1dENsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsXG4gICAgICAgICAgICBcInZhbHVlLXR5cGVcIjogXCJmb3JtYXRcIixcbiAgICAgICAgICAgIGZvcm1hdDogXCJERC5NTS5ZWVlZXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIG1vZGVsOiB7XG4gICAgICAgICAgICB2YWx1ZTogX3ZtLnZhbCxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHtcbiAgICAgICAgICAgICAgX3ZtLnZhbCA9ICQkdlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGV4cHJlc3Npb246IFwidmFsXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICBdLFxuICAgICAgMVxuICAgICksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0uaGFzRXJyb3JzRm9yU2hvdygpXG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVscC1ibG9ja1wiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5lcnJvcnMucmVxdWlyZWQubWVzc2FnZSkpXG4gICAgICAgIF0pXG4gICAgICA6IF92bS5fZSgpLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgIV92bS5oYXNFcnJvcnNGb3JTaG93KClcbiAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJkZXNjLWJsb2NrXCIgfSwgW1xuICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmRlc2NyaXB0aW9uTGFiZWwpKVxuICAgICAgICBdKVxuICAgICAgOiBfdm0uX2UoKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXAgYWxpZ24tcmlnaHRcIj5cclxuPGRpdiBjbGFzcz1cImZsZXhfX3dyYXBwZXJcIiA6Y2xhc3M9XCJ7J3JlcXVpcmVkJyA6IHJlcXVpcmVkIH1cIj5cclxuICAgIDxsYWJlbCAgOmZvcj1cImlkXCI+e3sgdGl0bGVMYWJlbCB9fTwvbGFiZWw+XHJcbiAgICA8ZGF0ZS1waWNrZXIgXHJcbiAgICAgICAgdi1tb2RlbD1cInZhbFwiIFxyXG4gICAgICAgIDppbnB1dEF0dHI9XCJkYXRlQXR0cmlidXRlc1wiXHJcbiAgICAgICAgOmlucHV0Q2xhc3M9XCInZm9ybS1jb250cm9sJ1wiXHJcbiAgICAgICAgdHlwZT1cImRhdGVcIiBcclxuICAgICAgICB2YWx1ZS10eXBlPVwiZm9ybWF0XCJcclxuICAgICAgICBmb3JtYXQ9XCJERC5NTS5ZWVlZXCI+PC9kYXRlLXBpY2tlcj4gICAgICAgICAgIFxyXG48L2Rpdj5cclxuICAgIDxkaXYgdi1pZj1cImhhc0Vycm9yc0ZvclNob3coKVwiIGNsYXNzPVwiaGVscC1ibG9ja1wiPnt7IGVycm9ycy5yZXF1aXJlZC5tZXNzYWdlIH19PC9kaXY+ICBcclxuICAgIDxkaXYgdi1pZj1cIiFoYXNFcnJvcnNGb3JTaG93KClcIiBjbGFzcz1cImRlc2MtYmxvY2tcIj57eyBkZXNjcmlwdGlvbkxhYmVsIH19PC9kaXY+ICBcclxuPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+IFxyXG4gICAgaW1wb3J0IHsgdW5pdE1peGluIH0gZnJvbSAnLi9NaXhpbnMvdW5pdE1peGluJ1xyXG4gICAgaW1wb3J0IHsgbGFiZWxNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2xhYmVsTWl4aW4nICBcclxuICAgIGltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnLi4vLi4vZXZlbnRCdXMnXHJcbiAgICBpbXBvcnQgRGF0ZVBpY2tlciBmcm9tICAndnVlMi1kYXRlcGlja2VyJztcclxuICAgIGltcG9ydCAndnVlMi1kYXRlcGlja2VyL2xvY2FsZS9ydSc7XHJcbiAgICBpbXBvcnQgJ3Z1ZTItZGF0ZXBpY2tlci9pbmRleC5jc3MnOyBcclxuICAgIFxyXG4gICAgZXhwb3J0IGRlZmF1bHQgeyAgICAgICAgXHJcbiAgICAgICAgcHJvcHM6IFtcclxuICAgICAgICAgICAgJ2xhbmcnXHJcbiAgICAgICAgXSxcclxuICAgICAgICBjb21wb25lbnRzOiB7IERhdGVQaWNrZXIgfSxcclxuICAgICAgIGRhdGEoKSB7ICAgICAgICAgICBcclxuICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogJ2lkJyArIHRoaXMucGFyYW1zLmlkLFxyXG4gICAgICAgICAgICB2YWw6IHRoaXMucGFyYW1zLnZhbHVlID8gdGhpcy5wYXJhbXMudmFsdWUgOiAnJyxcclxuICAgICAgICAgICAgY3VycmVudFZhbDogdGhpcy5wYXJhbXMudmFsdWUsXHJcbiAgICAgICAgICAgIHNob3dFcnJvcnMgOiBmYWxzZSxcclxuICAgICAgICAgICAgdmFsaWQ6IHRydWUsICBcclxuICAgICAgICAgICAgZXJyb3JzIDoge1xyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcItCf0L7Qu9C1INC+0LHRj9C30LDRgtC10LvRjNC90L4g0LTQu9GPINC30LDQv9C+0LvQvdC10L3QuNGPXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0sICBcclxuICAgICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgZGF0ZUF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICB9LFxyXG4gICAgICAgbWl4aW5zOiBbXHJcbiAgICAgICAgICAgdW5pdE1peGluLFxyXG4gICAgICAgICAgIGxhYmVsTWl4aW5cclxuICAgICAgIF0sXHJcbiAgICAgICBjcmVhdGVkKCkge1xyXG4gICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgZXZlbnRCdXMuJG9uKCdzaG93RXJyb3JzJywoKSA9PiB0aGlzLnNob3dFcnJvcnMgPSB0cnVlKTtcclxuICAgICAgICAgICBldmVudEJ1cy4kb24oJ3ZhbGlkYXRlJywoKSA9PiB7XHJcbiAgICAgICAgICAgICAgIHRoaXMudmFsaWRhdGUoKVxyXG4gICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgKTtcclxuICAgICAgIH0sXHJcbiAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgdmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMudmFsaWQgPSB0cnVlOyAvLyBkZWZhdWx0XHJcbiAgICAgICAgICAgICAgIHRoaXMuY3VycmVudEVycm9yID0gbnVsbDtcclxuICAgICAgICAgICAgICAgaWYodGhpcy52YWwgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RXJyb3IgPSB0aGlzLmVycm9ycy5yZXF1aXJlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9LCAgICAgICAgICAgIFxyXG4gICAgICAgICAgIGhhc0Vycm9yc0ZvclNob3coKSB7XHJcbiAgICAgICAgICAgICAgIGlmICghdGhpcy5zaG93RXJyb3JzIHx8ICF0aGlzLmN1cnJlbnRFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuICAgICAgICAgICB9LFxyXG4gICAgICAgICAgIG9uQ2hhbmdlKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9ycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgZGF0YTogIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWwsICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgdmFsaWQ6IHRoaXMudmFsaWRcclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH1cclxuICAgICAgIH0gXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGU+XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0RhdGVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9EYXRlQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9EYXRlQmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTc5NzdkNDU4JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0RhdGVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0RhdGVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkc6XFxcXE9wZW5TZXJ2ZXJcXFxcZG9tYWluc1xcXFxhZ3JvZm9ybXMubG9jYWxcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNzk3N2Q0NTgnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNzk3N2Q0NTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNzk3N2Q0NTgnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0RhdGVCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Nzk3N2Q0NTgmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNzk3N2Q0NTgnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImFzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9EYXRlQmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXAgYWxpZ24tcmlnaHRcIiB9LCBbXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJmbGV4X193cmFwcGVyXCIsIGNsYXNzOiB7IHJlcXVpcmVkOiBfdm0ucmVxdWlyZWQgfSB9LFxuICAgICAgW1xuICAgICAgICBfYyhcInBcIiwgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZGF0ZS1saXN0X193cmFwcGVyXCIgfSxcbiAgICAgICAgICBfdm0uX2woX3ZtLmVsZW1lbnRzLCBmdW5jdGlvbihlbGVtLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImRhdGUtZWxlbWVudFwiIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcImRhdGUtcGlja2VyXCIsIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0QXR0cjogX3ZtLmRhdGVBdHRyaWJ1dGVzKGluZGV4KSxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXRDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidmFsdWUtdHlwZVwiOiBcImZvcm1hdFwiLFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IFwiREQuTU0uWVlZWVwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGVsZW0uZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikge1xuICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KGVsZW0sIFwiZGF0ZVwiLCAkJHYpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiZWxlbS5kYXRlXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYnV0dG9uc19fYmxvY2tcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBpbmRleCA9PSAwXG4gICAgICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiBcItCU0L7QsdCw0LLQuNGC0Ywg0LTQsNGC0YNcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uYWRkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZmFzIGZhLXBsdXNcIiB9KV1cbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIDogX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcInNwYW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiBcItCj0LTQsNC70LjRgtGMINC00LDRgtGDXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnJlbW92ZShpbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZmFzIGZhLW1pbnVzXCIgfSldXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9KSxcbiAgICAgICAgICAwXG4gICAgICAgIClcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLmhhc0Vycm9yc0ZvclNob3coKVxuICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImhlbHAtYmxvY2tcIiB9LCBbXG4gICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZXJyb3JzLnJlcXVpcmVkLm1lc3NhZ2UpKVxuICAgICAgICBdKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgICFfdm0uaGFzRXJyb3JzRm9yU2hvdygpXG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZGVzYy1ibG9ja1wiIH0sIFtcbiAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5kZXNjcmlwdGlvbkxhYmVsKSlcbiAgICAgICAgXSlcbiAgICAgIDogX3ZtLl9lKClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBhbGlnbi1yaWdodFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4X193cmFwcGVyXCIgOmNsYXNzPVwieydyZXF1aXJlZCcgOiByZXF1aXJlZCB9XCI+XHJcbiAgICAgICAgICAgIDxwPnt7IHRpdGxlTGFiZWwgfX08L3A+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkYXRlLWxpc3RfX3dyYXBwZXJcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgdi1mb3I9XCJlbGVtLGluZGV4IGluIGVsZW1lbnRzXCIgY2xhc3M9XCJkYXRlLWVsZW1lbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGF0ZS1waWNrZXIgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYtbW9kZWw9XCJlbGVtLmRhdGVcIiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgOmlucHV0QXR0cj1cImRhdGVBdHRyaWJ1dGVzKGluZGV4KVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDppbnB1dENsYXNzPVwiJ2Zvcm0tY29udHJvbCdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZGF0ZVwiIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZS10eXBlPVwiZm9ybWF0XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0PVwiREQuTU0uWVlZWVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGF0ZS1waWNrZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ1dHRvbnNfX2Jsb2NrXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWlmPVwiaW5kZXggPT0gMFwiIEBjbGljaz1cImFkZCgpXCIgY2xhc3M9XCJidG5cIiB0aXRsZT1cItCU0L7QsdCw0LLQuNGC0Ywg0LTQsNGC0YNcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmFzIGZhLXBsdXNcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIHYtZWxzZSBAY2xpY2s9XCJyZW1vdmUoaW5kZXgpXCIgY2xhc3M9XCJidG5cIiB0aXRsZT1cItCj0LTQsNC70LjRgtGMINC00LDRgtGDXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhcyBmYS1taW51c1wiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PiAgXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiB2LWlmPVwiaGFzRXJyb3JzRm9yU2hvdygpXCIgY2xhc3M9XCJoZWxwLWJsb2NrXCI+e3sgZXJyb3JzLnJlcXVpcmVkLm1lc3NhZ2UgfX08L2Rpdj4gIFxyXG4gICAgICAgIDxkaXYgdi1pZj1cIiFoYXNFcnJvcnNGb3JTaG93KClcIiBjbGFzcz1cImRlc2MtYmxvY2tcIj57eyBkZXNjcmlwdGlvbkxhYmVsIH19PC9kaXY+ICBcclxuICAgIDwvZGl2PlxyXG4gICAgPC90ZW1wbGF0ZT5cclxuICAgIDxzY3JpcHQ+IFxyXG4gICAgICAgIGltcG9ydCB7IHVuaXRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL3VuaXRNaXhpbidcclxuICAgICAgICBpbXBvcnQgeyBsYWJlbE1peGluIH0gZnJvbSAnLi9NaXhpbnMvbGFiZWxNaXhpbicgIFxyXG4gICAgICAgIGltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnLi4vLi4vZXZlbnRCdXMnXHJcbiAgICAgICAgaW1wb3J0IERhdGVQaWNrZXIgZnJvbSAgJ3Z1ZTItZGF0ZXBpY2tlcic7XHJcbiAgICAgICAgaW1wb3J0ICd2dWUyLWRhdGVwaWNrZXIvbG9jYWxlL3J1JztcclxuICAgICAgICBpbXBvcnQgJ3Z1ZTItZGF0ZXBpY2tlci9pbmRleC5jc3MnOyBcclxuICAgICAgICBcclxuICAgICAgICBleHBvcnQgZGVmYXVsdCB7ICAgICAgICBcclxuICAgICAgICAgICAgcHJvcHM6IFtcclxuICAgICAgICAgICAgICAgICdsYW5nJ1xyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBjb21wb25lbnRzOiB7IERhdGVQaWNrZXIgfSxcclxuICAgICAgICAgICBkYXRhKCkgeyAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpZDogJ2lkJyArIHRoaXMucGFyYW1zLmlkLFxyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnRzOiBbXSxcclxuICAgICAgICAgICAgICAgIHNob3dFcnJvcnMgOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHREYXRlOiAnMDEuMDEuMjAyMicsXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgZXJyb3JzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwi0J/QvtC70LUg0L7QsdGP0LfQsNGC0LXQu9GM0L3QviDQtNC70Y8g0LfQsNC/0L7Qu9C90LXQvdC40Y9cIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH0sICBcclxuICAgICAgICAgICBjb21wdXRlZDogeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFsKCkgeyAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLm1hcCgoZWwpID0+IGVsLmRhdGUgKS5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICBtaXhpbnM6IFtcclxuICAgICAgICAgICAgICAgdW5pdE1peGluLFxyXG4gICAgICAgICAgICAgICBsYWJlbE1peGluXHJcbiAgICAgICAgICAgXSxcclxuICAgICAgICAgICBjcmVhdGVkKCkge1xyXG4gICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpOyAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICBldmVudEJ1cy4kb24oJ3Nob3dFcnJvcnMnLCgpID0+IHRoaXMuc2hvd0Vycm9ycyA9IHRydWUpO1xyXG4gICAgICAgICAgICAgICBldmVudEJ1cy4kb24oJ3ZhbGlkYXRlJywoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkYXRlKClcclxuICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGFyYW1zLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMudmFsdWUgPSB0aGlzLmRlZmF1bHREYXRlXHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLnBhcmFtcy52YWx1ZS5zcGxpdCgnLCcpLm1hcCgoZWwpID0+IHtyZXR1cm4geyBkYXRlOiBlbCB9fSk7XHJcbiAgICAgICAgICAgfSxcclxuICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICBhZGQoKSB7XHJcbiAgICAgICAgICAgICAgICAgLyogICBsZXQgdmFsdWVzID0gdGhpcy52YWwuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCh0aGlzLmRlZmF1bHREYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbCA9IHZhbHVlcy5qb2luKCcsJyk7Ki9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzLnB1c2goe2RhdGU6IHRoaXMuZGVmYXVsdERhdGV9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZW1vdmUoaW5kZXgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50cy5zcGxpY2UoaW5kZXgsMSk7O1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgdmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTsgLy8gZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgaWYodGhpcy52YWwgPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRFcnJvciA9IHRoaXMuZXJyb3JzLnJlcXVpcmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICBkYXRlQXR0cmlidXRlcyhpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5pZCArICdfJyArIGluZGV4XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICBoYXNFcnJvcnNGb3JTaG93KCkge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNob3dFcnJvcnMgfHwgIXRoaXMuY3VycmVudEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgb25DaGFuZ2UoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0Vycm9ycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsLCAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQ6IHRoaXMudmFsaWRcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIH0gXHJcbiAgICAgICAgfVxyXG4gICAgPC9zY3JpcHQ+XHJcbiAgICA8c3R5bGUgc2NvcGVkPlxyXG4gICAgICAgIC5kYXRlLWxpc3RfX3dyYXBwZXIge1xyXG4gICAgICAgICAgICBmbGV4LWdyb3c6IDE7XHJcbiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0OyAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgICAgICAuZGF0ZS1lbGVtZW50IHtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmJ1dHRvbnNfX2Jsb2NrIHtcclxuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgICAgICB3aWR0aDogNnJlbTtcclxuICAgICAgICB9XHJcbiAgICA8L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9EYXRlTXVsdGlwbGVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9EYXRlTXVsdGlwbGVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0RhdGVNdWx0aXBsZUJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zMjQyYzJhNCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9EYXRlTXVsdGlwbGVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0RhdGVNdWx0aXBsZUJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9EYXRlTXVsdGlwbGVCbG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zMjQyYzJhNCZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMzI0MmMyYTRcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzMyNDJjMmE0JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzMyNDJjMmE0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzMyNDJjMmE0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9EYXRlTXVsdGlwbGVCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzI0MmMyYTQmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMzI0MmMyYTQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcImFzc2V0cy9zY3JpcHRzL2NvbXBvbmVudHMvdnVlL0R5bmFtaWNGb3JtL0Zvcm1FbGVtZW50cy9Vbml0cy9EYXRlTXVsdGlwbGVCbG9jay52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZmlsZS1ibG9ja1wiIH0sIFtcbiAgICAhX3ZtLmlzRmlsZUV4aXN0XG4gICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1ncm91cFwiIH0sIFtcbiAgICAgICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJkLWZsZXggZmxleC1jb2x1bW5cIiB9LCBbXG4gICAgICAgICAgICBfYyhcInNwYW5cIiwgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpKV0pXG4gICAgICAgICAgXSksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0uaXNGaWxlU2VsZWN0XG4gICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5wdXQtZ3JvdXBcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwidGV4dFwiLCByZWFkb25seTogXCJcIiB9LFxuICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5zZWxlY3RlZEZpbGUgfVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbnB1dC1ncm91cC1hcHBlbmRcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImlucHV0LWdyb3VwLXRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLmNhbmNlbFVwbG9hZCB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJmYXMgZmEtdGltZXNcIiB9KSxcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgW192bS5fdihcIkNhbmNlbFwiKV0pXG4gICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgOiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImN1c3RvbS1maWxlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgcmVmOiBfdm0uaWQsXG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjdXN0b20tZmlsZS1pbnB1dFwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaWQ6IF92bS5pZCwgdHlwZTogXCJmaWxlXCIsIGFjY2VwdDogX3ZtLm1pbWVGaWx0ZXIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNoYW5nZTogX3ZtLm9uQ2hhbmdlIH1cbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJjdXN0b20tZmlsZS1sYWJlbCBpbnB1dC1ncm91cC10ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJkYXRhLWJyb3dzZVwiOiBfdm0uZGljLmZpbGVBdHRhY2guYnJvd3NlLFxuICAgICAgICAgICAgICAgICAgICAgIGZvcjogX3ZtLmlkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBbX3ZtLl92KFwiU2VsZWN0IGZpbGVcIildXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgOiBfYyhcImRpdlwiLCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXIgZmlsZV9fd3JhcHBlclwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiZmlsZV9fdGl0bGVcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwic3BhblwiLCBbX3ZtLl92KF92bS5fcyhfdm0udGl0bGVMYWJlbCkpXSlcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93IGZpbGVfX2xpc3RcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLTExXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwiYVwiLCB7IGF0dHJzOiB7IGhyZWY6IF92bS5maWxlVXJsIH0gfSwgW1xuICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uZmlsZU5hbWUpKVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xXCIgfSwgW1xuICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmYXMgZmEtdHJhc2hcIixcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ucmVtb3ZlRmlsZSB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgY29uc3QgTUFYX0ZJTEVfU0laRSA9IDIwOTcxNTIwO1xyXG5leHBvcnQgY29uc3QgQVRUQUNITUVOVF9BVFRSSUJVVEUgPSAnaGFzRmlsZSc7IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0ZpbGVCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9GaWxlQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImZpbGUtYmxvY2tcIj5cclxuICAgICAgICA8ZGl2IHYtaWY9XCIhaXNGaWxlRXhpc3RcIiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cclxuICAgICAgICAgICAgPHAgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW5cIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyB0aXRsZUxhYmVsIH19PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9wPiAgICAgICAgICAgICBcclxuPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwXCIgdi1pZj1cImlzRmlsZVNlbGVjdFwiPlxyXG4gICAgPGlucHV0IGNsYXNzPVwiZm9ybS1jb250cm9sXCIgOnZhbHVlPVwic2VsZWN0ZWRGaWxlXCIgdHlwZT1cInRleHRcIiByZWFkb25seT5cclxuICAgIDxkaXYgY2xhc3M9XCJpbnB1dC1ncm91cC1hcHBlbmRcIj5cclxuICAgICAgICA8ZGl2IEBjbGljaz1cImNhbmNlbFVwbG9hZFwiIGNsYXNzPVwiaW5wdXQtZ3JvdXAtdGV4dFwiPjxpIGNsYXNzPVwiZmFzIGZhLXRpbWVzXCI+PC9pPjxzcGFuPkNhbmNlbDwvc3Bhbj48L2Rpdj5cclxuICAgIDwvZGl2PiAgICBcclxuPC9kaXY+XHJcbjxkaXYgdi1lbHNlIGNsYXNzPVwiY3VzdG9tLWZpbGVcIj5cclxuICAgIDxpbnB1dCBAY2hhbmdlPVwib25DaGFuZ2VcIiA6aWQ9XCJpZFwiIDpyZWY9XCJpZFwiIHR5cGU9XCJmaWxlXCIgOmFjY2VwdD1cIm1pbWVGaWx0ZXJcIiBjbGFzcz1cImN1c3RvbS1maWxlLWlucHV0XCI+XHJcbiAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tZmlsZS1sYWJlbCBpbnB1dC1ncm91cC10ZXh0XCIgOmRhdGEtYnJvd3NlPVwiZGljLmZpbGVBdHRhY2guYnJvd3NlXCIgOmZvcj1cImlkXCI+U2VsZWN0IGZpbGU8L2xhYmVsPlxyXG48L2Rpdj5cclxuPC9kaXY+XHJcbjxkaXYgdi1lbHNlPlxyXG4gICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lciBmaWxlX193cmFwcGVyXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZpbGVfX3RpdGxlXCI+XHJcbiAgICAgICAgICAgIDxzcGFuPnt7IHRpdGxlTGFiZWwgfX08L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+ICBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93IGZpbGVfX2xpc3RcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC0xMVwiPlxyXG4gICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJmaWxlVXJsXCI+e3sgZmlsZU5hbWUgfX08L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTFcIj48aSBAY2xpY2s9XCJyZW1vdmVGaWxlXCIgY2xhc3M9XCJmYXMgZmEtdHJhc2hcIj48L2k+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcblxyXG5cclxuPC9kaXY+XHJcbjwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PiAgXHJcbmltcG9ydCB7IGxhYmVsTWl4aW4gfSBmcm9tICcuL01peGlucy9sYWJlbE1peGluJztcclxuaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nO1xyXG5pbXBvcnQgKiBhcyBjb25zdGFudHMgZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogJ2lkJyArIHRoaXMucGFyYW1zLmlkLFxyXG4gICAgICAgICAgICB2YWw6IG51bGwsXHJcbiAgICAgICAgICAgIGlzRmlsZVNlbGVjdDogZmFsc2UsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkRmlsZTogJycsXHJcblxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjcmVhdGVkKCkge1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICB9LFxyXG4gICAgY29tcHV0ZWQ6IHtcclxuICAgICAgICBpc0ZpbGVFeGlzdCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLmZpbGVfZXhpc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaWxlVXJsKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMuZmlsZV91cmw7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaWxlTmFtZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLmZpbGVfbmFtZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlcXVlc3RJZCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLnJlcXVlc3RfaWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtaW1lRmlsdGVyKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJhbXMuZmlsZV90eXBlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRvdGFsKCkge1xyXG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNDb21wdXRlZCAmJiAhKHRoaXMuaXNGaWxlRXhpc3QgfHwgdGhpcy5pc0ZpbGVTZWxlY3QpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0b3RhbCA9ICt0aGlzLnVuaXRQcmljZTtcclxuICAgICAgICAgICAgaWYgKGlzTmFOKHRvdGFsKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRvdGFsOyAgICAgICAgICAgICAgIFxyXG4gICAgICAgIH0sICAgICAgICBcclxuICAgIH0sXHJcbiAgICBwcm9wczogW1xyXG4gICAgICAgICdwYXJhbXMnLFxyXG4gICAgICAgICdkaWMnXHJcbiAgICBdLCAgICBcclxuICAgIG1peGluczogW1xyXG4gICAgICAgIGxhYmVsTWl4aW4sXHJcbiAgICAgICAgY29tcHV0ZWRNaXhpblxyXG4gICAgXSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBvbkNoYW5nZShlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsID0gZS50YXJnZXQuZmlsZXNbMF07ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRGaWxlID0gdGhpcy52YWwubmFtZTtcclxuICAgICAgICAgICAgdGhpcy5pc0ZpbGVTZWxlY3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGUudGFyZ2V0LmZpbGVzWzBdKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNhbmNlbFVwbG9hZCgpIHtcclxuICAgICAgICAgICAgdGhpcy52YWwgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkRmlsZSA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLmlzRmlsZVNlbGVjdCA9IGZhbHNlOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpOyAgICAgICAgICAgICBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMucGFyYW1zLmlkLCAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZmlsZTogdGhpcy52YWwsXHJcbiAgICAgICAgICAgICAgICB2YWxpZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy51bml0UHJpY2UsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgW2NvbnN0YW50cy5BVFRBQ0hNRU5UX0FUVFJJQlVURV06IHRydWUsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgIGRhdGEuY29tcHV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgZGF0YS50b3RhbCA9IHRoaXMudW5pdFByaWNlO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH0sICBcclxuICAgICAgICByZW1vdmVGaWxlKCkge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJSZW1vdmVBdHRhY2htZW50Rm9ybVtyZXF1ZXN0SWRdXCIsdGhpcy5yZXF1ZXN0SWQpO1xyXG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoXCJSZW1vdmVBdHRhY2htZW50Rm9ybVtmaWVsZElkXVwiLCB0aGlzLnBhcmFtcy5pZCk7XHJcbiAgICAgICAgICAgIGF4aW9zLnBvc3QoICcvYXBpL2FwcGxpY2F0aW9uL3JlbW92ZS1hdHRhY2htZW50JyxcclxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKS50aGVuKChyZXNwb25zZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJhbXMuZmlsZV9leGlzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZBSUxVUkUhISFcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG5pIHtcclxuICAgIG1hcmdpbi1yaWdodDogNXB4O1xyXG59XHJcbi5pbnB1dC1ncm91cC10ZXh0IHtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG4uZmlsZV9fd3JhcHBlciB7XHJcbiAgICBib3JkZXI6IDFweCBpbnNldCBsaWdodGdyYXk7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXJnaW46IDIwcHggMDtcclxufVxyXG5cclxuLmZpbGVfX3RpdGxlIHtcclxuICAgIHBhZGRpbmc6IDVweDtcclxufVxyXG4uZmlsZV9fbGlzdCB7XHJcbiAgICBib3JkZXItdG9wOiAgMXB4IGluc2V0IGxpZ2h0Z3JheTsgICAgXHJcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XHJcbn1cclxuLmNvbC0xMSB7XHJcbiAgICBib3JkZXItcmlnaHQ6ICAxcHggaW5zZXQgbGlnaHRncmF5O1xyXG4gICAgdGV4dC1hbGlnbjogbGVmdDtcclxufVxyXG5cclxuLmNvbC0xIGkge1xyXG4gICAgY29sb3I6IHJlZDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxufVxyXG48L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRmlsZUJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zNmIxYjdjNiZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9GaWxlQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9GaWxlQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL0ZpbGVCbG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0zNmIxYjdjNiZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMzZiMWI3YzZcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzM2YjFiN2M2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzM2YjFiN2M2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzM2YjFiN2M2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9GaWxlQmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTM2YjFiN2M2JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzM2YjFiN2M2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvRmlsZUJsb2NrLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXAgYWxpZ24tcmlnaHRcIiB9LFxuICAgIFtcbiAgICAgIF92bS5fbChfdm0uZm9ybUVsZW1lbnRzLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXItZmx1aWRcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkIGNhcmQtZGVmYXVsdFwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZC1oZWFkZXJcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiaDNcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLXRpdGxlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpICsgXCIgI1wiICsgX3ZtLl9zKGluZGV4ICsgMSkpXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfdm0uYmxvY2tzQ291bnQgPiAxXG4gICAgICAgICAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmQtdG9vbHNcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi10b29sXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5yZW1vdmVJdGVtKGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBbX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZmFzIGZhLXRpbWVzXCIgfSldXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwi0KHRgtGA0LDQvdCwOlwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5jb3VudHJ5LFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJpdGVtLmNvdW50cnlcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwidGV4dFwiLCBwbGFjZWhvbGRlcjogXCJcIiB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogaXRlbS5jb3VudHJ5IH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25DaGFuZ2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoaXRlbSwgXCJjb3VudHJ5XCIsICRldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxhYmVsXCIsIFtfdm0uX3YoXCLQntCx0LvQsNGB0YLRjDpcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uYXJlYSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5hcmVhXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IGl0ZW0uYXJlYSB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQ2hhbmdlKCRldmVudClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KGl0ZW0sIFwiYXJlYVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwi0JPQvtGA0L7QtDpcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uY2l0eSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5jaXR5XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IGl0ZW0uY2l0eSB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQ2hhbmdlKCRldmVudClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KGl0ZW0sIFwiY2l0eVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwi0JjQvdC00LXQutGBOlwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5pbmRleCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5pbmRleFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJ0ZXh0XCIsIHBsYWNlaG9sZGVyOiBcIlwiIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBpdGVtLmluZGV4IH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25DaGFuZ2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoaXRlbSwgXCJpbmRleFwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwi0JDQtNGA0LXRgTpcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uYWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5hZGRyZXNzXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IGl0ZW0uYWRkcmVzcyB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQ2hhbmdlKCRldmVudClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KGl0ZW0sIFwiYWRkcmVzc1wiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1wcmltYXJ5XCIsIG9uOiB7IGNsaWNrOiBfdm0uYWRkRm9ybUJsb2NrIH0gfSxcbiAgICAgICAgW192bS5fdihcItCU0L7QsdCw0LLQuNGC0Ywg0LXRidC1XCIpXVxuICAgICAgKVxuICAgIF0sXG4gICAgMlxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0IGNvbnN0IGZvcm1MaXN0ID0ge1xyXG4gICAgcHJvcHM6IFtcclxuICAgICAgICAncGFyYW1zJ1xyXG4gICAgXSwgXHJcbiAgICBjcmVhdGVkKCkge1xyXG4gICAgICAgIGlmKHRoaXMucGFyYW1zLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzID0gdGhpcy5wYXJhbXMudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCF0aGlzLnBhcmFtcy5oYXNPd25Qcm9wZXJ0eSgnYmFkZ2VfaW5mbycpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybUVsZW1lbnRzLnB1c2goey4uLnRoaXMuZGVmYXVsdEVsZW1lbnR9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1FbGVtZW50cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMucGFyYW1zLmJhZGdlX2luZm8ubmFtZSxcclxuICAgICAgICAgICAgICAgIG1pZGRsZU5hbWU6IHRoaXMucGFyYW1zLmJhZGdlX2luZm8ubWlkZGxlX25hbWUsXHJcbiAgICAgICAgICAgICAgICBzdXJOYW1lOiB0aGlzLnBhcmFtcy5iYWRnZV9pbmZvLnN1cm5hbWUsXHJcbiAgICAgICAgICAgICAgICBjb21wYW55OiB0aGlzLnBhcmFtcy5iYWRnZV9pbmZvLmNvbXBhbnksICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpOyBcclxuICAgICB9LCAgICAgICBcclxuICAgIGRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6ICdpZCcgKyB0aGlzLnBhcmFtcy5pZCwgXHJcbiAgICAgICAgICAgIHZhbGlkOiB0cnVlLCAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGRlZmF1bHRFbGVtZW50OiB7fSxcclxuICAgICAgICAgICAgZm9ybUVsZW1lbnRzOiBbXHJcbiAgICAgICAgICAgIF0sICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgdG90YWwoKSB7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0NvbXB1dGVkIHx8IHRoaXMuZnJlZUNvdW50ID49IHRoaXMuYmxvY2tzQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB2YWwgPSB0aGlzLmJsb2Nrc0NvdW50IC0gdGhpcy5mcmVlQ291bnQ7XHJcbiAgICAgICAgICAgIHRvdGFsID0gdmFsICogKCt0aGlzLnVuaXRQcmljZSk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTih0b3RhbCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0b3RhbDsgICAgICAgICAgICAgICBcclxuICAgICAgICB9LCAgICAgICAgXHJcbiAgICAgICAgYmxvY2tzQ291bnQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1FbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcmVlQ291bnQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcmFtcy5wYXJhbWV0ZXJzLmZyZWVDb3VudDtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIGFkZEZvcm1CbG9jaygpIHtcclxuICAgICAgICAgICAgdGhpcy5mb3JtRWxlbWVudHMucHVzaCh7Li4udGhpcy5kZWZhdWx0RWxlbWVudH0pO1xyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtb3ZlSXRlbShpbmRleCkge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1FbGVtZW50cy5zcGxpY2UoaW5kZXgsMSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7ICAgICAgICAgICAgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNoYW5nZShldmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgIH0sICAgICAgICBcclxuICAgICAgICBnZXREYXRhKCkge1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5mb3JtRWxlbWVudHMsICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdmFsaWQ6IHRoaXMudmFsaWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDb21wdXRlZCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YS5jb21wdXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBkYXRhLnRvdGFsID0gdGhpcy50b3RhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTsgICAgICAgICAgICBcclxuICAgICAgICB9ICAgICAgICAgICAgICAgXHJcbiAgICAgfSAgICBcclxufSIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BZGRyZXNzQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQWRkcmVzc0Jsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwIGFsaWduLXJpZ2h0XCI+XHJcbiAgICAgICBcclxuICAgICAgIDxkaXYgdi1mb3I9XCIoaXRlbSxpbmRleCkgaW4gZm9ybUVsZW1lbnRzXCIgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLWRlZmF1bHRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJjYXJkLXRpdGxlXCI+e3sgdGl0bGVMYWJlbCB9fSAje3sgaW5kZXgrMSB9fTwvaDM+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8ZGl2ICB2LWlmPVwiYmxvY2tzQ291bnQgPiAxXCIgY2xhc3M9XCJjYXJkLXRvb2xzXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInJlbW92ZUl0ZW0oaW5kZXgpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi10b29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGxhYmVsPtCh0YLRgNCw0L3QsDo8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5jb3VudHJ5XCJcclxuICAgICAgICAgICBAY2hhbmdlPVwib25DaGFuZ2UoJGV2ZW50KVwiICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbD7QntCx0LvQsNGB0YLRjDo8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dCBcclxuXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uYXJlYVwiXHJcbiAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlKCRldmVudClcIiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiPlxyXG4gICAgICAgICAgICA8bGFiZWw+0JPQvtGA0L7QtDo8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxyXG4gICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5jaXR5XCJcclxuICAgICAgICAgICBAY2hhbmdlPVwib25DaGFuZ2UoJGV2ZW50KVwiICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCI+ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxsYWJlbD7QmNC90LTQtdC60YE6PC9sYWJlbD5cclxuICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uaW5kZXhcIlxyXG4gICAgICAgICAgIEBjaGFuZ2U9XCJvbkNoYW5nZSgkZXZlbnQpXCIgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIj4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgPGxhYmVsPtCQ0LTRgNC10YE6PC9sYWJlbD5cclxuICAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uYWRkcmVzc1wiXHJcbiAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlKCRldmVudClcIiAgIFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiPiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2PiBcclxuICAgIDwvZGl2PiBcclxuICAgICAgICA8YnV0dG9uIEBjbGljaz1cImFkZEZvcm1CbG9ja1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+0JTQvtCx0LDQstC40YLRjCDQtdGJ0LU8L2J1dHRvbj4gICAgIFxyXG4gICAgPC9kaXY+IFxyXG4gPC90ZW1wbGF0ZT5cclxuIDxzY3JpcHQ+XHJcbmltcG9ydCB7IGxhYmVsTWl4aW4gfSBmcm9tICcuL01peGlucy9sYWJlbE1peGluJztcclxuaW1wb3J0IHsgY29tcHV0ZWRNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2NvbXB1dGVkTWl4aW4nO1xyXG5pbXBvcnQgeyBmb3JtTGlzdCB9IGZyb20gJy4vTWl4aW5zL2Zvcm1MaXN0TWl4aW4nO1xyXG5cclxuIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRFbGVtZW50IDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnk6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZWE6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGFyZWFFbmc6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNpdHk6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNpdHlFbmc6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBhZGRyZXNzOiAnJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG4gICAgIH0sXHJcbiAgICAgbWl4aW5zOiBbXHJcbiAgICAgIGxhYmVsTWl4aW4sXHJcbiAgICAgIGNvbXB1dGVkTWl4aW4sXHJcbiAgICAgIGZvcm1MaXN0XHJcbiAgICAgXSwgICAgIFxyXG4gfVxyXG4gPC9zY3JpcHQ+XHJcbiA8c3R5bGUgc2NvcGU+XHJcbiA8L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQWRkcmVzc0Jsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00MGYzODBiNCZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BZGRyZXNzQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BZGRyZXNzQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzQwZjM4MGI0JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzQwZjM4MGI0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzQwZjM4MGI0JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BZGRyZXNzQmxvY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTQwZjM4MGI0JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzQwZjM4MGI0Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9Gb3JtRWxlbWVudHMvVW5pdHMvQWRkcmVzc0Jsb2NrLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IHN0YXRpY0NsYXNzOiBcImZvcm0tZ3JvdXAgYWxpZ24tcmlnaHRcIiB9LFxuICAgIFtcbiAgICAgIF92bS5fbChfdm0uZm9ybUVsZW1lbnRzLCBmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb250YWluZXItZmx1aWRcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkIGNhcmQtZGVmYXVsdFwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZC1oZWFkZXJcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiaDNcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLXRpdGxlXCIgfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLnRpdGxlTGFiZWwpICsgXCIgI1wiICsgX3ZtLl9zKGluZGV4ICsgMSkpXG4gICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfdm0uYmxvY2tzQ291bnQgPiAxXG4gICAgICAgICAgICAgICAgPyBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmQtdG9vbHNcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi10b29sXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5yZW1vdmVJdGVtKGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBbX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwiZmFzIGZhLXRpbWVzXCIgfSldXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwi0JjQvNGPOlwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJpdGVtLm5hbWVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwidGV4dFwiLCBwbGFjZWhvbGRlcjogXCJcIiB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogaXRlbS5uYW1lIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25DaGFuZ2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoaXRlbSwgXCJuYW1lXCIsICRldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxhYmVsXCIsIFtfdm0uX3YoXCLQntGC0YfQtdGB0YLQstC+OlwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5taWRkbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJpdGVtLm1pZGRsZU5hbWVcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jb250cm9sXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwidGV4dFwiLCBwbGFjZWhvbGRlcjogXCJcIiB9LFxuICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogaXRlbS5taWRkbGVOYW1lIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25DaGFuZ2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoaXRlbSwgXCJtaWRkbGVOYW1lXCIsICRldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxhYmVsXCIsIFtfdm0uX3YoXCLQpNCw0LzQuNC70LjRjzpcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uc3VyTmFtZSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5zdXJOYW1lXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IGl0ZW0uc3VyTmFtZSB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQ2hhbmdlKCRldmVudClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KGl0ZW0sIFwic3VyTmFtZVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwi0JrQvtC80L/QsNC90LjRjzpcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uY29tcGFueSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5jb21wYW55XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IGl0ZW0uY29tcGFueSB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQ2hhbmdlKCRldmVudClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KGl0ZW0sIFwiY29tcGFueVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1wcmltYXJ5XCIsIG9uOiB7IGNsaWNrOiBfdm0uYWRkRm9ybUJsb2NrIH0gfSxcbiAgICAgICAgW192bS5fdihcItCU0L7QsdCw0LLQuNGC0Ywg0LXRidC1XCIpXVxuICAgICAgKVxuICAgIF0sXG4gICAgMlxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBhbGlnbi1yaWdodFwiPiAgICAgIFxyXG4gICAgICA8ZGl2IHYtZm9yPVwiKGl0ZW0sIGluZGV4KSBpbiBmb3JtRWxlbWVudHNcIiBjbGFzcz1cImNvbnRhaW5lci1mbHVpZFwiPlxyXG4gICAgICAgPGRpdiBjbGFzcz1cImNhcmQgY2FyZC1kZWZhdWx0XCI+XHJcbiAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgIDxoMyBjbGFzcz1cImNhcmQtdGl0bGVcIj57eyB0aXRsZUxhYmVsIH19ICN7eyBpbmRleCsxIH19PC9oMz5cclxuICAgICAgICAgICBcclxuICAgICAgICAgICA8ZGl2IHYtaWY9XCJibG9ja3NDb3VudCA+IDFcIiBjbGFzcz1cImNhcmQtdG9vbHNcIj5cclxuICAgICAgICAgICAgICAgPGJ1dHRvbiBAY2xpY2s9XCJyZW1vdmVJdGVtKGluZGV4KVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tdG9vbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+XHJcbiAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgPC9kaXY+XHJcbiAgICAgICA8bGFiZWw+0JjQvNGPOjwvbGFiZWw+XHJcbiAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0ubmFtZVwiXHJcbiAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlKCRldmVudClcIiAgICAgICAgICAgXHJcbiAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIj5cclxuICAgICAgPGxhYmVsPtCe0YLRh9C10YHRgtCy0L46PC9sYWJlbD5cclxuICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5taWRkbGVOYW1lXCIgXHJcbiAgICAgICAgICAgQGNoYW5nZT1cIm9uQ2hhbmdlKCRldmVudClcIiAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCI+ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgPGxhYmVsPtCk0LDQvNC40LvQuNGPOjwvbGFiZWw+XHJcbiAgICAgICA8aW5wdXQgXHJcbiAgICAgICAgICAgdHlwZT1cInRleHRcIiBcclxuICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uc3VyTmFtZVwiIFxyXG4gICAgICAgICAgIEBjaGFuZ2U9XCJvbkNoYW5nZSgkZXZlbnQpXCIgICAgICAgXHJcbiAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIj4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICA8bGFiZWw+0JrQvtC80L/QsNC90LjRjzo8L2xhYmVsPlxyXG4gICAgICAgICAgIDxpbnB1dCBcclxuICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICB2LW1vZGVsPVwiaXRlbS5jb21wYW55XCJcclxuICAgICAgICAgICBAY2hhbmdlPVwib25DaGFuZ2UoJGV2ZW50KVwiICAgICAgICAgICBcclxuICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiPiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgPC9kaXY+IFxyXG4gICA8L2Rpdj4gXHJcbiAgICAgICA8YnV0dG9uIEBjbGljaz1cImFkZEZvcm1CbG9ja1wiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCI+0JTQvtCx0LDQstC40YLRjCDQtdGJ0LU8L2J1dHRvbj4gICAgIFxyXG4gICA8L2Rpdj4gXHJcbjwvdGVtcGxhdGU+XHJcbiA8c2NyaXB0PlxyXG5pbXBvcnQgeyBsYWJlbE1peGluIH0gZnJvbSAnLi9NaXhpbnMvbGFiZWxNaXhpbic7XHJcbmltcG9ydCB7IGNvbXB1dGVkTWl4aW4gfSBmcm9tICcuL01peGlucy9jb21wdXRlZE1peGluJztcclxuaW1wb3J0IHsgZm9ybUxpc3QgfSBmcm9tICcuL01peGlucy9mb3JtTGlzdE1peGluJztcclxuIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkZWZhdWx0RWxlbWVudCA6IHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBtaWRkbGVOYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzdXJOYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBjb21wYW55OiAnJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfVxyXG4gICAgIH0sICAgXHJcbiAgICAgbWl4aW5zOiBbXHJcbiAgICAgIGxhYmVsTWl4aW4sXHJcbiAgICAgIGNvbXB1dGVkTWl4aW4sXHJcbiAgICAgIGZvcm1MaXN0XHJcbiAgICAgXSxcclxuIH1cclxuIDwvc2NyaXB0PlxyXG4gPHN0eWxlIHNjb3BlPlxyXG4gICAuZm9ybS1ncm91cCB7XHJcbiAgICAgIG1hcmdpbjogMnJlbSAwO1xyXG4gICB9XHJcbiA8L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9CYWRnZUJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0JhZGdlQmxvY2sudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9CYWRnZUJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00ODg0N2FiNiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9CYWRnZUJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQmFkZ2VCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQmFkZ2VCbG9jay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZzY29wZT10cnVlJmxhbmc9Y3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzQ4ODQ3YWI2JykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzQ4ODQ3YWI2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzQ4ODQ3YWI2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9CYWRnZUJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00ODg0N2FiNiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc0ODg0N2FiNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0JhZGdlQmxvY2sudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1ncm91cCBhbGlnbi1yaWdodFwiIH0sXG4gICAgW1xuICAgICAgX3ZtLl9sKF92bS5mb3JtRWxlbWVudHMsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lci1mbHVpZFwiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmQgY2FyZC1kZWZhdWx0XCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLWhlYWRlclwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJoM1wiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmQtdGl0bGVcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udGl0bGVMYWJlbCkgKyBcIiAjXCIgKyBfdm0uX3MoaW5kZXggKyAxKSlcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF92bS5ibG9ja3NDb3VudCA+IDFcbiAgICAgICAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZC10b29sc1wiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLXRvb2xcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnJlbW92ZUl0ZW0oaW5kZXgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFtfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJmYXMgZmEtdGltZXNcIiB9KV1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICA6IF92bS5fZSgpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImxhYmVsXCIsIFtfdm0uX3YoXCLQodCw0LnRgjpcIildKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IGl0ZW0uc2l0ZSxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5zaXRlXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IGl0ZW0uc2l0ZSB9LFxuICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLm9uQ2hhbmdlKCRldmVudClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGlucHV0OiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF92bS4kc2V0KGl0ZW0sIFwic2l0ZVwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwiRS1tYWlsOlwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS5lbWFpbCxcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXRlbS5lbWFpbFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmb3JtLWNvbnRyb2xcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJ0ZXh0XCIsIHBsYWNlaG9sZGVyOiBcIlwiIH0sXG4gICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBpdGVtLmVtYWlsIH0sXG4gICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ub25DaGFuZ2UoJGV2ZW50KVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgX3ZtLiRzZXQoaXRlbSwgXCJlbWFpbFwiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCBbX3ZtLl92KFwi0KLQtdC70LXRhNC+0L06XCIpXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiBpdGVtLnBob25lLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJpdGVtLnBob25lXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY29udHJvbFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0eXBlOiBcInRleHRcIiwgcGxhY2Vob2xkZXI6IFwiXCIgfSxcbiAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IGl0ZW0ucGhvbmUgfSxcbiAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5vbkNoYW5nZSgkZXZlbnQpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBfdm0uJHNldChpdGVtLCBcInBob25lXCIsICRldmVudC50YXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pXG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJidG4gYnRuLXByaW1hcnlcIiwgb246IHsgY2xpY2s6IF92bS5hZGRGb3JtQmxvY2sgfSB9LFxuICAgICAgICBbX3ZtLl92KFwi0JTQvtCx0LDQstC40YLRjCDQtdGJ0LVcIildXG4gICAgICApXG4gICAgXSxcbiAgICAyXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiZm9ybS1ncm91cCBhbGlnbi1yaWdodFwiPlxyXG4gICAgICAgIDxkaXYgdi1mb3I9XCIoaXRlbSxpbmRleCkgaW4gZm9ybUVsZW1lbnRzXCIgY2xhc3M9XCJjb250YWluZXItZmx1aWRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZCBjYXJkLWRlZmF1bHRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJjYXJkLXRpdGxlXCI+e3sgdGl0bGVMYWJlbCB9fSAje3sgaW5kZXgrMSB9fTwvaDM+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8ZGl2ICB2LWlmPVwiYmxvY2tzQ291bnQgPiAxXCIgY2xhc3M9XCJjYXJkLXRvb2xzXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIEBjbGljaz1cInJlbW92ZUl0ZW0oaW5kZXgpXCIgdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi10b29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJmYXMgZmEtdGltZXNcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGxhYmVsPtCh0LDQudGCOjwvbGFiZWw+XHJcbiAgICAgICAgPGlucHV0IFxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLnNpdGVcIlxyXG4gICAgICAgICAgIEBjaGFuZ2U9XCJvbkNoYW5nZSgkZXZlbnQpXCIgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIj5cclxuICAgICAgICAgICAgPGxhYmVsPkUtbWFpbDo8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dCBcclxuXHJcbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCIgXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcclxuICAgICAgICAgICAgdi1tb2RlbD1cIml0ZW0uZW1haWxcIlxyXG4gICAgICAgICAgIEBjaGFuZ2U9XCJvbkNoYW5nZSgkZXZlbnQpXCIgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIj5cclxuICAgICAgICAgICAgPGxhYmVsPtCi0LXQu9C10YTQvtC9OjwvbGFiZWw+XHJcbiAgICAgICAgPGlucHV0IFxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiIFxyXG4gICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXHJcbiAgICAgICAgICAgIHYtbW9kZWw9XCJpdGVtLnBob25lXCJcclxuICAgICAgICAgICBAY2hhbmdlPVwib25DaGFuZ2UoJGV2ZW50KVwiICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCI+ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC9kaXY+ICAgICAgIFxyXG4gICAgPC9kaXY+IFxyXG4gICAgICAgIDxidXR0b24gQGNsaWNrPVwiYWRkRm9ybUJsb2NrXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIj7QlNC+0LHQsNCy0LjRgtGMINC10YnQtTwvYnV0dG9uPiAgICAgXHJcbiAgICA8L2Rpdj4gIFxyXG4gPC90ZW1wbGF0ZT5cclxuIDxzY3JpcHQ+XHJcbiBpbXBvcnQgeyBsYWJlbE1peGluIH0gZnJvbSAnLi9NaXhpbnMvbGFiZWxNaXhpbic7XHJcbmltcG9ydCB7IGNvbXB1dGVkTWl4aW4gfSBmcm9tICcuL01peGlucy9jb21wdXRlZE1peGluJztcclxuaW1wb3J0IHsgZm9ybUxpc3QgfSBmcm9tICcuL01peGlucy9mb3JtTGlzdE1peGluJztcclxuXHJcbiBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRlZmF1bHRFbGVtZW50IDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpdGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBwaG9uZTogJycsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgICB9LFxyXG4gICAgIG1peGluczogW1xyXG4gICAgICBsYWJlbE1peGluLFxyXG4gICAgICBjb21wdXRlZE1peGluLFxyXG4gICAgICBmb3JtTGlzdFxyXG4gICAgIF0sICAgICAgICBcclxuIH1cclxuIDwvc2NyaXB0PlxyXG4gPHN0eWxlIHNjb3BlPlxyXG4gPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vSW5mb3JtYXRpb25Gb3JtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0luZm9ybWF0aW9uRm9ybS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0luZm9ybWF0aW9uRm9ybS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZTZkZTdiYjYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vSW5mb3JtYXRpb25Gb3JtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vSW5mb3JtYXRpb25Gb3JtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdlNmRlN2JiNicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdlNmRlN2JiNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdlNmRlN2JiNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vSW5mb3JtYXRpb25Gb3JtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1lNmRlN2JiNiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdlNmRlN2JiNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0luZm9ybWF0aW9uRm9ybS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJibG9ja19fcnVicmljYXRvclwiIH0sXG4gICAgW1xuICAgICAgX2MoXG4gICAgICAgIFwiZGl2XCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJtYWluXCIsXG4gICAgICAgICAgb246IHtcbiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgICAgX3ZtLmlzQWN0aXZlID0gIV92bS5pc0FjdGl2ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgW1xuICAgICAgICAgIF9jKFwic3BhblwiLCB7IGNsYXNzOiB7IGFjdGl2ZTogX3ZtLmlzQWN0aXZlIH0gfSwgW1xuICAgICAgICAgICAgX2MoXCJpXCIsIHtcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZmEgZmEtY2hldnJvbi1kb3duXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IFwiYXJpYS1oaWRkZW5cIjogXCJ0cnVlXCIgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS50aXRsZUxhYmVsKSlcbiAgICAgICAgICBdKVxuICAgICAgICBdXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5fbChfdm0ucnVicmljc1swXS5jaGlsZHJlbiwgZnVuY3Rpb24ocnVicmljKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcInd0cmVlXCIgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX2MoXCJydWJyaWNhdG9yLWVsZW1lbnRcIiwge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaXNBY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXNBY3RpdmVcIlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgYXR0cnM6IHsgcnVicmljc0luQ2F0YWxvZzogX3ZtLnNlbGVjdGVkLCBydWJyaWNzOiBydWJyaWMgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApXG4gICAgICAgIF1cbiAgICAgIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY2FyZFwiIH0sIFtcbiAgICAgICAgX3ZtLl9tKDApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNhcmQtYm9keSB0YWJsZS1yZXNwb25zaXZlIHAtMFwiIH0sIFtcbiAgICAgICAgICBfYyhcInRhYmxlXCIsIHsgc3RhdGljQ2xhc3M6IFwidGFibGUgdGFibGUtaG92ZXIgdGV4dC1ub3dyYXBcIiB9LCBbXG4gICAgICAgICAgICBfdm0uX20oMSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwidGJvZHlcIixcbiAgICAgICAgICAgICAgX3ZtLl9sKF92bS5zZWxlY3RlZCwgZnVuY3Rpb24oZWwsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jKFwidHJcIiwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbX3ZtLl92KF92bS5fcyhpbmRleCArIDEpKV0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFwidGRcIiwgW192bS5fdihfdm0uX3MoZWwubmFtZSkpXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJ0ZFwiLCBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZmFyIGZhLXRpbWVzLWNpcmNsZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ucmVtb3ZlUnVicmljKGluZGV4KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLWhlYWRlclwiIH0sIFtcbiAgICAgIF9jKFwiaDNcIiwgeyBzdGF0aWNDbGFzczogXCJjYXJkLXRpdGxlXCIgfSwgW192bS5fdihcItCS0YvQsdGA0LDQvdC90YvQtSDRgNGD0LHRgNC40LrQuFwiKV0pXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJ0aGVhZFwiLCBbXG4gICAgICBfYyhcInRyXCIsIFtcbiAgICAgICAgX2MoXCJ0aFwiLCB7IGF0dHJzOiB7IHdpZHRoOiBcIjQwXCIgfSB9LCBbX3ZtLl92KFwiI1wiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRoXCIsIFtfdm0uX3YoXCLQoNGD0LHRgNC40LrQsFwiKV0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcInRoXCIsIHsgYXR0cnM6IHsgd2lkdGg6IFwiMjBcIiB9IH0pXG4gICAgICBdKVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdiBjbGFzcz1cImJsb2NrX19ydWJyaWNhdG9yXCI+XHJcbiAgICAgICA8ZGl2IEBjbGljaz1cImlzQWN0aXZlPSFpc0FjdGl2ZVwiIGNsYXNzPVwibWFpblwiPjxzcGFuIDpjbGFzcz1cInsgYWN0aXZlOiBpc0FjdGl2ZX1cIj48aSBjbGFzcz1cImZhIGZhLWNoZXZyb24tZG93blwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT57eyB0aXRsZUxhYmVsfX08L3NwYW4+PC9kaXY+XHJcbiAgICAgICAgPHRlbXBsYXRlIHYtZm9yPVwicnVicmljIGluIHJ1YnJpY3NbMF0uY2hpbGRyZW5cIj4gXHJcbiAgICAgICAgICAgIDx1bCBjbGFzcz1cInd0cmVlXCI+XHJcbiAgICAgICAgICAgICAgPHJ1YnJpY2F0b3ItZWxlbWVudCA6cnVicmljc0luQ2F0YWxvZz1cInNlbGVjdGVkXCIgdi1zaG93PVwiaXNBY3RpdmVcIiA6cnVicmljcz1cInJ1YnJpY1wiPjwvcnVicmljYXRvci1lbGVtZW50PlxyXG4gICAgICAgICAgICA8L3VsPiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgPGgzIGNsYXNzPVwiY2FyZC10aXRsZVwiPtCS0YvQsdGA0LDQvdC90YvQtSDRgNGD0LHRgNC40LrQuDwvaDM+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPCEtLSAvLmNhcmQtaGVhZGVyIC0tPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWJvZHkgdGFibGUtcmVzcG9uc2l2ZSBwLTBcIj5cclxuICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLWhvdmVyIHRleHQtbm93cmFwXCI+XHJcbiAgICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGggd2lkdGg9XCI0MFwiPiM8L3RoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHRoPtCg0YPQsdGA0LjQutCwPC90aD5cclxuICAgICAgICAgICAgICAgICAgICAgIDx0aCB3aWR0aD1cIjIwXCI+PC90aD5cclxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgICA8dGJvZHk+ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICA8dHIgdi1mb3I9XCIoZWwsaW5kZXgpIGluIHNlbGVjdGVkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgaW5kZXgrMSB9fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGQ+e3sgZWwubmFtZSB9fTwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGkgQGNsaWNrPVwicmVtb3ZlUnVicmljKGluZGV4KVwiIGNsYXNzPVwiZmFyIGZhLXRpbWVzLWNpcmNsZVwiPjwvaT48L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwhLS0gLy5jYXJkLWJvZHkgLS0+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+IFxyXG4gPC90ZW1wbGF0ZT5cclxuIDxzY3JpcHQ+XHJcbiBpbXBvcnQgUnVicmljYXRvckVsZW1lbnQgZnJvbSAnLi9Db21wb25lbnRzL1J1YnJpY2F0b3JFbGVtZW50JztcclxuIGltcG9ydCB7IGNvbXB1dGVkTWl4aW4gfSBmcm9tICcuL01peGlucy9jb21wdXRlZE1peGluJztcclxuaW1wb3J0IHsgbGFiZWxNaXhpbiB9IGZyb20gJy4vTWl4aW5zL2xhYmVsTWl4aW4nO1xyXG5cclxuIGltcG9ydCB7IGV2ZW50QnVzIH0gZnJvbSAnLi4vLi4vZXZlbnRCdXMnXHJcbiBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogJ2lkJyArIHRoaXMucGFyYW1zLmlkLFxyXG4gICAgICAgICAgICBsb2FkZWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBydWJyaWNzOiBbW11dLFxyXG4gICAgICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHZhbGlkOiB0cnVlLCAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzZWxlY3RlZDogW11cclxuICAgICAgICB9XHJcbiAgICAgfSxcclxuICAgICBwcm9wczogWydwYXJhbXMnXSxcclxuICAgICBtaXhpbnM6IFtcclxuICAgICAgY29tcHV0ZWRNaXhpbixcclxuICAgICAgbGFiZWxNaXhpblxyXG4gICAgIF0sXHJcbiAgICAgY29tcG9uZW50cyA6IHtcclxuICAgICAgICBSdWJyaWNhdG9yRWxlbWVudFxyXG4gICAgIH0sXHJcbiAgICAgY3JlYXRlZCgpIHtcclxuICAgICAgIGlmKHRoaXMucGFyYW1zLmhhc093blByb3BlcnR5KCd2YWx1ZScpKSB7XHJcbiAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0aGlzLnBhcmFtcy52YWx1ZTtcclxuICAgICAgICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgICAgICAgfSAgICAgICAgXHJcbiAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlRmllbGQnLHRoaXMuZ2V0RGF0YSgpKTtcclxuICAgICAgICBmZXRjaCgnL2FwaS9ydWJyaWNhdG9yL2dldC1saXN0JykudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5ydWJyaWNzID0gZGF0YTtcclxuICAgICAgICAgICAgICAgIGV2ZW50QnVzLiRvbigncnVicmljV2FzQWRkZWQnLCAoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VGaWVsZCcsdGhpcy5nZXREYXRhKCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBldmVudEJ1cy4kb24oJ3J1YnJpY1dhc0RlbGV0ZScsIChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW1JbmRleCA9dGhpcy5zZWxlY3RlZC5maW5kSW5kZXgoKGVsKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGVsLmlkID09IGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1JbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVJ1YnJpYyhpdGVtSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcbiAgICAgfSxcclxuICAgICBjb21wdXRlZDoge1xyXG4gICAgICBydWJyaWNzQ291bnQoKSB7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZC5sZW5ndGg7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZyZWVDb3VudCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLnBhcmFtZXRlcnMuZnJlZUNvdW50O1xyXG4gICAgICB9LFxyXG4gICAgICB0b3RhbCgpIHtcclxuICAgICAgICAgICAgbGV0IHRvdGFsID0gMDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ29tcHV0ZWQgfHwgdGhpcy5mcmVlQ291bnQgPj0gdGhpcy5ydWJyaWNzQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB2YWwgPSB0aGlzLnJ1YnJpY3NDb3VudCAtIHRoaXMuZnJlZUNvdW50O1xyXG4gICAgICAgICAgICB0b3RhbCA9IHZhbCAqICgrdGhpcy51bml0UHJpY2UpO1xyXG4gICAgICAgICAgICBpZiAoaXNOYU4odG90YWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdG90YWw7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfSwgICAgICAgXHJcbiAgICAgfSxcclxuICAgICBtZXRob2RzOiB7XHJcbiAgICAgIHJlbW92ZVJ1YnJpYyhpbmRleCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQuc3BsaWNlKGluZGV4LDEpO1xyXG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZUZpZWxkJyx0aGlzLmdldERhdGEoKSk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnNlbGVjdGVkLCAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbGlkOiB0aGlzLnZhbGlkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcHV0ZWQpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEuY29tcHV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZGF0YS50b3RhbCA9IHRoaXMudG90YWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7ICAgICAgICAgICAgXHJcbiAgICAgICAgfSAgICAgICBcclxuICAgICB9XHJcbiB9XHJcbiA8L3NjcmlwdD5cclxuIDxzdHlsZSBzY29wZT5cclxuIC5ibG9ja19fcnVicmljYXRvciBzcGFuID4gaSB7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgZWFzZS1pbi1vdXQ7XHJcbiB9XHJcbiAuYmxvY2tfX3J1YnJpY2F0b3Igc3Bhbi5hY3RpdmUgPiBpIHtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7XHJcbiB9XHJcbiAuYmxvY2tfX3J1YnJpY2F0b3IgLm1haW4ge1xyXG4gICAgLyogcGFkZGluZzogMTVweCAxNXB4IDE1cHggNDVweDsgKi9cclxuICAgIGZvbnQtc2l6ZTogMThweDtcclxuIH1cclxudWwge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDIwcHg7XHJcbn1cclxuXHJcbi53dHJlZSBsaSB7XHJcbiAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gICBtYXJnaW46IDVweCAwIDVweCA1cHg7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG59XHJcbi53dHJlZSBsaTpiZWZvcmUge1xyXG4gIGNvbnRlbnQ6IFwiXCI7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogLTEwcHg7XHJcbiAgbGVmdDogLTIwcHg7XHJcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCAjZGRkO1xyXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGRkO1xyXG4gIHdpZHRoOiAyMHB4O1xyXG4gIGhlaWdodDogMTVweDtcclxufVxyXG4ud3RyZWUgbGk6YWZ0ZXIge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBjb250ZW50OiBcIlwiO1xyXG4gIHRvcDogNXB4O1xyXG4gIGxlZnQ6IC0yMHB4O1xyXG4gIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2RkZDtcclxuICBib3JkZXItdG9wOiAxcHggc29saWQgI2RkZDtcclxuICB3aWR0aDogMjBweDtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuLnd0cmVlIGxpOmxhc3QtY2hpbGQ6YWZ0ZXIge1xyXG4gIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuLnd0cmVlIGxpIHNwYW4ge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNkZGQ7XHJcbiAgcGFkZGluZzogNXB4OyBcclxuICBjb2xvcjogIzAwMDtcclxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbn1cclxuLnd0cmVlIGxpIHNwYW4ucnVicmljX19jaGVja2VkIHtcclxuICBiYWNrZ3JvdW5kOiAjRUZBMjgxOyAgXHJcbn1cclxuLnd0cmVlIGxpIHNwYW46aG92ZXIsIC53dHJlZSBsaSBzcGFuOmZvY3VzIHtcclxuICBiYWNrZ3JvdW5kOiAjRUZBMjgxO1xyXG4gIGNvbG9yOiAjMDAwO1xyXG4gIGJvcmRlcjogMXB4IHNvbGlkICNhYWE7XHJcbn1cclxuLnd0cmVlIGxpIHNwYW46aG92ZXIgKyB1bCBsaSBzcGFuLCAud3RyZWUgbGkgc3Bhbjpmb2N1cyArIHVsIGxpIHNwYW4ge1xyXG4gIGJhY2tncm91bmQ6ICNFRkEyODE7XHJcbiAgY29sb3I6ICMwMDA7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcclxufVxyXG4ud3RyZWUgbGkgc3Bhbi5ydWJyaWNfX2NoZWNrZWQ6aG92ZXIsIC53dHJlZSBsaSBzcGFuLnJ1YnJpY19fY2hlY2tlZDpmb2N1cyB7XHJcbiAgYmFja2dyb3VuZDogI2UyZDRjZTtcclxuICBjb2xvcjogIzAwMDtcclxuICBib3JkZXI6IDFweCBzb2xpZCAjYWFhO1xyXG59XHJcbi53dHJlZSBsaSBzcGFuOmhvdmVyICsgdWwgbGkgc3Bhbi5ydWJyaWNfX2NoZWNrZWQsIC53dHJlZSBsaSBzcGFuOmZvY3VzICsgdWwgbGkgc3Bhbi5ydWJyaWNfX2NoZWNrZWQge1xyXG4gIGJhY2tncm91bmQ6ICNlMmQ0Y2U7XHJcbiAgY29sb3I6ICMwMDA7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgI2FhYTtcclxufVxyXG4ud3RyZWUgbGkgc3Bhbjpob3ZlciArIHVsIGxpOmFmdGVyLCAud3RyZWUgbGkgc3Bhbjpob3ZlciArIHVsIGxpOmJlZm9yZSwgLnd0cmVlIGxpIHNwYW46Zm9jdXMgKyB1bCBsaTphZnRlciwgLnd0cmVlIGxpIHNwYW46Zm9jdXMgKyB1bCBsaTpiZWZvcmUge1xyXG4gIGJvcmRlci1jb2xvcjogI2FhYTtcclxufSAgICAgXHJcblxyXG4gPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUnVicmljYXRvckJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1J1YnJpY2F0b3JCbG9jay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1J1YnJpY2F0b3JCbG9jay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ODMzM2MzNDImXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vUnVicmljYXRvckJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUnVicmljYXRvckJsb2NrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9SdWJyaWNhdG9yQmxvY2sudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmc2NvcGU9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc4MzMzYzM0MicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc4MzMzYzM0MicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc4MzMzYzM0MicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vUnVicmljYXRvckJsb2NrLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD04MzMzYzM0MiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc4MzMzYzM0MicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL1J1YnJpY2F0b3JCbG9jay52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vRWxlbWVudC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9FbGVtZW50LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJjb21wXCI+XHJcbiAgICAgICAgPGNvbXBvbmVudCA6aXM9XCJjdXJyZW50RWxlbWVudFwiIDpwYXJhbXM9XCJ1bml0RGF0YVwiIEBjaGFuZ2VGaWVsZD1cImZpZWxkQ2hhbmdlZFwiIDpsYW5nPVwibGFuZ1wiIDpkaWM9XCJkaWNcIj48L2NvbXBvbmVudD5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgSW1wb3J0YW50QmxvY2sgZnJvbSAnLi9Vbml0cy9JbXBvcnRhbnRCbG9jayc7XHJcbmltcG9ydCBIZWFkZXJCbG9jayBmcm9tICcuL1VuaXRzL0hlYWRlckJsb2NrJztcclxuaW1wb3J0IENoZWNrQm94QmxvY2sgZnJvbSAnLi9Vbml0cy9DaGVja0JveEJsb2NrJztcclxuaW1wb3J0IFRleHRJbnB1dEJsb2NrIGZyb20gJy4vVW5pdHMvVGV4dElucHV0QmxvY2snO1xyXG5pbXBvcnQgTnVtYmVySW5wdXRCbG9jayBmcm9tICcuL1VuaXRzL051bWJlcklucHV0QmxvY2snO1xyXG5pbXBvcnQgQ2hlY2tOdW1iZXJJbnB1dCBmcm9tICcuL1VuaXRzL0NoZWNrTnVtYmVySW5wdXQnO1xyXG5pbXBvcnQgU2VsZWN0QmxvY2sgZnJvbSAnLi9Vbml0cy9TZWxlY3RCbG9jayc7XHJcbmltcG9ydCBGcmllemVCbG9jayBmcm9tICcuL1VuaXRzL0ZyaWV6ZUJsb2NrJztcclxuaW1wb3J0IE11bHRpU2VsZWN0QmxvY2sgZnJvbSAnLi9Vbml0cy9NdWx0aVNlbGVjdEJsb2NrJztcclxuaW1wb3J0IFVuZGVmaW5lZEJsb2NrIGZyb20gJy4vVW5pdHMvVW5kZWZpbmVkQmxvY2snO1xyXG5pbXBvcnQgUmFkaW9CbG9jayBmcm9tICcuL1VuaXRzL1JhZGlvQmxvY2snO1xyXG5pbXBvcnQgRXF1aXBtZW50QmxvY2sgZnJvbSAnLi9Vbml0cy9FcXVpcG1lbnRCbG9jayc7XHJcbmltcG9ydCBHcm91cEJsb2NrIGZyb20gJy4vVW5pdHMvR3JvdXBCbG9jayc7XHJcbmltcG9ydCBEYXRlVGltZUJsb2NrIGZyb20gJy4vVW5pdHMvRGF0ZVRpbWVCbG9jayc7XHJcbmltcG9ydCBEYXRlQmxvY2sgZnJvbSAnLi9Vbml0cy9EYXRlQmxvY2snO1xyXG5pbXBvcnQgRGF0ZU11bHRpcGxlQmxvY2sgZnJvbSAnLi9Vbml0cy9EYXRlTXVsdGlwbGVCbG9jayc7XHJcbmltcG9ydCBJbXBvcnRhbnRJbmZvcm1hdGlvbkJsb2NrIGZyb20gJy4vVW5pdHMvSW1wb3J0YW50SW5mb3JtYXRpb24nO1xyXG5pbXBvcnQgRmlsZUJsb2NrIGZyb20gJy4vVW5pdHMvRmlsZUJsb2NrJztcclxuaW1wb3J0IEFkZHJlc3NCbG9jayBmcm9tICcuL1VuaXRzL0FkZHJlc3NCbG9jayc7XHJcbmltcG9ydCBCYWRnZUJsb2NrIGZyb20gJy4vVW5pdHMvQmFkZ2VCbG9jayc7XHJcbmltcG9ydCBJbmZvcm1hdGlvbkZvcm0gZnJvbSAnLi9Vbml0cy9JbmZvcm1hdGlvbkZvcm0nO1xyXG5pbXBvcnQgUnVicmljYXRvckJsb2NrIGZyb20gJy4vVW5pdHMvUnVicmljYXRvckJsb2NrJztcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgcHJvcHM6IFtcclxuICAgICAgICAndW5pdERhdGEnLCdsYW5nJywnZGljJ1xyXG4gICAgXSxcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAnaW1wb3J0YW50JzogSW1wb3J0YW50QmxvY2ssXHJcbiAgICAgICAgJ2ltcG9ydGFudC1pbmZvcm1hdGlvbic6IEltcG9ydGFudEluZm9ybWF0aW9uQmxvY2ssXHJcbiAgICAgICAgJ2hlYWRlci1ibGNrJzogSGVhZGVyQmxvY2ssXHJcbiAgICAgICAgJ3RleHQtaW5wdXQnOiBUZXh0SW5wdXRCbG9jayxcclxuICAgICAgICAnbnVtYmVyLWlucHV0JzogTnVtYmVySW5wdXRCbG9jayxcclxuICAgICAgICAnY2hlY2stbnVtYmVyLWlucHV0JzogQ2hlY2tOdW1iZXJJbnB1dCxcclxuICAgICAgICAnY2hlY2tib3gnOiBDaGVja0JveEJsb2NrLFxyXG4gICAgICAgICdzZWxlY3QtaW5wdXQnOiBTZWxlY3RCbG9jayxcclxuICAgICAgICAnbXVsdGktc2VsZWN0LWlucHV0JzogTXVsdGlTZWxlY3RCbG9jayxcclxuICAgICAgICAncmFkaW8nOiBSYWRpb0Jsb2NrLFxyXG4gICAgICAgICdlcXVpcG1lbnQnOiBFcXVpcG1lbnRCbG9jayxcclxuICAgICAgICAnZnJpZXplJzogRnJpZXplQmxvY2ssXHJcbiAgICAgICAgJ2dyb3VwJzogR3JvdXBCbG9jayxcclxuICAgICAgICAnZGF0ZS1tdWx0aXBsZSc6IERhdGVNdWx0aXBsZUJsb2NrLFxyXG4gICAgICAgICdkYXRlLXRpbWUnOiBEYXRlVGltZUJsb2NrLFxyXG4gICAgICAgICdkYXRlJzogRGF0ZUJsb2NrLFxyXG4gICAgICAgICdmaWxlJzogRmlsZUJsb2NrLFxyXG4gICAgICAgICdhZGRyZXNzLWJsb2NrJzogQWRkcmVzc0Jsb2NrLFxyXG4gICAgICAgICdiYWRnZSc6IEJhZGdlQmxvY2ssXHJcbiAgICAgICAgJ2luZm9ybWF0aW9uLWZvcm0nOiBJbmZvcm1hdGlvbkZvcm0sXHJcbiAgICAgICAgJ3J1YnJpY2F0b3InOiBSdWJyaWNhdG9yQmxvY2ssXHJcbiAgICAgICAgJ3VuZGVmaW5lZCc6IFVuZGVmaW5lZEJsb2NrXHJcbiAgICB9LCAgICBcclxuICAgIGRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZXNMaXN0OiB7XHJcbiAgICAgICAgICAgICAgICBibG9ja0NoZWNrYm94OiAxLFxyXG4gICAgICAgICAgICAgICAgYmxvY2tTZWxlY3Q6IDIsXHJcbiAgICAgICAgICAgICAgICBibG9ja011bHRpU2VsZWN0OiAzLFxyXG4gICAgICAgICAgICAgICAgYmxvY2tEYXRlOiA0LFxyXG4gICAgICAgICAgICAgICAgYmxvY2tEYXRlTXVsdGlwbGU6IDUsXHJcbiAgICAgICAgICAgICAgICBibG9ja1JhZGlvOiA2LFxyXG4gICAgICAgICAgICAgICAgYmxvY2tOdW1iZXJJbnB1dDogNyxcclxuICAgICAgICAgICAgICAgIGJsb2NrQ2hlY2tOdW1iZXI6IDgsXHJcbiAgICAgICAgICAgICAgICBibG9ja1RleHRJbnB1dDogOSxcclxuICAgICAgICAgICAgICAgIGJsb2NrRmlsZTogMTAsXHJcbiAgICAgICAgICAgICAgICBibG9ja0ltcG9ydGFudEluZm9ybWF0aW9uOiAxMixcclxuICAgICAgICAgICAgICAgIGJsb2NrSW1wb3J0YW50OiAxMyxcclxuICAgICAgICAgICAgICAgIGJsb2NrSGVhZGVyOiAxNCxcclxuICAgICAgICAgICAgICAgIGJsb2NrRXF1aXBtZW50OiAxNSxcclxuICAgICAgICAgICAgICAgIGJsb2NrR3JvdXA6IDE2LFxyXG4gICAgICAgICAgICAgICAgYmxvY2tGcmllemU6IDE3LFxyXG4gICAgICAgICAgICAgICAgYmxvY2tEYXRlVGltZTogMTgsXHJcbiAgICAgICAgICAgICAgICBibG9ja0luZm9ybWF0aW9uRm9ybTogMjAsXHJcbiAgICAgICAgICAgICAgICBibG9ja1J1YnJpY2F0b3I6IDIxLFxyXG4gICAgICAgICAgICAgICAgYmxvY2tCYWRnZTogMjIsXHJcbiAgICAgICAgICAgICAgICBibG9ja0FkZHJlc3M6IDIzLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBmaWVsZENoYW5nZWQoZmllbGQpIHtcclxuICAgICAgICAgICAgdGhpcy4kZW1pdCgnbW9kaWZpY2F0aW9uJywgZmllbGQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBjb21wdXRlZDoge1xyXG4gICAgICAgIGN1cnJlbnRFbGVtZW50KCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHBhcnNlSW50KHRoaXMudW5pdERhdGEuZWxlbWVudF90eXBlX2lkKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja1NlbGVjdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3NlbGVjdC1pbnB1dCc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrUmFkaW86XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdyYWRpbyc7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tNdWx0aVNlbGVjdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ211bHRpLXNlbGVjdC1pbnB1dCc7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tDaGVja2JveDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2NoZWNrYm94JztcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tOdW1iZXJJbnB1dDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ251bWJlci1pbnB1dCc7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tUZXh0SW5wdXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0ZXh0LWlucHV0JztcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tDaGVja051bWJlcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2NoZWNrLW51bWJlci1pbnB1dCc7ICAgIFxyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja0ltcG9ydGFudDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2ltcG9ydGFudCc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrSGVhZGVyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGVhZGVyLWJsY2snOyAgIFxyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja0ltcG9ydGFudEluZm9ybWF0aW9uOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW1wb3J0YW50LWluZm9ybWF0aW9uJztcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tFcXVpcG1lbnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdlcXVpcG1lbnQnOyAgXHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrRnJpZXplOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZnJpZXplJztcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tEYXRlVGltZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RhdGUtdGltZSc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrRGF0ZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RhdGUnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja0RhdGVNdWx0aXBsZTpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2RhdGUtbXVsdGlwbGUnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja0dyb3VwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZ3JvdXAnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLnR5cGVzTGlzdC5ibG9ja0ZpbGU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdmaWxlJztcclxuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy50eXBlc0xpc3QuYmxvY2tBZGRyZXNzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnYWRkcmVzcy1ibG9jayc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrSW5mb3JtYXRpb25Gb3JtOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnaW5mb3JtYXRpb24tZm9ybSc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrQmFkZ2U6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdiYWRnZSc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMudHlwZXNMaXN0LmJsb2NrUnVicmljYXRvcjpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3J1YnJpY2F0b3InO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZT48L3N0eWxlPiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vRWxlbWVudC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDAyZjljOTEmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRWxlbWVudC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0VsZW1lbnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzAwMmY5YzkxJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzAwMmY5YzkxJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzAwMmY5YzkxJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9FbGVtZW50LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMDJmOWM5MSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwMDJmOWM5MScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0VsZW1lbnQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiZ3JvdXAtYmxvY2tcIiB9LFxuICAgIFtcbiAgICAgIF9jKFwiaDNcIiwgW192bS5fdihfdm0uX3MoX3ZtLnRpdGxlKSldKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfdm0uX2woX3ZtLmZpZWxkcywgZnVuY3Rpb24oZWxlbSkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIF9jKFwiZWxcIiwge1xuICAgICAgICAgICAgYXR0cnM6IHsgbGFuZzogX3ZtLmxhbmcsIHVuaXREYXRhOiBlbGVtLCBkaWM6IF92bS5kaWMgfSxcbiAgICAgICAgICAgIG9uOiB7IG1vZGlmaWNhdGlvbjogX3ZtLmZpZWxkQ2hhbmdlZCB9XG4gICAgICAgICAgfSlcbiAgICAgICAgXVxuICAgICAgfSlcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuPGRpdiBjbGFzcz1cImdyb3VwLWJsb2NrXCI+XHJcbiAgICAgICAgPGgzPnt7IHRpdGxlIH19PC9oMz5cclxuICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJlbGVtIGluIGZpZWxkc1wiPlxyXG4gICAgICAgICAgICAgICAgPGVsIDpsYW5nPVwibGFuZ1wiIDp1bml0RGF0YT1cImVsZW1cIiBAbW9kaWZpY2F0aW9uPVwiZmllbGRDaGFuZ2VkXCIgOmRpYz1cImRpY1wiPjwvZWw+XHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcbjxzY3JpcHQ+XHJcbmltcG9ydCBFbGVtZW50IGZyb20gXCIuL0VsZW1lbnRcIjtcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgY29tcG9uZW50czoge1xyXG4gICAgICAgIGVsOiBFbGVtZW50XHJcbiAgICB9LCAgICAgICAgXHJcbiAgICBwcm9wczogW1xyXG4gICAgICAgICdmaWVsZHMnLFxyXG4gICAgICAgICd0aXRsZScsXHJcbiAgICAgICAgJ2xhbmcnLFxyXG4gICAgICAgICdkaWMnXHJcbiAgICBdLFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICAgIGZpZWxkQ2hhbmdlZChmaWVsZCkge1xyXG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdtb2RpZmljYXRpb24nLCBmaWVsZCk7XHJcbiAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgfSAgIFxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGU+PC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9Hcm91cC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NDYwMDE1ZDQmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vR3JvdXAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9Hcm91cC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkc6XFxcXE9wZW5TZXJ2ZXJcXFxcZG9tYWluc1xcXFxhZ3JvZm9ybXMubG9jYWxcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNDYwMDE1ZDQnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNDYwMDE1ZDQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNDYwMDE1ZDQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0dyb3VwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00NjAwMTVkNCZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc0NjAwMTVkNCcsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0dyb3VwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJwcm9wb3NhbC1zdW1tYXJ5XCIgfSwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicHJvcG9zYWwtc3VtbWFyeV9fdGl0bGVcIiB9LCBbXG4gICAgICBfdm0uX3YoX3ZtLl9zKF92bS5kaWMudG90YWwudG90YWxIZWFkKSArIFwiOlwiKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJwcm9wb3NhbC1zdW1tYXJ5X190b3RhbFwiIH0sIFtcbiAgICAgIF92bS5fdihcbiAgICAgICAgXCJcXHJcXG4gICAgICAgIFwiICtcbiAgICAgICAgICBfdm0uX3MoX3ZtLmRpYy50b3RhbC50b3RhbE1zZykgK1xuICAgICAgICAgIFwiOiBcIiArXG4gICAgICAgICAgX3ZtLl9zKF92bS5fZihcInNlcGFyYXRlXCIpKF92bS50b3RhbCkpICtcbiAgICAgICAgICBcIiBcIiArXG4gICAgICAgICAgX3ZtLl9zKF92bS5kaWMudmFsdXRlKSArXG4gICAgICAgICAgXCJcXHJcXG4gICAgXCJcbiAgICAgIClcbiAgICBdKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF9jKFwiaHJcIilcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbjxkaXYgY2xhc3M9XCJwcm9wb3NhbC1zdW1tYXJ5XCI+XHJcbiAgICA8ZGl2IGNsYXNzPVwicHJvcG9zYWwtc3VtbWFyeV9fdGl0bGVcIj57eyBkaWMudG90YWwudG90YWxIZWFkIH19OjwvZGl2PlxyXG4gICAgPGRpdiBjbGFzcz1cInByb3Bvc2FsLXN1bW1hcnlfX3RvdGFsXCI+XHJcbiAgICAgICAge3sgZGljLnRvdGFsLnRvdGFsTXNnIH19OiB7eyB0b3RhbCB8IHNlcGFyYXRlIH19IHt7IGRpYy52YWx1dGUgfX1cclxuICAgIDwvZGl2PlxyXG4gICAgPGhyPlxyXG48L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuaW1wb3J0IHsgbnVtYmVyRm9ybWF0TWl4aW4gfSBmcm9tICcuL1VuaXRzL01peGlucy9udW1iZXJGb3JtYXRNaXhpbidcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgbWl4aW5zOiBbXHJcbiAgICAgICAgICAgbnVtYmVyRm9ybWF0TWl4aW5cclxuICAgICAgIF0sXHJcbiAgICBwcm9wczogW1xyXG4gICAgICAgICd0b3RhbCcsXHJcbiAgICAgICAgJ2RpYydcclxuICAgIF0sXHJcbiAgICBkYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAvLyAgdG90YWw6IDBcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBsYW5nPVwiXCI+XHJcbiAgICBcclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQ29tcHV0ZWRFbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9Db21wdXRlZEVsLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQ29tcHV0ZWRFbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjUwMjliMGYmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQ29tcHV0ZWRFbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0NvbXB1dGVkRWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJHOlxcXFxPcGVuU2VydmVyXFxcXGRvbWFpbnNcXFxcYWdyb2Zvcm1zLmxvY2FsXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzI1MDI5YjBmJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzI1MDI5YjBmJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzI1MDI5YjBmJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9Db21wdXRlZEVsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yNTAyOWIwZiZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcyNTAyOWIwZicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL0NvbXB1dGVkRWwudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0R5bmFtaWNGb3JtQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0R5bmFtaWNGb3JtQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtcHJpbWFyeVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlclwiPlxyXG4gICAgICAgICAgICB7e3RpdGxlfX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhcHAtaW5mb19fd3JhcHBlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFwcC1pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+e3sgZGljdC5jb250cmFjdEluZm8uc3RhbmROdW1iZXIgfX06PHNwYW4+e3sgdGhpcy5zdGFuZE51bWJlciB9fTwvc3Bhbj48L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPHA+e3sgZGljdC5jb250cmFjdEluZm8uaGFsbCB9fTo8c3Bhbj57eyB0aGlzLmhhbGwgfX08L3NwYW4+PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDxwPnt7IGRpY3QuY29udHJhY3RJbmZvLnN0YW5kU3F1YXJlIH19OjxzcGFuPnt7IHRoaXMuc3RhbmRTcXVhcmUgfX08L3NwYW4+PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8dGVtcGxhdGUgdi1mb3I9XCJlbGVtIGluIGVsZW1lbnRzXCI+XHJcbiAgICAgICAgICAgICAgICA8ZWwgOnVuaXREYXRhPVwiZWxlbVwiIHYtaWY9XCIhZWxlbS5pc0dyb3VwXCIgQG1vZGlmaWNhdGlvbj1cImZpZWxkc01vZGlmaWNhdGVcIiA6bGFuZz1cImxhbmd1YWdlXCIgOmRpYz1cImRpY3RcIj48L2VsPlxyXG4gICAgICAgICAgICAgICAgPGdyb3VwIFxyXG4gICAgICAgICAgICAgICAgICAgIDpmaWVsZHM9XCJlbGVtLmZpZWxkc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwiZ2V0RmllbGROYW1lKGVsZW0ubmFtZSxlbGVtLm5hbWVfZW5nKVwiXHJcbiAgICAgICAgICAgICAgICAgICAgOmxhbmc9XCJsYW5ndWFnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgOmRpYz1cImRpY3RcIlxyXG4gICAgICAgICAgICAgICAgICAgIHYtaWY9XCJlbGVtLmlzR3JvdXBcIlxyXG4gICAgICAgICAgICAgICAgICAgIEBtb2RpZmljYXRpb249XCJmaWVsZHNNb2RpZmljYXRlXCJcclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDwvZ3JvdXA+XHJcbiAgICAgICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgICAgICAgIDxkaXYgdi1zaG93PVwiaXNGaWxlVXBsb2FkXCIgY2xhc3M9XCJmb3JtLWdyb3VwIGNsclwiPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJkLWZsZXggZmxleC1jb2x1bW5cIj5cclxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBkaWN0LmZpbGVBdHRhY2guYXR0YWNoRmlsZSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvcD4gICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWZpbGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IEBjaGFuZ2U9XCJmaWxlTG9hZFwiIHJlZj1cInVzZXJGaWxlXCIgdHlwZT1cImZpbGVcIiBjbGFzcz1cImN1c3RvbS1maWxlLWlucHV0XCIgaWQ9XCJ1c2VyRmlsZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tZmlsZS1sYWJlbFwiIDpkYXRhLWJyb3dzZT1cImRpY3QuZmlsZUF0dGFjaC5icm93c2VcIiBmb3I9XCJ1c2VyRmlsZVwiPlNlbGVjdCBmaWxlPC9sYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwiaGFzRmlsZVwiIGNsYXNzPVwiZmlsZV9fYWRkZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWZpbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPGEgOmhyZWY9XCJhdHRhY2hlZEZpbGVcIj57eyBhdHRhY2hlZEZpbGUgfX08L2E+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWlmPVwic2hvd0xpbWl0U2l6ZU9mRmlsZU1zZ1wiIGNsYXNzPVwiZXJyb3ItbWVzc2FnZVwiPnt7IGRpY3QuZmlsZUF0dGFjaC5saW1pdFNpemVNZXNzYWdlIH19PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGNvbXB1dGVkIFxyXG4gICAgICAgICAgICAgICAgdi1pZj1cImlzQ29tcHV0ZWRcIiBcclxuICAgICAgICAgICAgICAgIDp0b3RhbD1cInRvdGFsUHJpY2VcIlxyXG4gICAgICAgICAgICAgICAgOmRpYz1cImRpY3RcIlxyXG4gICAgICAgICAgICA+PC9jb21wdXRlZD5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNhcmQtZm9vdGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCIhaXNSZWFkT25seVwiIHR5cGU9XCJidXR0b25cIiBAY2xpY2s9XCJzYXZlRHJhZnRcIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiPnt7IGRpY3QuYnV0dG9ucy5kcmFmdCB9fTwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWlmPVwiIWlzUmVhZE9ubHlcIiB0eXBlPVwiYnV0dG9uXCIgQGNsaWNrPVwiZm9ybVN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1zdWNjZXNzXCI+e3sgZGljdC5idXR0b25zLnNlbmQgfX08L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gdi1pZj1cIiFpc1JlYWRPbmx5XCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImNhbmNlbFwiIGNsYXNzPVwiYnRuIGJ0bi1zZWNvbmRhcnlcIj57eyBkaWN0LmJ1dHRvbnMuY2FuY2VsIH19PC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHYtaWY9XCJpc1JlYWRPbmx5XCIgdHlwZT1cImJ1dHRvblwiIEBjbGljaz1cImNsb3NlXCIgY2xhc3M9XCJidG4gYnRuLXNlY29uZGFyeVwiPnt7IGRpY3QuYnV0dG9ucy5jbG9zZSB9fTwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG5pbXBvcnQgYXhpb3MgZnJvbSBcImF4aW9zXCJcclxuaW1wb3J0IEVsZW1lbnQgZnJvbSBcIi4vRm9ybUVsZW1lbnRzL0VsZW1lbnRcIlxyXG5pbXBvcnQgR3JvdXAgZnJvbSAnLi9Gb3JtRWxlbWVudHMvR3JvdXAnXHJcbmltcG9ydCBDb21wdXRlZCBmcm9tICcuL0Zvcm1FbGVtZW50cy9Db21wdXRlZEVsJ1xyXG5pbXBvcnQgeyBldmVudEJ1cyB9IGZyb20gJy4vZXZlbnRCdXMnXHJcbmltcG9ydCB7IGxhbmd1YWdlcyB9IGZyb20gJy4uL2xhbmcnXHJcbmltcG9ydCAqIGFzIGNvbnN0YW50cyBmcm9tICcuL3V0aWxzL2NvbnN0YW50cydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHsgICAgXHJcbiAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgICAgZWw6IEVsZW1lbnQsXHJcbiAgICAgICAgZ3JvdXA6IEdyb3VwLFxyXG4gICAgICAgIGNvbXB1dGVkOiBDb21wdXRlZFxyXG4gICAgfSxcclxuICAgIHByb3BzOiBbXHJcbiAgICAgICAgJ2lzUmVhZE9ubHknLCdjb250cmFjdElkJ1xyXG4gICAgXSxcclxuICAgIGRhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdGl0bGU6ICcnLFxyXG4gICAgICAgICAgICBhdHRhY2hlZEZpbGU6ICcnLFxyXG4gICAgICAgICAgICBlbGVtZW50czogW10sXHJcbiAgICAgICAgICAgIGZpbGVGaWVsZHM6IFtdLFxyXG4gICAgICAgICAgICBmaWxlczoge30sXHJcbiAgICAgICAgICAgIHN0YW5kTnVtYmVyOiBudWxsLFxyXG4gICAgICAgICAgICBzdGFuZFNxdWFyZTogbnVsbCxcclxuICAgICAgICAgICAgaGFsbDogbnVsbCxcclxuICAgICAgICAgICAgZHJhZnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBmaWVsZHM6IHt9LFxyXG4gICAgICAgICAgICBmb3JtRGF0YSA6IG5ldyBGb3JtRGF0YSgpLCBcclxuICAgICAgICAgICAgZm9ybUlkIDogbnVsbCxcclxuICAgICAgICAgICAgaXNDb21wdXRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgIHVzZXJJZCA6IG51bGwsXHJcbiAgICAgICAgICAgIGNvbXBhbnlJZDogbnVsbCwgICAgICAgICAgICBcclxuICAgICAgICAgICAgYmFzZVByaWNlOiAwLFxyXG4gICAgICAgICAgICBpc0ZpbGVVcGxvYWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB0b3RhbFByaWNlOiAwLFxyXG4gICAgICAgICAgICBhZGRlZEZpbGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBzaG93TGltaXRTaXplT2ZGaWxlTXNnOiBmYWxzZSxcclxuICAgICAgICAgICAgbGFuZ3VhZ2U6IGxhbmd1YWdlcy5ydXNzaWFuLCAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkaWN0OiB7XHJcbiAgICAgICAgICAgICAgICBmaWxlQXR0YWNoOiB7fSxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHt9LFxyXG4gICAgICAgICAgICAgICAgY29udHJhY3RJbmZvOiB7fVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICBjcmVhdGVkOiBmdW5jdGlvbigpIHtcclxuICAgIGF4aW9zLmdldCgnL2FwaS9hcHBsaWNhdGlvbi9nZXQtZm9ybT9jb250cmFjdElkPScgKyB0aGlzLmNvbnRyYWN0SWQpXHJcbiAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSByZXNwb25zZS5kYXRhLnRpdGxlOyBcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cyA9IHJlc3BvbnNlLmRhdGEuZWxlbWVudHM7ICBcclxuICAgICAgICAgICAgdGhpcy5pc0NvbXB1dGVkID0gcmVzcG9uc2UuZGF0YS5jb21wdXRlZCA7IFxyXG4gICAgICAgICAgICB0aGlzLnVzZXJJZCA9IHJlc3BvbnNlLmRhdGEudXNlcklkOyBcclxuICAgICAgICAgICAgdGhpcy5zdGFuZE51bWJlciA9IHJlc3BvbnNlLmRhdGEuc3RhbmROdW1iZXI7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhbmRTcXVhcmUgPSByZXNwb25zZS5kYXRhLnN0YW5kU3F1YXJlO1xyXG4gICAgICAgICAgICB0aGlzLmhhbGwgPSByZXNwb25zZS5kYXRhLmhhbGw7XHJcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWRGaWxlID0gcmVzcG9uc2UuZGF0YS5hdHRhY2hlZEZpbGU7ICAgICAgXHJcbiAgICAgICAgICAgIHRoaXMuY29tcGFueUlkID0gcmVzcG9uc2UuZGF0YS5jb21wYW55SWQ7XHJcbiAgICAgICAgICAgIHRoaXMuYmFzZVByaWNlID0gcmVzcG9uc2UuZGF0YS5iYXNlUHJpY2U7XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxQcmljZSA9IHRoaXMuYmFzZVByaWNlO1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1JZCA9IHJlc3BvbnNlLmRhdGEuZm9ybUlkO1xyXG4gICAgICAgICAgICB0aGlzLmlzRmlsZVVwbG9hZCA9IHJlc3BvbnNlLmRhdGEuaXNGaWxlVXBsb2FkO1xyXG4gICAgICAgICAgICB0aGlzLmxhbmd1YWdlID0gcmVzcG9uc2UuZGF0YS5sYW5ndWFnZTtcclxuICAgICAgICAgICAgdGhpcy5kaWN0ID0gcmVzcG9uc2UuZGF0YS5kaWN0OyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgfSlcclxuICB9LFxyXG4gIGNvbXB1dGVkOiB7XHJcbiAgICBoYXNGaWxlKCkge1xyXG4gICAgICAgIHJldHVybiAhKHRoaXMuYXR0YWNoZWRGaWxlID09ICcnKTtcclxuICAgIH1cclxuICB9LFxyXG4gIG1ldGhvZHM6IHtcclxuICAgICAgICBnZXRGaWVsZE5hbWUobmFtZSxuYW1lRW5nKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxhbmd1YWdlID09IGxhbmd1YWdlcy5ydXNzaWFuIHx8ICFuYW1lRW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmFtZUVuZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZpbGVMb2FkOiBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dMaW1pdFNpemVPZkZpbGVNc2cgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgbGV0IGZzaXplID0gZWxlbWVudC5maWxlc1swXS5zaXplO1xyXG4gICAgICAgICAgICBpZiAoZnNpemUgPiBjb25zdGFudHMuTUFYX0ZJTEVfU0laRSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TGltaXRTaXplT2ZGaWxlTXNnID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybURhdGEuYXBwZW5kKCdEeW5hbWljRm9ybVthdHRhY2hlZF1bZm9ybUZpbGVdJywgdGhpcy4kcmVmcy51c2VyRmlsZS5maWxlc1swXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZGVkRmlsZSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93TGltaXRTaXplT2ZGaWxlTXNnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAgICAgIFxyXG4gICAgICAgIHNhdmVEcmFmdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhZnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1TdWJtaXQoKTtcclxuICAgICAgICB9LCAgICAgIFxyXG4gICAgICAgIGlzRm9ybVZhbGlkKCkge1xyXG4gICAgICAgICAgICBsZXQgdmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiB0aGlzLmZpZWxkcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmZpZWxkc1tmaWVsZF0udmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICAgIH0sICAgICAgXHJcbiAgICAgIGZpZWxkc01vZGlmaWNhdGUoZmllbGQpIHtcclxuICAgICAgICBsZXQgY29tcHV0ZWQgPSBmYWxzZTtcclxuICAgICAgICBsZXQgdG90YWwgPSAwO1xyXG4gICAgICAgIGlmIChmaWVsZC5oYXNPd25Qcm9wZXJ0eShjb25zdGFudHMuQVRUQUNITUVOVF9BVFRSSUJVVEUpKSB7XHJcbiAgICAgICAgICAgIGlmICghZmllbGQuZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZmlsZXNbZmllbGQuaWRdID0gZmllbGQuZmlsZTtcclxuICAgICAgICAgICAvLyByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGZpZWxkLmhhc093blByb3BlcnR5KCdjb21wdXRlZCcpKSB7XHJcbiAgICAgICAgICAgIGNvbXB1dGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdG90YWwgPSBmaWVsZC50b3RhbDtcclxuICAgICAgICB9ICAgICAgICBcclxuICAgICAgICB0aGlzLmZpZWxkc1tmaWVsZC5pZF0gPSB7XHJcbiAgICAgICAgICAgICAgZGF0YSA6IGZpZWxkLmRhdGEsXHJcbiAgICAgICAgICAgICAgdmFsaWQgOiBmaWVsZC52YWxpZCxcclxuICAgICAgICAgICAgICBjb21wdXRlZCA6IGNvbXB1dGVkLFxyXG4gICAgICAgICAgICAgIHRvdGFsIDogdG90YWwsXHJcbiAgICAgICAgICAgICAgY2hlY2tib3g6IGZpZWxkLmhhc093blByb3BlcnR5KCdjaGVja2JveCcpID8gdHJ1ZSA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgIGVxdWlwOiBmaWVsZC5oYXNPd25Qcm9wZXJ0eSgnZXF1aXAnKSA/IHRydWUgOiBmYWxzZVxyXG4gICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICBpZiAodGhpcy5pc0NvbXB1dGVkKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVQcmljZSh0aGlzLmZpZWxkcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGNhbGN1bGF0ZVByaWNlKGZpZWxkcykge1xyXG4gICAgICAgICAgbGV0IHByaWNlID0gdGhpcy5iYXNlUHJpY2U7XHJcbiAgICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiB0aGlzLmZpZWxkcykge1xyXG4gICAgICAgICAgICAgIGxldCBlbCA9IGZpZWxkc1tmaWVsZF07XHJcbiAgICAgICAgICAgICAgaWYgKGVsLmNvbXB1dGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgIHByaWNlICs9IGVsLnRvdGFsXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy50b3RhbFByaWNlID0gcHJpY2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZvcm1TdWJtaXQoKSB7XHJcbiAgICAgICAgICAgIGV2ZW50QnVzLnZhbGlkYXRlKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0Zvcm1WYWxpZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudEJ1cy5zaG93RXJyb3JzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn0KTQvtGA0LzQsCDQvdC1INCy0LDQu9C40LTQvdCwJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ9Ck0L7RgNC80LAg0L7RgtC/0YDQsNCy0LvQtdC90LAnKTtcclxuICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAnRHluYW1pY0Zvcm1bZmllbGRzXScsIEpTT04uc3RyaW5naWZ5KHRoaXMuZmllbGRzKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICdEeW5hbWljRm9ybVt1c2VySWRdJywgKyB0aGlzLnVzZXJJZFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICdEeW5hbWljRm9ybVtmb3JtSWRdJywgKyB0aGlzLmZvcm1JZFxyXG4gICAgICAgICAgICApOyAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAnRHluYW1pY0Zvcm1bZHJhZnRdJywgKyB0aGlzLmRyYWZ0XHJcbiAgICAgICAgICAgICk7ICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICdEeW5hbWljRm9ybVt0b3RhbF0nLCB0aGlzLnRvdGFsUHJpY2VcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5mb3JtRGF0YS5hcHBlbmQoXHJcbiAgICAgICAgICAgICAgICAnRHluYW1pY0Zvcm1bYmFzZVByaWNlXScsIHRoaXMuYmFzZVByaWNlXHJcbiAgICAgICAgICAgICk7ICAgXHJcbiAgICAgICAgICAgIHRoaXMuZm9ybURhdGEuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgJ0R5bmFtaWNGb3JtW2NvbnRyYWN0SWRdJywgdGhpcy5jb250cmFjdElkXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybURhdGEuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgJ0R5bmFtaWNGb3JtW2NvbXBhbnlJZF0nLCB0aGlzLmNvbXBhbnlJZFxyXG4gICAgICAgICAgICApOyAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5maWxlcyk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudElkIGluIHRoaXMuZmlsZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9ybURhdGEuYXBwZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgIGBBdHRhY2hlZEZpbGVzRm9ybVtmaWxlc11bJHtlbGVtZW50SWR9XWAsIHRoaXMuZmlsZXNbZWxlbWVudElkXVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsZUZpZWxkcy5wdXNoKGVsZW1lbnRJZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmZpbGVzW2VsZW1lbnRJZF0pOyBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhLmFwcGVuZChcclxuICAgICAgICAgICAgICAgICdBdHRhY2hlZEZpbGVzRm9ybVtmaWxlRmllbGRzXScsIHRoaXMuZmlsZUZpZWxkc1xyXG4gICAgICAgICAgICApOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGF4aW9zLnBvc3QoICcvYXBpL2FwcGxpY2F0aW9uL3NlbmQtZm9ybScsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1EYXRhLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmID0gJy9wYW5lbC9tZW1iZXIvJysgcmVzcG9uc2UuZGF0YS5leGhpYml0aW9uSWQgKycvcmVxdWVzdHMvJyArIHJlc3BvbnNlLmRhdGEuY29udHJhY3RJZDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAvLyAgICAgIGxvY2F0aW9uLmhyZWYgPSAnL3BhbmVsL21lbWJlci9yZXF1ZXN0cyc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZBSUxVUkUhIScpO1xyXG4gICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgfSxcclxuICAgICAgY2FuY2VsKCkge1xyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7ICAgICAgICAgXHJcbiAgICAgIH0sXHJcbiAgICAgIGNsb3NlKCkge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvcGFuZWwvZm9ybXMnO1xyXG4gICAgIH0sXHJcbiAgfVxyXG59XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPlxyXG4gICAgLmVycm9yLW1lc3NhZ2Uge1xyXG4gICAgICAgIGNvbG9yOiByZWQ7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9EeW5hbWljRm9ybUFwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YWYzNWU1YjImc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vRHluYW1pY0Zvcm1BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9EeW5hbWljRm9ybUFwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vRHluYW1pY0Zvcm1BcHAudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9YWYzNWU1YjImc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImFmMzVlNWIyXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRzpcXFxcT3BlblNlcnZlclxcXFxkb21haW5zXFxcXGFncm9mb3Jtcy5sb2NhbFxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCdhZjM1ZTViMicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdhZjM1ZTViMicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdhZjM1ZTViMicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vRHluYW1pY0Zvcm1BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWFmMzVlNWIyJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2FmMzVlNWIyJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJhc3NldHMvc2NyaXB0cy9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9EeW5hbWljRm9ybUFwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgRHluYW1pY0Zvcm1BcHAgZnJvbSAnLi9jb21wb25lbnRzL3Z1ZS9EeW5hbWljRm9ybS9EeW5hbWljRm9ybUFwcC52dWUnO1xyXG5jb25zdCBWdWUgPSB3aW5kb3cuVnVlO1xyXG5jb25zdCBhcHBSb290RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkeW5hbWljLWZvcm0tYXBwJyk7XHJcbmNvbnN0IGlzUmVhZE9ubHkgPSAhIWFwcFJvb3RFbGVtZW50LmRhdGFzZXQucmVhZE9ubHk7XHJcbmNvbnN0IGNvbnRyYWN0SWQgPSBwYXJzZUludChhcHBSb290RWxlbWVudC5kYXRhc2V0LmNvbnRyYWN0SWQpO1xyXG5jb25zb2xlLmxvZygncmVhZCBvbmx5PScgKyBpc1JlYWRPbmx5KTtcclxubmV3IFZ1ZSh7XHJcbiAgICBlbDogJyNkeW5hbWljLWZvcm0tYXBwJyxcclxuICAgIHJlbmRlcjogaCA9PiBoKER5bmFtaWNGb3JtQXBwLHtcclxuICAgICAgcHJvcHM6IHtcclxuICAgICAgICBpc1JlYWRPbmx5LCBjb250cmFjdElkXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSkiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwibGlcIiwgW1xuICAgIF9jKFxuICAgICAgXCJzcGFuXCIsXG4gICAgICB7XG4gICAgICAgIGNsYXNzOiB7IHJ1YnJpY19fY2hlY2tlZDogX3ZtLmlzQ2hlY2tlZCB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgICAgIF92bS5pc0FjdGl2ZSA9ICFfdm0uaXNBY3RpdmVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBbXG4gICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgdmFsdWU6IF92bS5oYXNDaGlsZHJlbixcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJoYXNDaGlsZHJlblwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgXSxcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJmYSBmYS1jaGV2cm9uLWRvd25cIixcbiAgICAgICAgICBhdHRyczogeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH1cbiAgICAgICAgfSksXG4gICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLm5hbWUpICsgXCJcXG4gICAgICAgIFwiKSxcbiAgICAgICAgIV92bS5pc0NoZWNrZWRcbiAgICAgICAgICA/IF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1zaG93XCIsXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5oYXNDaGlsZHJlbixcbiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiIWhhc0NoaWxkcmVuXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImFkZC1pdGVtIGZhciBmYS1wbHVzLXNxdWFyZVwiLFxuICAgICAgICAgICAgICBhdHRyczogeyB0aXRsZTogXCLQlNC+0LHQsNCy0LjRgtGMINGA0LDQt9C00LXQu1wiIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkUnVicmljIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgOiBfYyhcImlcIiwge1xuICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6ICFfdm0uaGFzQ2hpbGRyZW4sXG4gICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcIiFoYXNDaGlsZHJlblwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJyZW1vdmUtaXRlbSBmYXIgZmEtbWludXMtc3F1YXJlXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHRpdGxlOiBcItCj0LTQsNC70LjRgtGMINGA0LDQt9C00LXQu1wiIH0sXG4gICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0ucmVtb3ZlUnVicmljIH1cbiAgICAgICAgICAgIH0pXG4gICAgICBdXG4gICAgKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgIF92bS5oYXNDaGlsZHJlblxuICAgICAgPyBfYyhcbiAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJzaG93XCIsXG4gICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LXNob3dcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmlzQWN0aXZlLFxuICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwiaXNBY3RpdmVcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfdm0uX2woX3ZtLnJ1YnJpY3MuY2hpbGRyZW4sIGZ1bmN0aW9uKHJ1YnJpYykge1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIF9jKFwicnVicmljYXRvci1lbGVtZW50XCIsIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHJ1YnJpY3NJbkNhdGFsb2c6IF92bS5ydWJyaWNzSW5DYXRhbG9nLFxuICAgICAgICAgICAgICAgICAgICBydWJyaWNzOiBydWJyaWNcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0sXG4gICAgICAgICAgMlxuICAgICAgICApXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Iiwicjx0ZW1wbGF0ZT5cclxuICAgIDxsaT5cclxuICAgICAgICA8c3BhbiA6Y2xhc3M9XCJ7cnVicmljX19jaGVja2VkIDogaXNDaGVja2VkfVwiIEBjbGljaz1cImlzQWN0aXZlPSFpc0FjdGl2ZVwiPlxyXG4gICAgICAgICAgICA8aSB2LXNob3c9XCJoYXNDaGlsZHJlblwiIGNsYXNzPVwiZmEgZmEtY2hldnJvbi1kb3duXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPnt7IG5hbWUgfX1cclxuICAgICAgICAgICAgPGkgQGNsaWNrPVwiYWRkUnVicmljXCIgdi1pZj1cIiFpc0NoZWNrZWRcIiB0aXRsZT1cItCU0L7QsdCw0LLQuNGC0Ywg0YDQsNC30LTQtdC7XCIgdi1zaG93PVwiIWhhc0NoaWxkcmVuXCIgY2xhc3M9XCJhZGQtaXRlbSBmYXIgZmEtcGx1cy1zcXVhcmVcIj48L2k+XHJcbiAgICAgICAgICAgIDxpIEBjbGljaz1cInJlbW92ZVJ1YnJpY1wiIHYtZWxzZSB0aXRsZT1cItCj0LTQsNC70LjRgtGMINGA0LDQt9C00LXQu1wiIHYtc2hvdz1cIiFoYXNDaGlsZHJlblwiIGNsYXNzPVwicmVtb3ZlLWl0ZW0gZmFyIGZhLW1pbnVzLXNxdWFyZVwiPjwvaT5cclxuICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPHVsIHYtc2hvdz1cImlzQWN0aXZlXCIgdi1pZj1cImhhc0NoaWxkcmVuXCI+XHJcbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cInJ1YnJpYyBpbiBydWJyaWNzLmNoaWxkcmVuXCI+IFxyXG4gICAgICAgICAgICAgIDxydWJyaWNhdG9yLWVsZW1lbnQgOnJ1YnJpY3NJbkNhdGFsb2c9XCJydWJyaWNzSW5DYXRhbG9nXCIgOnJ1YnJpY3M9XCJydWJyaWNcIj48L3J1YnJpY2F0b3ItZWxlbWVudD4gICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgPC90ZW1wbGF0ZT5cclxuICAgICAgICA8L3VsPlxyXG4gICAgPC9saT5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuaW1wb3J0IHsgZXZlbnRCdXMgfSBmcm9tICcuLi8uLi8uLi9ldmVudEJ1cydcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogXCJSdWJyaWNhdG9yRWxlbWVudFwiLFxyXG4gICAgZGF0YSgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHByb3BzOiBbXHJcbiAgICAgICAgJ3J1YnJpY3MnLFxyXG4gICAgICAgICdydWJyaWNzSW5DYXRhbG9nJyxcclxuICAgIF0sXHJcbiAgICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLiRvcHRpb25zLmNvbXBvbmVudHMuUnVicmljYXRvckVsZW1lbnQgPSByZXF1aXJlKCcuL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZScpLmRlZmF1bHRcclxuICAgIH0sICAgICBcclxuICAgIGNvbXB1dGVkOiB7XHJcbiAgICAgICAgaWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1YnJpY3MuaWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBuYW1lKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ydWJyaWNzLm5hbWU7XHJcbiAgICAgICAgfSwgICAgICAgIFxyXG4gICAgICAgIGhhc0NoaWxkcmVuKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ydWJyaWNzLmNoaWxkcmVuLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0NoZWNrZWQoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0NoaWxkcmVuKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vcmV0dXJuIC8vdGhpcy5ydWJyaWNzSW5DYXRhbG9nIC8vIC5ldmVcclxuICAgICAgICAgICAgbGV0IGVsID0gdGhpcy5ydWJyaWNzSW5DYXRhbG9nLmZpbmQoKGVsZW1lbnQpID0+IHsgIFxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZWxlbWVudC5pZCx0aGlzLmlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmlkID09IHRoaXMuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVsKTtcclxuICAgICAgICAgICAgaWYgKGVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgbWV0aG9kczoge1xyXG4gICAgICBhZGRSdWJyaWMoKSB7XHJcbiAgICAgICAgbGV0IHJ1YnJpYyA9IHtcclxuICAgICAgICAgICAgJ2lkJzogdGhpcy5pZCxcclxuICAgICAgICAgICAgJ25hbWUnOiB0aGlzLm5hbWUsXHJcbiAgICAgICAgfTtcclxuICAgICAgIC8vIGNvbnNvbGUubG9nKHJ1YnJpYyk7XHJcbiAgICAgICAgZXZlbnRCdXMuJGVtaXQoJ3J1YnJpY1dhc0FkZGVkJywgcnVicmljKTtcclxuICAgICAgfSxcclxuICAgICAgcmVtb3ZlUnVicmljKCkge1xyXG4gICAgICAgIGV2ZW50QnVzLiRlbWl0KCdydWJyaWNXYXNEZWxldGUnLCB0aGlzLmlkKTtcclxuICAgICAgfVxyXG4gICAgIH1cclxufTtcclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBsYW5nPVwiY3NzXCIgc2NvcGVkPlxyXG4gICAgaS5hZGQtaXRlbSwgaS5yZW1vdmUtaXRlbSB7XHJcbiAgICAgICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgICAgIHBhZGRpbmc6IDJweDtcclxuICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICB9XHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vUnVicmljYXRvckVsZW1lbnQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTVhMjI5ODRhJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUnVicmljYXRvckVsZW1lbnQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTVhMjI5ODRhJmxhbmc9Y3NzJnNjb3BlZD10cnVlJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI1YTIyOTg0YVwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkc6XFxcXE9wZW5TZXJ2ZXJcXFxcZG9tYWluc1xcXFxhZ3JvZm9ybXMubG9jYWxcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnNWEyMjk4NGEnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNWEyMjk4NGEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNWEyMjk4NGEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1J1YnJpY2F0b3JFbGVtZW50LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01YTIyOTg0YSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1YTIyOTg0YScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiYXNzZXRzL3NjcmlwdHMvY29tcG9uZW50cy92dWUvRHluYW1pY0Zvcm0vRm9ybUVsZW1lbnRzL1VuaXRzL0NvbXBvbmVudHMvUnVicmljYXRvckVsZW1lbnQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUgLyogdnVlLWNsaSBvbmx5ICovXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbChcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIChvcHRpb25zLmZ1bmN0aW9uYWwgPyB0aGlzLnBhcmVudCA6IHRoaXMpLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3RcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgOiBpbmplY3RTdHlsZXNcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcbiAgICAgIG9wdGlvbnMuX2luamVjdFN0eWxlcyA9IGhvb2tcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpc0RhdGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRGF0ZSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlKHZhbHVlKSB7XG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlLmdldFRpbWUoKSk7XG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICByZXR1cm4gaXNEYXRlKHZhbHVlKSAmJiAhaXNOYU4odmFsdWUuZ2V0VGltZSgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdGFydE9mV2Vlayh2YWx1ZSkge1xuICB2YXIgZmlyc3REYXlPZldlZWsgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgaWYgKCEoZmlyc3REYXlPZldlZWsgPj0gMCAmJiBmaXJzdERheU9mV2VlayA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYnKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKHZhbHVlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSArIDcgLSBmaXJzdERheU9mV2VlaykgJSA3O1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5leHBvcnQgZnVuY3Rpb24gc3RhcnRPZldlZWtZZWFyKHZhbHVlKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZmlyc3REYXlPZldlZWsgPSBfcmVmLmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgZmlyc3REYXlPZldlZWsgPSBfcmVmJGZpcnN0RGF5T2ZXZWVrID09PSB2b2lkIDAgPyAwIDogX3JlZiRmaXJzdERheU9mV2VlayxcbiAgICAgIF9yZWYkZmlyc3RXZWVrQ29udGFpbiA9IF9yZWYuZmlyc3RXZWVrQ29udGFpbnNEYXRlLFxuICAgICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gX3JlZiRmaXJzdFdlZWtDb250YWluID09PSB2b2lkIDAgPyAxIDogX3JlZiRmaXJzdFdlZWtDb250YWluO1xuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcnKTtcbiAgfVxuXG4gIHZhciBkYXRlID0gdG9EYXRlKHZhbHVlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIHZhciBmaXJzdERhdGVPZkZpcnN0V2VlayA9IG5ldyBEYXRlKDApO1xuXG4gIGZvciAodmFyIGkgPSB5ZWFyICsgMTsgaSA+PSB5ZWFyIC0gMTsgaS0tKSB7XG4gICAgZmlyc3REYXRlT2ZGaXJzdFdlZWsuc2V0RnVsbFllYXIoaSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgICBmaXJzdERhdGVPZkZpcnN0V2Vlay5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgICBmaXJzdERhdGVPZkZpcnN0V2VlayA9IHN0YXJ0T2ZXZWVrKGZpcnN0RGF0ZU9mRmlyc3RXZWVrLCBmaXJzdERheU9mV2Vlayk7XG5cbiAgICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gZmlyc3REYXRlT2ZGaXJzdFdlZWsuZ2V0VGltZSgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmlyc3REYXRlT2ZGaXJzdFdlZWs7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vlayh2YWx1ZSkge1xuICB2YXIgX3JlZjIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9LFxuICAgICAgX3JlZjIkZmlyc3REYXlPZldlZWsgPSBfcmVmMi5maXJzdERheU9mV2VlayxcbiAgICAgIGZpcnN0RGF5T2ZXZWVrID0gX3JlZjIkZmlyc3REYXlPZldlZWsgPT09IHZvaWQgMCA/IDAgOiBfcmVmMiRmaXJzdERheU9mV2VlayxcbiAgICAgIF9yZWYyJGZpcnN0V2Vla0NvbnRhaSA9IF9yZWYyLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IF9yZWYyJGZpcnN0V2Vla0NvbnRhaSA9PT0gdm9pZCAwID8gMSA6IF9yZWYyJGZpcnN0V2Vla0NvbnRhaTtcblxuICB2YXIgZGF0ZSA9IHRvRGF0ZSh2YWx1ZSk7XG4gIHZhciBmaXJzdERhdGVPZlRoaXNXZWVrID0gc3RhcnRPZldlZWsoZGF0ZSwgZmlyc3REYXlPZldlZWspO1xuICB2YXIgZmlyc3REYXRlT2ZGaXJzdFdlZWsgPSBzdGFydE9mV2Vla1llYXIoZGF0ZSwge1xuICAgIGZpcnN0RGF5T2ZXZWVrOiBmaXJzdERheU9mV2VlayxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZVxuICB9KTtcbiAgdmFyIGRpZmYgPSBmaXJzdERhdGVPZlRoaXNXZWVrLmdldFRpbWUoKSAtIGZpcnN0RGF0ZU9mRmlyc3RXZWVrLmdldFRpbWUoKTtcbiAgcmV0dXJuIE1hdGgucm91bmQoZGlmZiAvICg3ICogMjQgKiAzNjAwICogMTAwMCkpICsgMTtcbn0iLCJ2YXIgbG9jYWxlID0ge1xuICBtb250aHM6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxuICBtb250aHNTaG9ydDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3ZWVrZGF5czogWydTdW5kYXknLCAnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheSddLFxuICB3ZWVrZGF5c1Nob3J0OiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3ZWVrZGF5c01pbjogWydTdScsICdNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYSddLFxuICBmaXJzdERheU9mV2VlazogMCxcbiAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiAxXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCB7IHRvRGF0ZSwgaXNWYWxpZERhdGUsIGdldFdlZWsgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSAnLi9sb2NhbGUvZW4nO1xudmFyIFJFR0VYX0ZPUk1BVCA9IC9cXFsoW15cXF1dKyldfFlZWVl8WVk/fE17MSw0fXxEezEsMn18ZHsxLDR9fEh7MSwyfXxoezEsMn18bXsxLDJ9fHN7MSwyfXxaezEsMn18U3sxLDN9fHd7MSwyfXx4fFh8YXxBL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWwpIHtcbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMjtcbiAgdmFyIG91dHB1dCA9IFwiXCIuY29uY2F0KE1hdGguYWJzKHZhbCkpO1xuICB2YXIgc2lnbiA9IHZhbCA8IDAgPyAnLScgOiAnJztcblxuICB3aGlsZSAob3V0cHV0Lmxlbmd0aCA8IGxlbikge1xuICAgIG91dHB1dCA9IFwiMFwiLmNvbmNhdChvdXRwdXQpO1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldChkYXRlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKGRhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZShvZmZzZXQpIHtcbiAgdmFyIGRlbGltZXRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/ICctJyA6ICcrJztcbiAgdmFyIGFic09mZnNldCA9IE1hdGguYWJzKG9mZnNldCk7XG4gIHZhciBob3VycyA9IE1hdGguZmxvb3IoYWJzT2Zmc2V0IC8gNjApO1xuICB2YXIgbWludXRlcyA9IGFic09mZnNldCAlIDYwO1xuICByZXR1cm4gc2lnbiArIHBhZChob3VycywgMikgKyBkZWxpbWV0ZXIgKyBwYWQobWludXRlcywgMik7XG59XG5cbnZhciBtZXJpZGllbSA9IGZ1bmN0aW9uIG1lcmlkaWVtKGgsIF8sIGlzTG93ZXJjYXNlKSB7XG4gIHZhciB3b3JkID0gaCA8IDEyID8gJ0FNJyA6ICdQTSc7XG4gIHJldHVybiBpc0xvd2VyY2FzZSA/IHdvcmQudG9Mb2NhbGVMb3dlckNhc2UoKSA6IHdvcmQ7XG59O1xuXG52YXIgZm9ybWF0RmxhZ3MgPSB7XG4gIFk6IGZ1bmN0aW9uIFkoZGF0ZSkge1xuICAgIHZhciB5ID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICAgIHJldHVybiB5IDw9IDk5OTkgPyBcIlwiLmNvbmNhdCh5KSA6IFwiK1wiLmNvbmNhdCh5KTtcbiAgfSxcbiAgLy8gWWVhcjogMDAsIDAxLCAuLi4sIDk5XG4gIFlZOiBmdW5jdGlvbiBZWShkYXRlKSB7XG4gICAgcmV0dXJuIHBhZChkYXRlLmdldEZ1bGxZZWFyKCksIDQpLnN1YnN0cigyKTtcbiAgfSxcbiAgLy8gWWVhcjogMTkwMCwgMTkwMSwgLi4uLCAyMDk5XG4gIFlZWVk6IGZ1bmN0aW9uIFlZWVkoZGF0ZSkge1xuICAgIHJldHVybiBwYWQoZGF0ZS5nZXRGdWxsWWVhcigpLCA0KTtcbiAgfSxcbiAgLy8gTW9udGg6IDEsIDIsIC4uLiwgMTJcbiAgTTogZnVuY3Rpb24gTShkYXRlKSB7XG4gICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSArIDE7XG4gIH0sXG4gIC8vIE1vbnRoOiAwMSwgMDIsIC4uLiwgMTJcbiAgTU06IGZ1bmN0aW9uIE1NKGRhdGUpIHtcbiAgICByZXR1cm4gcGFkKGRhdGUuZ2V0TW9udGgoKSArIDEsIDIpO1xuICB9LFxuICBNTU06IGZ1bmN0aW9uIE1NTShkYXRlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLm1vbnRoc1Nob3J0W2RhdGUuZ2V0TW9udGgoKV07XG4gIH0sXG4gIE1NTU06IGZ1bmN0aW9uIE1NTU0oZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS5tb250aHNbZGF0ZS5nZXRNb250aCgpXTtcbiAgfSxcbiAgLy8gRGF5IG9mIG1vbnRoOiAxLCAyLCAuLi4sIDMxXG4gIEQ6IGZ1bmN0aW9uIEQoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldERhdGUoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIG1vbnRoOiAwMSwgMDIsIC4uLiwgMzFcbiAgREQ6IGZ1bmN0aW9uIEREKGRhdGUpIHtcbiAgICByZXR1cm4gcGFkKGRhdGUuZ2V0RGF0ZSgpLCAyKTtcbiAgfSxcbiAgLy8gSG91cjogMCwgMSwgLi4uIDIzXG4gIEg6IGZ1bmN0aW9uIEgoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldEhvdXJzKCk7XG4gIH0sXG4gIC8vIEhvdXI6IDAwLCAwMSwgLi4uLCAyM1xuICBISDogZnVuY3Rpb24gSEgoZGF0ZSkge1xuICAgIHJldHVybiBwYWQoZGF0ZS5nZXRIb3VycygpLCAyKTtcbiAgfSxcbiAgLy8gSG91cjogMSwgMiwgLi4uLCAxMlxuICBoOiBmdW5jdGlvbiBoKGRhdGUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG5cbiAgICBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIHJldHVybiAxMjtcbiAgICB9XG5cbiAgICBpZiAoaG91cnMgPiAxMikge1xuICAgICAgcmV0dXJuIGhvdXJzICUgMTI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhvdXJzO1xuICB9LFxuICAvLyBIb3VyOiAwMSwgMDIsIC4uLiwgMTJcbiAgaGg6IGZ1bmN0aW9uIGhoKCkge1xuICAgIHZhciBob3VycyA9IGZvcm1hdEZsYWdzLmguYXBwbHkoZm9ybWF0RmxhZ3MsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHBhZChob3VycywgMik7XG4gIH0sXG4gIC8vIE1pbnV0ZTogMCwgMSwgLi4uLCA1OVxuICBtOiBmdW5jdGlvbiBtKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRNaW51dGVzKCk7XG4gIH0sXG4gIC8vIE1pbnV0ZTogMDAsIDAxLCAuLi4sIDU5XG4gIG1tOiBmdW5jdGlvbiBtbShkYXRlKSB7XG4gICAgcmV0dXJuIHBhZChkYXRlLmdldE1pbnV0ZXMoKSwgMik7XG4gIH0sXG4gIC8vIFNlY29uZDogMCwgMSwgLi4uLCA1OVxuICBzOiBmdW5jdGlvbiBzKGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRTZWNvbmRzKCk7XG4gIH0sXG4gIC8vIFNlY29uZDogMDAsIDAxLCAuLi4sIDU5XG4gIHNzOiBmdW5jdGlvbiBzcyhkYXRlKSB7XG4gICAgcmV0dXJuIHBhZChkYXRlLmdldFNlY29uZHMoKSwgMik7XG4gIH0sXG4gIC8vIDEvMTAgb2Ygc2Vjb25kOiAwLCAxLCAuLi4sIDlcbiAgUzogZnVuY3Rpb24gUyhkYXRlKSB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAvIDEwMCk7XG4gIH0sXG4gIC8vIDEvMTAwIG9mIHNlY29uZDogMDAsIDAxLCAuLi4sIDk5XG4gIFNTOiBmdW5jdGlvbiBTUyhkYXRlKSB7XG4gICAgcmV0dXJuIHBhZChNYXRoLmZsb29yKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLyAxMCksIDIpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZDogMDAwLCAwMDEsIC4uLiwgOTk5XG4gIFNTUzogZnVuY3Rpb24gU1NTKGRhdGUpIHtcbiAgICByZXR1cm4gcGFkKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksIDMpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2VlazogMCwgMSwgLi4uLCA2XG4gIGQ6IGZ1bmN0aW9uIGQoZGF0ZSkge1xuICAgIHJldHVybiBkYXRlLmdldERheSgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2VlazogJ1N1JywgJ01vJywgLi4uLCAnU2EnXG4gIGRkOiBmdW5jdGlvbiBkZChkYXRlLCBsb2NhbGUpIHtcbiAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzTWluW2RhdGUuZ2V0RGF5KCldO1xuICB9LFxuICAvLyBEYXkgb2Ygd2VlazogJ1N1bicsICdNb24nLC4uLiwgJ1NhdCdcbiAgZGRkOiBmdW5jdGlvbiBkZGQoZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c1Nob3J0W2RhdGUuZ2V0RGF5KCldO1xuICB9LFxuICAvLyBEYXkgb2Ygd2VlazogJ1N1bmRheScsICdNb25kYXknLCAuLi4sJ1NhdHVyZGF5J1xuICBkZGRkOiBmdW5jdGlvbiBkZGRkKGRhdGUsIGxvY2FsZSkge1xuICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNbZGF0ZS5nZXREYXkoKV07XG4gIH0sXG4gIC8vIEFNLCBQTVxuICBBOiBmdW5jdGlvbiBBKGRhdGUsIGxvY2FsZSkge1xuICAgIHZhciBtZXJpZGllbUZ1bmMgPSBsb2NhbGUubWVyaWRpZW0gfHwgbWVyaWRpZW07XG4gICAgcmV0dXJuIG1lcmlkaWVtRnVuYyhkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBmYWxzZSk7XG4gIH0sXG4gIC8vIGFtLCBwbVxuICBhOiBmdW5jdGlvbiBhKGRhdGUsIGxvY2FsZSkge1xuICAgIHZhciBtZXJpZGllbUZ1bmMgPSBsb2NhbGUubWVyaWRpZW0gfHwgbWVyaWRpZW07XG4gICAgcmV0dXJuIG1lcmlkaWVtRnVuYyhkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCB0cnVlKTtcbiAgfSxcbiAgLy8gVGltZXpvbmU6IC0wMTowMCwgKzAwOjAwLCAuLi4gKzEyOjAwXG4gIFo6IGZ1bmN0aW9uIFooZGF0ZSkge1xuICAgIHJldHVybiBmb3JtYXRUaW1lem9uZShnZXRPZmZzZXQoZGF0ZSksICc6Jyk7XG4gIH0sXG4gIC8vIFRpbWV6b25lOiAtMDEwMCwgKzAwMDAsIC4uLiArMTIwMFxuICBaWjogZnVuY3Rpb24gWlooZGF0ZSkge1xuICAgIHJldHVybiBmb3JtYXRUaW1lem9uZShnZXRPZmZzZXQoZGF0ZSkpO1xuICB9LFxuICAvLyBTZWNvbmRzIHRpbWVzdGFtcDogNTEyOTY5NTIwXG4gIFg6IGZ1bmN0aW9uIFgoZGF0ZSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKGRhdGUuZ2V0VGltZSgpIC8gMTAwMCk7XG4gIH0sXG4gIC8vIE1pbGxpc2Vjb25kcyB0aW1lc3RhbXA6IDUxMjk2OTUyMDkwMFxuICB4OiBmdW5jdGlvbiB4KGRhdGUpIHtcbiAgICByZXR1cm4gZGF0ZS5nZXRUaW1lKCk7XG4gIH0sXG4gIHc6IGZ1bmN0aW9uIHcoZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIGdldFdlZWsoZGF0ZSwge1xuICAgICAgZmlyc3REYXlPZldlZWs6IGxvY2FsZS5maXJzdERheU9mV2VlayxcbiAgICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogbG9jYWxlLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZVxuICAgIH0pO1xuICB9LFxuICB3dzogZnVuY3Rpb24gd3coZGF0ZSwgbG9jYWxlKSB7XG4gICAgcmV0dXJuIHBhZChmb3JtYXRGbGFncy53KGRhdGUsIGxvY2FsZSksIDIpO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdCh2YWwsIHN0cikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBmb3JtYXRTdHIgPSBzdHIgPyBTdHJpbmcoc3RyKSA6ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTU1onO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZSh2YWwpO1xuXG4gIGlmICghaXNWYWxpZERhdGUoZGF0ZSkpIHtcbiAgICByZXR1cm4gJ0ludmFsaWQgRGF0ZSc7XG4gIH1cblxuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgcmV0dXJuIGZvcm1hdFN0ci5yZXBsYWNlKFJFR0VYX0ZPUk1BVCwgZnVuY3Rpb24gKG1hdGNoLCBwMSkge1xuICAgIGlmIChwMSkge1xuICAgICAgcmV0dXJuIHAxO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZm9ybWF0RmxhZ3NbbWF0Y2hdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoZm9ybWF0RmxhZ3NbbWF0Y2hdKGRhdGUsIGxvY2FsZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG59IiwiZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKHNvdXJjZSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAoIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpKSB7IHJldHVybjsgfSB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBkZWZhdWx0TG9jYWxlIGZyb20gJy4vbG9jYWxlL2VuJztcbmltcG9ydCB7IHN0YXJ0T2ZXZWVrWWVhciB9IGZyb20gJy4vdXRpbCc7XG52YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KE1NP00/TT98RG98REQ/fGRkZD9kP3x3W298d10/fFlZWVl8WVl8YXxBfGhoP3xISD98bW0/fHNzP3xTezEsM318eHxYfFpaP3wuKS9nO1xudmFyIG1hdGNoMSA9IC9cXGQvOyAvLyAwIC0gOVxuXG52YXIgbWF0Y2gyID0gL1xcZFxcZC87IC8vIDAwIC0gOTlcblxudmFyIG1hdGNoMyA9IC9cXGR7M30vOyAvLyAwMDAgLSA5OTlcblxudmFyIG1hdGNoNCA9IC9cXGR7NH0vOyAvLyAwMDAwIC0gOTk5OVxuXG52YXIgbWF0Y2gxdG8yID0gL1xcZFxcZD8vOyAvLyAwIC0gOTlcblxudmFyIG1hdGNoU2hvcnRPZmZzZXQgPSAvWystXVxcZFxcZDo/XFxkXFxkLzsgLy8gKzAwOjAwIC0wMDowMCArMDAwMCBvciAtMDAwMFxuXG52YXIgbWF0Y2hTaWduZWQgPSAvWystXT9cXGQrLzsgLy8gLWluZiAtIGluZlxuXG52YXIgbWF0Y2hUaW1lc3RhbXAgPSAvWystXT9cXGQrKFxcLlxcZHsxLDN9KT8vOyAvLyAxMjM0NTY3ODkgMTIzNDU2Nzg5LjEyM1xuLy8gY29uc3QgbWF0Y2hXb3JkID0gL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2k7IC8vIFdvcmRcblxudmFyIFlFQVIgPSAneWVhcic7XG52YXIgTU9OVEggPSAnbW9udGgnO1xudmFyIERBWSA9ICdkYXknO1xudmFyIEhPVVIgPSAnaG91cic7XG52YXIgTUlOVVRFID0gJ21pbnV0ZSc7XG52YXIgU0VDT05EID0gJ3NlY29uZCc7XG52YXIgTUlMTElTRUNPTkQgPSAnbWlsbGlzZWNvbmQnO1xudmFyIHBhcnNlRmxhZ3MgPSB7fTtcblxudmFyIGFkZFBhcnNlRmxhZyA9IGZ1bmN0aW9uIGFkZFBhcnNlRmxhZyh0b2tlbiwgcmVnZXgsIGNhbGxiYWNrKSB7XG4gIHZhciB0b2tlbnMgPSBBcnJheS5pc0FycmF5KHRva2VuKSA/IHRva2VuIDogW3Rva2VuXTtcbiAgdmFyIGZ1bmM7XG5cbiAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ3N0cmluZycpIHtcbiAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhpbnB1dCkge1xuICAgICAgdmFyIHZhbHVlID0gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIGNhbGxiYWNrLCB2YWx1ZSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBmdW5jID0gY2FsbGJhY2s7XG4gIH1cblxuICB0b2tlbnMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcGFyc2VGbGFnc1trZXldID0gW3JlZ2V4LCBmdW5jXTtcbiAgfSk7XG59O1xuXG52YXIgZXNjYXBlU3RyaW5nUmVnRXhwID0gZnVuY3Rpb24gZXNjYXBlU3RyaW5nUmVnRXhwKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1t8XFxcXHt9KClbXFxdXiQrKj8uXS9nLCAnXFxcXCQmJyk7XG59O1xuXG52YXIgbWF0Y2hXb3JkUmVnRXhwID0gZnVuY3Rpb24gbWF0Y2hXb3JkUmVnRXhwKGxvY2FsZUtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGxvY2FsZSkge1xuICAgIHZhciBhcnJheSA9IGxvY2FsZVtsb2NhbGVLZXldO1xuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTG9jYWxlW1wiLmNvbmNhdChsb2NhbGVLZXksIFwiXSBuZWVkIGFuIGFycmF5XCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFJlZ0V4cChhcnJheS5tYXAoZXNjYXBlU3RyaW5nUmVnRXhwKS5qb2luKCd8JykpO1xuICB9O1xufTtcblxudmFyIG1hdGNoV29yZENhbGxiYWNrID0gZnVuY3Rpb24gbWF0Y2hXb3JkQ2FsbGJhY2sobG9jYWxlS2V5LCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpbnB1dCwgbG9jYWxlKSB7XG4gICAgdmFyIGFycmF5ID0gbG9jYWxlW2xvY2FsZUtleV07XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJMb2NhbGVbXCIuY29uY2F0KGxvY2FsZUtleSwgXCJdIG5lZWQgYW4gYXJyYXlcIikpO1xuICAgIH1cblxuICAgIHZhciBpbmRleCA9IGFycmF5LmluZGV4T2YoaW5wdXQpO1xuXG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFdvcmQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIGluZGV4KTtcbiAgfTtcbn07XG5cbmFkZFBhcnNlRmxhZygnWScsIG1hdGNoU2lnbmVkLCBZRUFSKTtcbmFkZFBhcnNlRmxhZygnWVknLCBtYXRjaDIsIGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgeWVhciA9IG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKTtcbiAgdmFyIGNlbnQgPSBNYXRoLmZsb29yKHllYXIgLyAxMDApO1xuICB2YXIgdmFsdWUgPSBwYXJzZUludChpbnB1dCwgMTApO1xuICB2YWx1ZSA9ICh2YWx1ZSA+IDY4ID8gY2VudCAtIDEgOiBjZW50KSAqIDEwMCArIHZhbHVlO1xuICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBZRUFSLCB2YWx1ZSk7XG59KTtcbmFkZFBhcnNlRmxhZygnWVlZWScsIG1hdGNoNCwgWUVBUik7XG5hZGRQYXJzZUZsYWcoJ00nLCBtYXRjaDF0bzIsIGZ1bmN0aW9uIChpbnB1dCkge1xuICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBNT05USCwgcGFyc2VJbnQoaW5wdXQsIDEwKSAtIDEpO1xufSk7XG5hZGRQYXJzZUZsYWcoJ01NJywgbWF0Y2gyLCBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7fSwgTU9OVEgsIHBhcnNlSW50KGlucHV0LCAxMCkgLSAxKTtcbn0pO1xuYWRkUGFyc2VGbGFnKCdNTU0nLCBtYXRjaFdvcmRSZWdFeHAoJ21vbnRoc1Nob3J0JyksIG1hdGNoV29yZENhbGxiYWNrKCdtb250aHNTaG9ydCcsIE1PTlRIKSk7XG5hZGRQYXJzZUZsYWcoJ01NTU0nLCBtYXRjaFdvcmRSZWdFeHAoJ21vbnRocycpLCBtYXRjaFdvcmRDYWxsYmFjaygnbW9udGhzJywgTU9OVEgpKTtcbmFkZFBhcnNlRmxhZygnRCcsIG1hdGNoMXRvMiwgREFZKTtcbmFkZFBhcnNlRmxhZygnREQnLCBtYXRjaDIsIERBWSk7XG5hZGRQYXJzZUZsYWcoWydIJywgJ2gnXSwgbWF0Y2gxdG8yLCBIT1VSKTtcbmFkZFBhcnNlRmxhZyhbJ0hIJywgJ2hoJ10sIG1hdGNoMiwgSE9VUik7XG5hZGRQYXJzZUZsYWcoJ20nLCBtYXRjaDF0bzIsIE1JTlVURSk7XG5hZGRQYXJzZUZsYWcoJ21tJywgbWF0Y2gyLCBNSU5VVEUpO1xuYWRkUGFyc2VGbGFnKCdzJywgbWF0Y2gxdG8yLCBTRUNPTkQpO1xuYWRkUGFyc2VGbGFnKCdzcycsIG1hdGNoMiwgU0VDT05EKTtcbmFkZFBhcnNlRmxhZygnUycsIG1hdGNoMSwgZnVuY3Rpb24gKGlucHV0KSB7XG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIE1JTExJU0VDT05ELCBwYXJzZUludChpbnB1dCwgMTApICogMTAwKTtcbn0pO1xuYWRkUGFyc2VGbGFnKCdTUycsIG1hdGNoMiwgZnVuY3Rpb24gKGlucHV0KSB7XG4gIHJldHVybiBfZGVmaW5lUHJvcGVydHkoe30sIE1JTExJU0VDT05ELCBwYXJzZUludChpbnB1dCwgMTApICogMTApO1xufSk7XG5hZGRQYXJzZUZsYWcoJ1NTUycsIG1hdGNoMywgTUlMTElTRUNPTkQpO1xuXG5mdW5jdGlvbiBtYXRjaE1lcmlkaWVtKGxvY2FsZSkge1xuICByZXR1cm4gbG9jYWxlLm1lcmlkaWVtUGFyc2UgfHwgL1thcF1cXC4/bT9cXC4/L2k7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRJc1BNKGlucHV0KSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChpbnB1dCkudG9Mb3dlckNhc2UoKS5jaGFyQXQoMCkgPT09ICdwJztcbn1cblxuYWRkUGFyc2VGbGFnKFsnQScsICdhJ10sIG1hdGNoTWVyaWRpZW0sIGZ1bmN0aW9uIChpbnB1dCwgbG9jYWxlKSB7XG4gIHZhciBpc1BNID0gdHlwZW9mIGxvY2FsZS5pc1BNID09PSAnZnVuY3Rpb24nID8gbG9jYWxlLmlzUE0oaW5wdXQpIDogZGVmYXVsdElzUE0oaW5wdXQpO1xuICByZXR1cm4ge1xuICAgIGlzUE06IGlzUE1cbiAgfTtcbn0pO1xuXG5mdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKHN0cikge1xuICB2YXIgX3JlZjggPSBzdHIubWF0Y2goLyhbKy1dfFxcZFxcZCkvZykgfHwgWyctJywgJzAnLCAnMCddLFxuICAgICAgX3JlZjkgPSBfc2xpY2VkVG9BcnJheShfcmVmOCwgMyksXG4gICAgICBzeW1ib2wgPSBfcmVmOVswXSxcbiAgICAgIGhvdXIgPSBfcmVmOVsxXSxcbiAgICAgIG1pbnV0ZSA9IF9yZWY5WzJdO1xuXG4gIHZhciBtaW51dGVzID0gcGFyc2VJbnQoaG91ciwgMTApICogNjAgKyBwYXJzZUludChtaW51dGUsIDEwKTtcblxuICBpZiAobWludXRlcyA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHN5bWJvbCA9PT0gJysnID8gLW1pbnV0ZXMgOiArbWludXRlcztcbn1cblxuYWRkUGFyc2VGbGFnKFsnWicsICdaWiddLCBtYXRjaFNob3J0T2Zmc2V0LCBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgcmV0dXJuIHtcbiAgICBvZmZzZXQ6IG9mZnNldEZyb21TdHJpbmcoaW5wdXQpXG4gIH07XG59KTtcbmFkZFBhcnNlRmxhZygneCcsIG1hdGNoU2lnbmVkLCBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgcmV0dXJuIHtcbiAgICBkYXRlOiBuZXcgRGF0ZShwYXJzZUludChpbnB1dCwgMTApKVxuICB9O1xufSk7XG5hZGRQYXJzZUZsYWcoJ1gnLCBtYXRjaFRpbWVzdGFtcCwgZnVuY3Rpb24gKGlucHV0KSB7XG4gIHJldHVybiB7XG4gICAgZGF0ZTogbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCkgKiAxMDAwKVxuICB9O1xufSk7XG5hZGRQYXJzZUZsYWcoJ2QnLCBtYXRjaDEsICd3ZWVrZGF5Jyk7XG5hZGRQYXJzZUZsYWcoJ2RkJywgbWF0Y2hXb3JkUmVnRXhwKCd3ZWVrZGF5c01pbicpLCBtYXRjaFdvcmRDYWxsYmFjaygnd2Vla2RheXNNaW4nLCAnd2Vla2RheScpKTtcbmFkZFBhcnNlRmxhZygnZGRkJywgbWF0Y2hXb3JkUmVnRXhwKCd3ZWVrZGF5c1Nob3J0JyksIG1hdGNoV29yZENhbGxiYWNrKCd3ZWVrZGF5c1Nob3J0JywgJ3dlZWtkYXknKSk7XG5hZGRQYXJzZUZsYWcoJ2RkZGQnLCBtYXRjaFdvcmRSZWdFeHAoJ3dlZWtkYXlzJyksIG1hdGNoV29yZENhbGxiYWNrKCd3ZWVrZGF5cycsICd3ZWVrZGF5JykpO1xuYWRkUGFyc2VGbGFnKCd3JywgbWF0Y2gxdG8yLCAnd2VlaycpO1xuYWRkUGFyc2VGbGFnKCd3dycsIG1hdGNoMiwgJ3dlZWsnKTtcblxuZnVuY3Rpb24gdG8yNGhvdXIoaG91ciwgaXNQTSkge1xuICBpZiAoaG91ciAhPT0gdW5kZWZpbmVkICYmIGlzUE0gIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChpc1BNKSB7XG4gICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChob3VyID09PSAxMikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGhvdXI7XG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxJbnB1dEFycmF5KGlucHV0KSB7XG4gIHZhciBiYWNrdXBEYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBuZXcgRGF0ZSgpO1xuICB2YXIgcmVzdWx0ID0gWzAsIDAsIDEsIDAsIDAsIDAsIDBdO1xuICB2YXIgYmFja3VwQXJyID0gW2JhY2t1cERhdGUuZ2V0RnVsbFllYXIoKSwgYmFja3VwRGF0ZS5nZXRNb250aCgpLCBiYWNrdXBEYXRlLmdldERhdGUoKSwgYmFja3VwRGF0ZS5nZXRIb3VycygpLCBiYWNrdXBEYXRlLmdldE1pbnV0ZXMoKSwgYmFja3VwRGF0ZS5nZXRTZWNvbmRzKCksIGJhY2t1cERhdGUuZ2V0TWlsbGlzZWNvbmRzKCldO1xuICB2YXIgdXNlQmFja3VwID0gdHJ1ZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IDc7IGkrKykge1xuICAgIGlmIChpbnB1dFtpXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHRbaV0gPSB1c2VCYWNrdXAgPyBiYWNrdXBBcnJbaV0gOiByZXN1bHRbaV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtpXSA9IGlucHV0W2ldO1xuICAgICAgdXNlQmFja3VwID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcykge1xuICB2YXIgZGF0ZTtcblxuICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICBkYXRlID0gbmV3IERhdGUoeSArIDQwMCwgbSwgZCwgaCwgTSwgcywgbXMpO1xuXG4gICAgaWYgKGlzRmluaXRlKGRhdGUuZ2V0RnVsbFllYXIoKSkpIHtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gIH1cblxuICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVRDRGF0ZSgpIHtcbiAgdmFyIGRhdGU7XG5cbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHZhciB5ID0gYXJnc1swXTtcblxuICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICBhcmdzWzBdICs9IDQwMDtcbiAgICBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMuYXBwbHkoRGF0ZSwgYXJncykpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXG5cbiAgICBpZiAoaXNGaW5pdGUoZGF0ZS5nZXRVVENGdWxsWWVhcigpKSkge1xuICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KERhdGUsIGFyZ3MpKTtcbiAgfVxuXG4gIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiBtYWtlUGFyc2VyKGRhdGVTdHJpbmcsIGZvcm1hdCwgbG9jYWxlKSB7XG4gIHZhciB0b2tlbnMgPSBmb3JtYXQubWF0Y2goZm9ybWF0dGluZ1Rva2Vucyk7XG5cbiAgaWYgKCF0b2tlbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgfVxuXG4gIHZhciBsZW5ndGggPSB0b2tlbnMubGVuZ3RoO1xuICB2YXIgbWFyayA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgdmFyIHBhcnNlVG8gPSBwYXJzZUZsYWdzW3Rva2VuXTtcblxuICAgIGlmICghcGFyc2VUbykge1xuICAgICAgdmFyIHdvcmQgPSB0b2tlbi5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuXG4gICAgICBpZiAoZGF0ZVN0cmluZy5pbmRleE9mKHdvcmQpID09PSAwKSB7XG4gICAgICAgIGRhdGVTdHJpbmcgPSBkYXRlU3RyaW5nLnN1YnN0cih3b3JkLmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBtYXRjaCcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVnZXggPSB0eXBlb2YgcGFyc2VUb1swXSA9PT0gJ2Z1bmN0aW9uJyA/IHBhcnNlVG9bMF0obG9jYWxlKSA6IHBhcnNlVG9bMF07XG4gICAgICB2YXIgcGFyc2VyID0gcGFyc2VUb1sxXTtcbiAgICAgIHZhciB2YWx1ZSA9IChyZWdleC5leGVjKGRhdGVTdHJpbmcpIHx8IFtdKVswXTtcbiAgICAgIHZhciBvYmogPSBwYXJzZXIodmFsdWUsIGxvY2FsZSk7XG4gICAgICBtYXJrID0gX29iamVjdFNwcmVhZCh7fSwgbWFyaywge30sIG9iaik7XG4gICAgICBkYXRlU3RyaW5nID0gZGF0ZVN0cmluZy5yZXBsYWNlKHZhbHVlLCAnJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1hcms7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShzdHIsIGZvcm1hdCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgdHJ5IHtcbiAgICB2YXIgX29wdGlvbnMkbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUsXG4gICAgICAgIF9sb2NhbGUgPSBfb3B0aW9ucyRsb2NhbGUgPT09IHZvaWQgMCA/IGRlZmF1bHRMb2NhbGUgOiBfb3B0aW9ucyRsb2NhbGUsXG4gICAgICAgIF9vcHRpb25zJGJhY2t1cERhdGUgPSBvcHRpb25zLmJhY2t1cERhdGUsXG4gICAgICAgIGJhY2t1cERhdGUgPSBfb3B0aW9ucyRiYWNrdXBEYXRlID09PSB2b2lkIDAgPyBuZXcgRGF0ZSgpIDogX29wdGlvbnMkYmFja3VwRGF0ZTtcblxuICAgIHZhciBwYXJzZVJlc3VsdCA9IG1ha2VQYXJzZXIoc3RyLCBmb3JtYXQsIF9sb2NhbGUpO1xuICAgIHZhciB5ZWFyID0gcGFyc2VSZXN1bHQueWVhcixcbiAgICAgICAgbW9udGggPSBwYXJzZVJlc3VsdC5tb250aCxcbiAgICAgICAgZGF5ID0gcGFyc2VSZXN1bHQuZGF5LFxuICAgICAgICBob3VyID0gcGFyc2VSZXN1bHQuaG91cixcbiAgICAgICAgbWludXRlID0gcGFyc2VSZXN1bHQubWludXRlLFxuICAgICAgICBzZWNvbmQgPSBwYXJzZVJlc3VsdC5zZWNvbmQsXG4gICAgICAgIG1pbGxpc2Vjb25kID0gcGFyc2VSZXN1bHQubWlsbGlzZWNvbmQsXG4gICAgICAgIGlzUE0gPSBwYXJzZVJlc3VsdC5pc1BNLFxuICAgICAgICBkYXRlID0gcGFyc2VSZXN1bHQuZGF0ZSxcbiAgICAgICAgb2Zmc2V0ID0gcGFyc2VSZXN1bHQub2Zmc2V0LFxuICAgICAgICB3ZWVrZGF5ID0gcGFyc2VSZXN1bHQud2Vla2RheSxcbiAgICAgICAgd2VlayA9IHBhcnNlUmVzdWx0LndlZWs7XG5cbiAgICBpZiAoZGF0ZSkge1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgdmFyIGlucHV0QXJyYXkgPSBbeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXTtcbiAgICBpbnB1dEFycmF5WzNdID0gdG8yNGhvdXIoaW5wdXRBcnJheVszXSwgaXNQTSk7IC8vIGNoZWNrIHdlZWtcblxuICAgIGlmICh3ZWVrICE9PSB1bmRlZmluZWQgJiYgbW9udGggPT09IHVuZGVmaW5lZCAmJiBkYXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gbmV3IERhdGUoeWVhciwgMykgbWFrZSBzdXJlIGluIGN1cnJlbnQgeWVhclxuICAgICAgdmFyIGZpcnN0RGF0ZSA9IHN0YXJ0T2ZXZWVrWWVhcih5ZWFyID09PSB1bmRlZmluZWQgPyBiYWNrdXBEYXRlIDogbmV3IERhdGUoeWVhciwgMyksIHtcbiAgICAgICAgZmlyc3REYXlPZldlZWs6IF9sb2NhbGUuZmlyc3REYXlPZldlZWssXG4gICAgICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogX2xvY2FsZS5maXJzdFdlZWtDb250YWluc0RhdGVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGZpcnN0RGF0ZS5nZXRUaW1lKCkgKyAod2VlayAtIDEpICogNyAqIDI0ICogMzYwMCAqIDEwMDApO1xuICAgIH1cblxuICAgIHZhciBwYXJzZWREYXRlO1xuICAgIHZhciByZXN1bHQgPSBnZXRGdWxsSW5wdXRBcnJheShpbnB1dEFycmF5LCBiYWNrdXBEYXRlKTtcblxuICAgIGlmIChvZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0WzZdICs9IG9mZnNldCAqIDYwICogMTAwMDtcbiAgICAgIHBhcnNlZERhdGUgPSBjcmVhdGVVVENEYXRlLmFwcGx5KHZvaWQgMCwgX3RvQ29uc3VtYWJsZUFycmF5KHJlc3VsdCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWREYXRlID0gY3JlYXRlRGF0ZS5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShyZXN1bHQpKTtcbiAgICB9IC8vIGNoZWNrIHdlZWtkYXlcblxuXG4gICAgaWYgKHdlZWtkYXkgIT09IHVuZGVmaW5lZCAmJiBwYXJzZWREYXRlLmdldERheSgpICE9PSB3ZWVrZGF5KSB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoTmFOKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VkRGF0ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IHsgZ2V0V2VlaywgZm9ybWF0LCBwYXJzZSB9IGZyb20gJ2RhdGUtZm9ybWF0LXBhcnNlJztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KTtcbiAgICBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7XG4gIH1cblxuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG4pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTtcblxuICByZXR1cm4gYXJyMjtcbn1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cblxuZnVuY3Rpb24gX2V4dGVuZHMkMSgpIHtcbiAgcmV0dXJuIF9leHRlbmRzJDEgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIChhKSB7XG4gICAgZm9yICh2YXIgYiwgYyA9IDE7IGMgPCBhcmd1bWVudHMubGVuZ3RoOyBjKyspIHtcbiAgICAgIGZvciAodmFyIGQgaW4gYiA9IGFyZ3VtZW50c1tjXSwgYikge1xuICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgZCkgJiYgKGFbZF0gPSBiW2RdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYTtcbiAgfSwgX2V4dGVuZHMkMS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG52YXIgbm9ybWFsTWVyZ2UgPSBbXCJhdHRyc1wiLCBcInByb3BzXCIsIFwiZG9tUHJvcHNcIl0sXG4gICAgdG9BcnJheU1lcmdlID0gW1wiY2xhc3NcIiwgXCJzdHlsZVwiLCBcImRpcmVjdGl2ZXNcIl0sXG4gICAgZnVuY3Rpb25hbE1lcmdlID0gW1wib25cIiwgXCJuYXRpdmVPblwiXSxcbiAgICBtZXJnZUpzeFByb3BzID0gZnVuY3Rpb24gbWVyZ2VKc3hQcm9wcyhhKSB7XG4gIHJldHVybiBhLnJlZHVjZShmdW5jdGlvbiAoYywgYSkge1xuICAgIGZvciAodmFyIGIgaW4gYSkge1xuICAgICAgaWYgKCFjW2JdKSBjW2JdID0gYVtiXTtlbHNlIGlmICgtMSAhPT0gbm9ybWFsTWVyZ2UuaW5kZXhPZihiKSkgY1tiXSA9IF9leHRlbmRzJDEoe30sIGNbYl0sIGFbYl0pO2Vsc2UgaWYgKC0xICE9PSB0b0FycmF5TWVyZ2UuaW5kZXhPZihiKSkge1xuICAgICAgICB2YXIgZCA9IGNbYl0gaW5zdGFuY2VvZiBBcnJheSA/IGNbYl0gOiBbY1tiXV0sXG4gICAgICAgICAgICBlID0gYVtiXSBpbnN0YW5jZW9mIEFycmF5ID8gYVtiXSA6IFthW2JdXTtcbiAgICAgICAgY1tiXSA9IGQuY29uY2F0KGUpO1xuICAgICAgfSBlbHNlIGlmICgtMSAhPT0gZnVuY3Rpb25hbE1lcmdlLmluZGV4T2YoYikpIHtcbiAgICAgICAgZm9yICh2YXIgZiBpbiBhW2JdKSB7XG4gICAgICAgICAgaWYgKGNbYl1bZl0pIHtcbiAgICAgICAgICAgIHZhciBnID0gY1tiXVtmXSBpbnN0YW5jZW9mIEFycmF5ID8gY1tiXVtmXSA6IFtjW2JdW2ZdXSxcbiAgICAgICAgICAgICAgICBoID0gYVtiXVtmXSBpbnN0YW5jZW9mIEFycmF5ID8gYVtiXVtmXSA6IFthW2JdW2ZdXTtcbiAgICAgICAgICAgIGNbYl1bZl0gPSBnLmNvbmNhdChoKTtcbiAgICAgICAgICB9IGVsc2UgY1tiXVtmXSA9IGFbYl1bZl07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJob29rXCIgPT0gYikgZm9yICh2YXIgaSBpbiBhW2JdKSB7XG4gICAgICAgIGNbYl1baV0gPSBjW2JdW2ldID8gbWVyZ2VGbihjW2JdW2ldLCBhW2JdW2ldKSA6IGFbYl1baV07XG4gICAgICB9IGVsc2UgY1tiXSA9IGFbYl07XG4gICAgfVxuXG4gICAgcmV0dXJuIGM7XG4gIH0sIHt9KTtcbn0sXG4gICAgbWVyZ2VGbiA9IGZ1bmN0aW9uIG1lcmdlRm4oYSwgYikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGEgJiYgYS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBiICYmIGIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn07XG5cbnZhciBoZWxwZXIgPSBtZXJnZUpzeFByb3BzO1xuXG4vLyBuZXcgRGF0ZSgxMCwgMCwgMSkgVGhlIHllYXIgZnJvbSAwIHRvIDk5IHdpbGwgYmUgaW5jcmVtZW50ZWQgYnkgMTkwMCBhdXRvbWF0aWNhbGx5LlxuZnVuY3Rpb24gY3JlYXRlRGF0ZSh5KSB7XG4gIHZhciBNID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICB2YXIgZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcbiAgdmFyIGggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG4gIHZhciBtID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAwO1xuICB2YXIgcyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogMDtcbiAgdmFyIG1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDYgJiYgYXJndW1lbnRzWzZdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNl0gOiAwO1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHksIE0sIGQsIGgsIG0sIHMsIG1zKTtcblxuICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKHkpO1xuICB9XG5cbiAgcmV0dXJuIGRhdGU7XG59XG5mdW5jdGlvbiBpc1ZhbGlkRGF0ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlIGluc3RhbmNlb2YgRGF0ZSAmJiAhaXNOYU4oZGF0ZSk7XG59XG5mdW5jdGlvbiBpc1ZhbGlkUmFuZ2VEYXRlKGRhdGUpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGF0ZSkgJiYgZGF0ZS5sZW5ndGggPT09IDIgJiYgZGF0ZS5ldmVyeShpc1ZhbGlkRGF0ZSkgJiYgZGF0ZVswXSA8PSBkYXRlWzFdO1xufVxuZnVuY3Rpb24gaXNWYWxpZERhdGVzKGRhdGVzKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRhdGVzKSAmJiBkYXRlcy5ldmVyeShpc1ZhbGlkRGF0ZSk7XG59XG5mdW5jdGlvbiBnZXRWYWxpZERhdGUodmFsdWUpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cbiAgaWYgKGlzVmFsaWREYXRlKGRhdGUpKSB7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYmFja3VwID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBiYWNrdXBbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGJhY2t1cC5sZW5ndGgpIHtcbiAgICByZXR1cm4gZ2V0VmFsaWREYXRlLmFwcGx5KHZvaWQgMCwgYmFja3VwKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgRGF0ZSgpO1xufVxuZnVuY3Rpb24gc3RhcnRPZlllYXIodmFsdWUpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufVxuZnVuY3Rpb24gc3RhcnRPZk1vbnRoKHZhbHVlKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUodmFsdWUpO1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufVxuZnVuY3Rpb24gc3RhcnRPZkRheSh2YWx1ZSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5mdW5jdGlvbiBnZXRDYWxlbmRhcihfcmVmKSB7XG4gIHZhciBmaXJzdERheU9mV2VlayA9IF9yZWYuZmlyc3REYXlPZldlZWssXG4gICAgICB5ZWFyID0gX3JlZi55ZWFyLFxuICAgICAgbW9udGggPSBfcmVmLm1vbnRoO1xuICB2YXIgYXJyID0gW107IC8vIGNoYW5nZSB0byB0aGUgbGFzdCBkYXkgb2YgdGhlIGxhc3QgbW9udGhcblxuICB2YXIgY2FsZW5kYXIgPSBjcmVhdGVEYXRlKHllYXIsIG1vbnRoLCAwKTtcbiAgdmFyIGxhc3REYXlJbkxhc3RNb250aCA9IGNhbGVuZGFyLmdldERhdGUoKTsgLy8gZ2V0RGF5KCkgMCBpcyBTdW5kYXksIDEgaXMgTW9uZGF5XG5cbiAgdmFyIGZpcnN0RGF5SW5MYXN0TW9udGggPSBsYXN0RGF5SW5MYXN0TW9udGggLSAoY2FsZW5kYXIuZ2V0RGF5KCkgKyA3IC0gZmlyc3REYXlPZldlZWspICUgNztcblxuICBmb3IgKHZhciBpID0gZmlyc3REYXlJbkxhc3RNb250aDsgaSA8PSBsYXN0RGF5SW5MYXN0TW9udGg7IGkrKykge1xuICAgIGFyci5wdXNoKGNyZWF0ZURhdGUoeWVhciwgbW9udGgsIGkgLSBsYXN0RGF5SW5MYXN0TW9udGgpKTtcbiAgfSAvLyBjaGFuZ2UgdG8gdGhlIGxhc3QgZGF5IG9mIHRoZSBjdXJyZW50IG1vbnRoXG5cblxuICBjYWxlbmRhci5zZXRNb250aChtb250aCArIDEsIDApO1xuICB2YXIgbGFzdERheUluQ3VycmVudE1vbnRoID0gY2FsZW5kYXIuZ2V0RGF0ZSgpO1xuXG4gIGZvciAodmFyIF9pID0gMTsgX2kgPD0gbGFzdERheUluQ3VycmVudE1vbnRoOyBfaSsrKSB7XG4gICAgYXJyLnB1c2goY3JlYXRlRGF0ZSh5ZWFyLCBtb250aCwgX2kpKTtcbiAgfVxuXG4gIHZhciBsYXN0TW9udGhMZW5ndGggPSBsYXN0RGF5SW5MYXN0TW9udGggLSBmaXJzdERheUluTGFzdE1vbnRoICsgMTtcbiAgdmFyIG5leHRNb250aExlbmd0aCA9IDYgKiA3IC0gbGFzdE1vbnRoTGVuZ3RoIC0gbGFzdERheUluQ3VycmVudE1vbnRoO1xuXG4gIGZvciAodmFyIF9pMiA9IDE7IF9pMiA8PSBuZXh0TW9udGhMZW5ndGg7IF9pMisrKSB7XG4gICAgYXJyLnB1c2goY3JlYXRlRGF0ZSh5ZWFyLCBtb250aCwgbGFzdERheUluQ3VycmVudE1vbnRoICsgX2kyKSk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuZnVuY3Rpb24gc2V0TW9udGgoZGlydHlEYXRlLCBkaXJ0eU1vbnRoKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoZGlydHlEYXRlKTtcbiAgdmFyIG1vbnRoID0gdHlwZW9mIGRpcnR5TW9udGggPT09ICdmdW5jdGlvbicgPyBkaXJ0eU1vbnRoKGRhdGUuZ2V0TW9udGgoKSkgOiBOdW1iZXIoZGlydHlNb250aCk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRGdWxsWWVhcigpO1xuICB2YXIgZGF5c0luTW9udGggPSBjcmVhdGVEYXRlKHllYXIsIG1vbnRoICsgMSwgMCkuZ2V0RGF0ZSgpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXRlKCk7XG4gIGRhdGUuc2V0TW9udGgobW9udGgsIE1hdGgubWluKGRheSwgZGF5c0luTW9udGgpKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5mdW5jdGlvbiBzZXRZZWFyKGRpcnR5RGF0ZSwgZGlydHlZZWFyKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSB0eXBlb2YgZGlydHlZZWFyID09PSAnZnVuY3Rpb24nID8gZGlydHlZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSkgOiBkaXJ0eVllYXI7XG4gIGRhdGUuc2V0RnVsbFllYXIoeWVhcik7XG4gIHJldHVybiBkYXRlO1xufVxuZnVuY3Rpb24gYXNzaWduVGltZSh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRhcmdldCk7XG4gIHZhciB0aW1lID0gbmV3IERhdGUoc291cmNlKTtcbiAgZGF0ZS5zZXRIb3Vycyh0aW1lLmdldEhvdXJzKCksIHRpbWUuZ2V0TWludXRlcygpLCB0aW1lLmdldFNlY29uZHMoKSk7XG4gIHJldHVybiBkYXRlO1xufVxuXG4vKipcbiAqIGNodW5rIHRoZSBhcnJheVxuICogQHBhcmFtIHtBcnJheX0gYXJyXG4gKiBAcGFyYW0ge051bWJlcn0gc2l6ZVxuICovXG5mdW5jdGlvbiBjaHVuayhhcnIsIHNpemUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHNpemUgPSBzaXplIHx8IGxlbjtcblxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlc3VsdC5wdXNoKGFyci5zbGljZShpLCBpICs9IHNpemUpKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIGlzT2JqZWN0XG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cblxuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59XG4vKipcbiAqIHBpY2sgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0ge0FycmF5fFN0cmluZ30gcHJvcHNcbiAqL1xuXG5mdW5jdGlvbiBwaWNrKG9iaiwgcHJvcHMpIHtcbiAgaWYgKCFpc09iamVjdChvYmopKSByZXR1cm4ge307XG5cbiAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIHByb3BzID0gW3Byb3BzXTtcbiAgfVxuXG4gIHZhciByZXMgPSB7fTtcbiAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgIGlmIChwcm9wIGluIG9iaikge1xuICAgICAgcmVzW3Byb3BdID0gb2JqW3Byb3BdO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXM7XG59XG4vKipcbiAqIGRlZXAgbWVyZ2UgdHdvIG9iamVjdCB3aXRob3V0IG1lcmdpbmcgYXJyYXlcbiAqIEBwYXJhbSB7b2JqZWN0fSB0YXJnZXRcbiAqIEBwYXJhbSB7b2JqZWN0fSBzb3VyY2VcbiAqL1xuXG5mdW5jdGlvbiBtZXJnZURlZXAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHRhcmdldDtcblxuICBpZiAoaXNPYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBzb3VyY2Vba2V5XTtcblxuICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlKSAmJiBpc09iamVjdCh0YXJnZXRba2V5XSkpIHtcbiAgICAgICAgdmFsdWUgPSBtZXJnZURlZXAodGFyZ2V0W2tleV0sIHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0gX29iamVjdFNwcmVhZDIoe30sIHJlc3VsdCwgX2RlZmluZVByb3BlcnR5KHt9LCBrZXksIHZhbHVlKSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiB1bndyYXBFeHBvcnRzICh4KSB7XG5cdHJldHVybiB4ICYmIHguX19lc01vZHVsZSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ2RlZmF1bHQnKSA/IHhbJ2RlZmF1bHQnXSA6IHg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgZW4gPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBsb2NhbGUgPSB7XG4gIG1vbnRoczogWydKYW51YXJ5JywgJ0ZlYnJ1YXJ5JywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPY3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlY2VtYmVyJ10sXG4gIG1vbnRoc1Nob3J0OiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdlZWtkYXlzOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J10sXG4gIHdlZWtkYXlzU2hvcnQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdlZWtkYXlzTWluOiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGZpcnN0RGF5T2ZXZWVrOiAwLFxuICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbn07XG52YXIgX2RlZmF1bHQgPSBsb2NhbGU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG59KTtcblxudmFyIGVuJDEgPSB1bndyYXBFeHBvcnRzKGVuKTtcblxudmFyIGxhbmcgPSB7XG4gIGZvcm1hdExvY2FsZTogZW4kMSxcbiAgeWVhckZvcm1hdDogJ1lZWVknLFxuICBtb250aEZvcm1hdDogJ01NTScsXG4gIG1vbnRoQmVmb3JlWWVhcjogdHJ1ZVxufTtcblxudmFyIGRlZmF1bHRMb2NhbGUgPSAnZW4nO1xudmFyIGxvY2FsZXMgPSB7fTtcbmxvY2FsZXNbZGVmYXVsdExvY2FsZV0gPSBsYW5nO1xuZnVuY3Rpb24gbG9jYWxlKG5hbWUsIG9iamVjdCwgaXNMb2NhbCkge1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSByZXR1cm4gbG9jYWxlc1tkZWZhdWx0TG9jYWxlXTtcbiAgdmFyIGwgPSBkZWZhdWx0TG9jYWxlO1xuXG4gIGlmIChsb2NhbGVzW25hbWVdKSB7XG4gICAgbCA9IG5hbWU7XG4gIH1cblxuICBpZiAob2JqZWN0KSB7XG4gICAgbG9jYWxlc1tuYW1lXSA9IG9iamVjdDtcbiAgICBsID0gbmFtZTtcbiAgfVxuXG4gIGlmICghaXNMb2NhbCkge1xuICAgIGRlZmF1bHRMb2NhbGUgPSBsO1xuICB9XG5cbiAgcmV0dXJuIGxvY2FsZXNbbmFtZV0gfHwgbG9jYWxlc1tkZWZhdWx0TG9jYWxlXTtcbn1cbi8qKlxuICogZ2V0IGxvY2FsZSBvYmplY3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGxhbmdcbiAqL1xuXG5mdW5jdGlvbiBnZXRMb2NhbGUobmFtZSkge1xuICByZXR1cm4gbG9jYWxlKG5hbWUsIG51bGwsIHRydWUpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgZmlsZSAqL1xuZnVuY3Rpb24gcmFmVGhyb3R0bGUoZm4pIHtcbiAgdmFyIGlzUnVubmluZyA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gZm5CaW5mUmFmKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgaWYgKGlzUnVubmluZykgcmV0dXJuO1xuICAgIGlzUnVubmluZyA9IHRydWU7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzUnVubmluZyA9IGZhbHNlO1xuICAgICAgZm4uYXBwbHkoX3RoaXMsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIGdldCB0aGUgaGlkZGVuIGVsZW1lbnQgd2lkdGgsIGhlaWdodFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCBkb21cbiAqL1xuZnVuY3Rpb24gZ2V0UG9wdXBFbGVtZW50U2l6ZShlbGVtZW50KSB7XG4gIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbGVtZW50LnN0eWxlLmRpc3BsYXk7XG4gIHZhciBvcmlnaW5hbFZpc2liaWxpdHkgPSBlbGVtZW50LnN0eWxlLnZpc2liaWxpdHk7XG4gIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIGVsZW1lbnQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGggKyBwYXJzZUludChzdHlsZXMubWFyZ2luTGVmdCwgMTApICsgcGFyc2VJbnQoc3R5bGVzLm1hcmdpblJpZ2h0LCAxMCk7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodCArIHBhcnNlSW50KHN0eWxlcy5tYXJnaW5Ub3AsIDEwKSArIHBhcnNlSW50KHN0eWxlcy5tYXJnaW5Cb3R0b20sIDEwKTtcbiAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICBlbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSBvcmlnaW5hbFZpc2liaWxpdHk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG59XG4vKipcbiAqIGdldCB0aGUgcG9wdXAgcG9zaXRpb25cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIHJlbGF0aXZlIGVsZW1lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0YXJnZXRXaWR0aCB0YXJnZXQgZWxlbWVudCdzIHdpZHRoXG4gKiBAcGFyYW0ge051bWJlcn0gdGFyZ2V0SGVpZ2h0IHRhcmdldCBlbGVtZW50J3MgaGVpZ2h0XG4gKiBAcGFyYW0ge0Jvb2xlYW59IGZpeGVkXG4gKi9cblxuZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbihlbCwgdGFyZ2V0V2lkdGgsIHRhcmdldEhlaWdodCwgZml4ZWQpIHtcbiAgdmFyIGxlZnQgPSAwO1xuICB2YXIgdG9wID0gMDtcbiAgdmFyIG9mZnNldFggPSAwO1xuICB2YXIgb2Zmc2V0WSA9IDA7XG4gIHZhciByZWxhdGl2ZVJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGR3ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICB2YXIgZGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gIGlmIChmaXhlZCkge1xuICAgIG9mZnNldFggPSB3aW5kb3cucGFnZVhPZmZzZXQgKyByZWxhdGl2ZVJlY3QubGVmdDtcbiAgICBvZmZzZXRZID0gd2luZG93LnBhZ2VZT2Zmc2V0ICsgcmVsYXRpdmVSZWN0LnRvcDtcbiAgfVxuXG4gIGlmIChkdyAtIHJlbGF0aXZlUmVjdC5sZWZ0IDwgdGFyZ2V0V2lkdGggJiYgcmVsYXRpdmVSZWN0LnJpZ2h0IDwgdGFyZ2V0V2lkdGgpIHtcbiAgICBsZWZ0ID0gb2Zmc2V0WCAtIHJlbGF0aXZlUmVjdC5sZWZ0ICsgMTtcbiAgfSBlbHNlIGlmIChyZWxhdGl2ZVJlY3QubGVmdCArIHJlbGF0aXZlUmVjdC53aWR0aCAvIDIgPD0gZHcgLyAyKSB7XG4gICAgbGVmdCA9IG9mZnNldFg7XG4gIH0gZWxzZSB7XG4gICAgbGVmdCA9IG9mZnNldFggKyByZWxhdGl2ZVJlY3Qud2lkdGggLSB0YXJnZXRXaWR0aDtcbiAgfVxuXG4gIGlmIChyZWxhdGl2ZVJlY3QudG9wIDw9IHRhcmdldEhlaWdodCAmJiBkaCAtIHJlbGF0aXZlUmVjdC5ib3R0b20gPD0gdGFyZ2V0SGVpZ2h0KSB7XG4gICAgdG9wID0gb2Zmc2V0WSArIGRoIC0gcmVsYXRpdmVSZWN0LnRvcCAtIHRhcmdldEhlaWdodDtcbiAgfSBlbHNlIGlmIChyZWxhdGl2ZVJlY3QudG9wICsgcmVsYXRpdmVSZWN0LmhlaWdodCAvIDIgPD0gZGggLyAyKSB7XG4gICAgdG9wID0gb2Zmc2V0WSArIHJlbGF0aXZlUmVjdC5oZWlnaHQ7XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0WSAtIHRhcmdldEhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGVmdDogXCJcIi5jb25jYXQobGVmdCwgXCJweFwiKSxcbiAgICB0b3A6IFwiXCIuY29uY2F0KHRvcCwgXCJweFwiKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgdmFyIHVudGlsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBkb2N1bWVudC5ib2R5O1xuXG4gIGlmICghbm9kZSB8fCBub2RlID09PSB1bnRpbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gZnVuY3Rpb24gc3R5bGUodmFsdWUsIHByb3ApIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZSh2YWx1ZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfTtcblxuICB2YXIgcmVnZXggPSAvKGF1dG98c2Nyb2xsKS87XG4gIHZhciBzY3JvbGwgPSByZWdleC50ZXN0KHN0eWxlKG5vZGUsICdvdmVyZmxvdycpICsgc3R5bGUobm9kZSwgJ292ZXJmbG93LXknKSArIHN0eWxlKG5vZGUsICdvdmVyZmxvdy14JykpO1xuICByZXR1cm4gc2Nyb2xsID8gbm9kZSA6IGdldFNjcm9sbFBhcmVudChub2RlLnBhcmVudE5vZGUsIHVudGlsKTtcbn1cblxuLy9cbnZhciBzY3JpcHQgPSB7XG4gIG5hbWU6ICdQb3B1cCcsXG4gIGluamVjdDoge1xuICAgIHByZWZpeENsYXNzOiB7XG4gICAgICBkZWZhdWx0OiAnbXgnXG4gICAgfVxuICB9LFxuICBwcm9wczoge1xuICAgIHZpc2libGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH0sXG4gICAgYXBwZW5kVG9Cb2R5OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9wOiAnJyxcbiAgICAgIGxlZnQ6ICcnXG4gICAgfTtcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICB2aXNpYmxlOiB7XG4gICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHZhbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgICBfdGhpcy5kaXNwbGF5UG9wdXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICh0aGlzLmFwcGVuZFRvQm9keSkge1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLiRlbCk7XG4gICAgfVxuXG4gICAgdGhpcy5fY2xpY2tvdXRFdmVudCA9ICdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCA/ICd0b3VjaHN0YXJ0JyA6ICdtb3VzZWRvd24nO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcy5fY2xpY2tvdXRFdmVudCwgdGhpcy5oYW5kbGVDbGlja091dHNpZGUpOyAvLyBjaGFuZ2UgdGhlIHBvcHVwIHBvc2l0aW9uIHdoZW4gcmVzaXplIG9yIHNjcm9sbFxuXG4gICAgdmFyIHJlbGF0aXZlRWxlbWVudCA9IHRoaXMuJHBhcmVudC4kZWw7XG4gICAgdGhpcy5fZGlzcGxheVBvcHVwID0gcmFmVGhyb3R0bGUoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzMi5kaXNwbGF5UG9wdXAoKTtcbiAgICB9KTtcbiAgICB0aGlzLl9zY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVsYXRpdmVFbGVtZW50KSB8fCB3aW5kb3c7XG5cbiAgICB0aGlzLl9zY3JvbGxQYXJlbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5fZGlzcGxheVBvcHVwKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLl9kaXNwbGF5UG9wdXApO1xuICB9LFxuICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmFwcGVuZFRvQm9keSAmJiB0aGlzLiRlbC5wYXJlbnROb2RlKSB7XG4gICAgICB0aGlzLiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuJGVsKTtcbiAgICB9XG5cbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMuX2NsaWNrb3V0RXZlbnQsIHRoaXMuaGFuZGxlQ2xpY2tPdXRzaWRlKTtcblxuICAgIHRoaXMuX3Njcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLl9kaXNwbGF5UG9wdXApO1xuXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX2Rpc3BsYXlQb3B1cCk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBoYW5kbGVDbGlja091dHNpZGU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrT3V0c2lkZShldnQpIHtcbiAgICAgIGlmICghdGhpcy52aXNpYmxlKSByZXR1cm47XG4gICAgICB2YXIgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcbiAgICAgIHZhciBlbCA9IHRoaXMuJGVsO1xuXG4gICAgICBpZiAoZWwgJiYgIWVsLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgICAgdGhpcy4kZW1pdCgnY2xpY2tvdXRzaWRlJywgZXZ0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRpc3BsYXlQb3B1cDogZnVuY3Rpb24gZGlzcGxheVBvcHVwKCkge1xuICAgICAgaWYgKCF0aGlzLnZpc2libGUpIHJldHVybjtcbiAgICAgIHZhciBwb3B1cCA9IHRoaXMuJGVsO1xuICAgICAgdmFyIHJlbGF0aXZlRWxlbWVudCA9IHRoaXMuJHBhcmVudC4kZWw7XG4gICAgICB2YXIgYXBwZW5kVG9Cb2R5ID0gdGhpcy5hcHBlbmRUb0JvZHk7XG5cbiAgICAgIGlmICghdGhpcy5fcG9wdXBSZWN0KSB7XG4gICAgICAgIHRoaXMuX3BvcHVwUmVjdCA9IGdldFBvcHVwRWxlbWVudFNpemUocG9wdXApO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkX3BvcHVwUmVjdCA9IHRoaXMuX3BvcHVwUmVjdCxcbiAgICAgICAgICB3aWR0aCA9IF90aGlzJF9wb3B1cFJlY3Qud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0ID0gX3RoaXMkX3BvcHVwUmVjdC5oZWlnaHQ7XG5cbiAgICAgIHZhciBfZ2V0UmVsYXRpdmVQb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24ocmVsYXRpdmVFbGVtZW50LCB3aWR0aCwgaGVpZ2h0LCBhcHBlbmRUb0JvZHkpLFxuICAgICAgICAgIGxlZnQgPSBfZ2V0UmVsYXRpdmVQb3NpdGlvbi5sZWZ0LFxuICAgICAgICAgIHRvcCA9IF9nZXRSZWxhdGl2ZVBvc2l0aW9uLnRvcDtcblxuICAgICAgdGhpcy5sZWZ0ID0gbGVmdDtcbiAgICAgIHRoaXMudG9wID0gdG9wO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50KHRlbXBsYXRlLCBzdHlsZSwgc2NyaXB0LCBzY29wZUlkLCBpc0Z1bmN0aW9uYWxUZW1wbGF0ZSwgbW9kdWxlSWRlbnRpZmllclxuLyogc2VydmVyIG9ubHkgKi9cbiwgc2hhZG93TW9kZSwgY3JlYXRlSW5qZWN0b3IsIGNyZWF0ZUluamVjdG9yU1NSLCBjcmVhdGVJbmplY3RvclNoYWRvdykge1xuICBpZiAodHlwZW9mIHNoYWRvd01vZGUgIT09ICdib29sZWFuJykge1xuICAgIGNyZWF0ZUluamVjdG9yU1NSID0gY3JlYXRlSW5qZWN0b3I7XG4gICAgY3JlYXRlSW5qZWN0b3IgPSBzaGFkb3dNb2RlO1xuICAgIHNoYWRvd01vZGUgPSBmYWxzZTtcbiAgfSAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wLlxuXG5cbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0ID09PSAnZnVuY3Rpb24nID8gc2NyaXB0Lm9wdGlvbnMgOiBzY3JpcHQ7IC8vIHJlbmRlciBmdW5jdGlvbnNcblxuICBpZiAodGVtcGxhdGUgJiYgdGVtcGxhdGUucmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSB0ZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSB0ZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlOyAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG5cbiAgICBpZiAoaXNGdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWU7XG4gICAgfVxuICB9IC8vIHNjb3BlZElkXG5cblxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkO1xuICB9XG5cbiAgdmFyIGhvb2s7XG5cbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHtcbiAgICAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gaG9vayhjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0OyAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcblxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfXztcbiAgICAgIH0gLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcblxuXG4gICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3RvclNTUihjb250ZXh0KSk7XG4gICAgICB9IC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJlbmNlXG5cblxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpO1xuICAgICAgfVxuICAgIH07IC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcblxuXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rO1xuICB9IGVsc2UgaWYgKHN0eWxlKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGUgPyBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3RvclNoYWRvdyhjb250ZXh0LCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpKTtcbiAgICB9IDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHN0eWxlLmNhbGwodGhpcywgY3JlYXRlSW5qZWN0b3IoY29udGV4dCkpO1xuICAgIH07XG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG5cbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpO1xuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dCk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGU7XG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKSA6IFtob29rXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NyaXB0O1xufVxuXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyA9IHNjcmlwdDtcbi8qIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9yZW5kZXJfXyA9IGZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fKCkge1xuICB2YXIgX3ZtID0gdGhpcztcblxuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQ7XG5cbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oO1xuXG4gIHJldHVybiBfYygndHJhbnNpdGlvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJuYW1lXCI6IF92bS5wcmVmaXhDbGFzcyArIFwiLXpvb20taW4tZG93blwiXG4gICAgfVxuICB9LCBbX3ZtLnZpc2libGUgPyBfYygnZGl2Jywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi1kYXRlcGlja2VyLW1haW4gXCIgKyBfdm0ucHJlZml4Q2xhc3MgKyBcIi1kYXRlcGlja2VyLXBvcHVwXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIHRvcDogX3ZtLnRvcCxcbiAgICAgIGxlZnQ6IF92bS5sZWZ0LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9XG4gIH0sIFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwgMikgOiBfdm0uX2UoKV0pO1xufTtcblxudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fID0gW107XG4vKiBzdHlsZSAqL1xuXG52YXIgX192dWVfaW5qZWN0X3N0eWxlc19fID0gdW5kZWZpbmVkO1xuLyogc2NvcGVkICovXG5cbnZhciBfX3Z1ZV9zY29wZV9pZF9fID0gdW5kZWZpbmVkO1xuLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cblxudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18gPSB1bmRlZmluZWQ7XG4vKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18gPSBmYWxzZTtcbi8qIHN0eWxlIGluamVjdCAqL1xuXG4vKiBzdHlsZSBpbmplY3QgU1NSICovXG5cbi8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovXG5cbnZhciBfX3Z1ZV9jb21wb25lbnRfXyA9IG5vcm1hbGl6ZUNvbXBvbmVudCh7XG4gIHJlbmRlcjogX192dWVfcmVuZGVyX18sXG4gIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX19cbn0sIF9fdnVlX2luamVjdF9zdHlsZXNfXywgX192dWVfc2NyaXB0X18sIF9fdnVlX3Njb3BlX2lkX18sIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXywgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXywgZmFsc2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuXG4vKiBzY3JpcHQgKi9cblxuLyogdGVtcGxhdGUgKi9cbnZhciBfX3Z1ZV9yZW5kZXJfXyQxID0gZnVuY3Rpb24gX192dWVfcmVuZGVyX18oKSB7XG4gIHZhciBfdm0gPSB0aGlzO1xuXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudDtcblxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2g7XG5cbiAgcmV0dXJuIF9jKCdzdmcnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwieG1sbnNcIjogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICAgICAgXCJ2aWV3Qm94XCI6IFwiMCAwIDEwMjQgMTAyNFwiLFxuICAgICAgXCJ3aWR0aFwiOiBcIjFlbVwiLFxuICAgICAgXCJoZWlnaHRcIjogXCIxZW1cIlxuICAgIH1cbiAgfSwgW19jKCdwYXRoJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImRcIjogXCJNOTQwLjIxODE4MiAxMDcuMDU0NTQ1aC0yMDkuNDU0NTQ2VjQ2LjU0NTQ1NWgtNjUuMTYzNjM2djYwLjUwOTA5SDM2My4wNTQ1NDVWNDYuNTQ1NDU1SDI5Ny44OTA5MDl2NjAuNTA5MDlIODMuNzgxODE4Yy0xOC42MTgxODIgMC0zMi41ODE4MTggMTMuOTYzNjM2LTMyLjU4MTgxOCAzMi41ODE4MTl2ODA1LjIzNjM2M2MwIDE4LjYxODE4MiAxMy45NjM2MzYgMzIuNTgxODE4IDMyLjU4MTgxOCAzMi41ODE4MThoODYxLjA5MDkwOWMxOC42MTgxODIgMCAzMi41ODE4MTgtMTMuOTYzNjM2IDMyLjU4MTgxOC0zMi41ODE4MThWMTM5LjYzNjM2NGMtNC42NTQ1NDUtMTguNjE4MTgyLTE4LjYxODE4Mi0zMi41ODE4MTgtMzcuMjM2MzYzLTMyLjU4MTgxOXpNMjk3Ljg5MDkwOSAxNzIuMjE4MTgyVjIzMi43MjcyNzNoNjUuMTYzNjM2VjE3Mi4yMTgxODJoMzA3LjJWMjMyLjcyNzI3M2g2NS4xNjM2MzdWMTcyLjIxODE4MmgxNzYuODcyNzI3djIwNC44SDExNi4zNjM2MzZWMTcyLjIxODE4MmgxODEuNTI3Mjczek0xMTYuMzYzNjM2IDkxMi4yOTA5MDlWNDQyLjE4MTgxOGg3OTUuOTI3MjczdjQ3MC4xMDkwOTFIMTE2LjM2MzYzNnpcIlxuICAgIH1cbiAgfSldKTtcbn07XG5cbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQxID0gW107XG4vKiBzdHlsZSAqL1xuXG52YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJDEgPSB1bmRlZmluZWQ7XG4vKiBzY29wZWQgKi9cblxudmFyIF9fdnVlX3Njb3BlX2lkX18kMSA9IHVuZGVmaW5lZDtcbi8qIG1vZHVsZSBpZGVudGlmaWVyICovXG5cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEgPSB1bmRlZmluZWQ7XG4vKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMSA9IGZhbHNlO1xuLyogc3R5bGUgaW5qZWN0ICovXG5cbi8qIHN0eWxlIGluamVjdCBTU1IgKi9cblxuLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi9cblxudmFyIF9fdnVlX2NvbXBvbmVudF9fJDEgPSBub3JtYWxpemVDb21wb25lbnQoe1xuICByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDEsXG4gIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kMVxufSwgX192dWVfaW5qZWN0X3N0eWxlc19fJDEsIHt9LCBfX3Z1ZV9zY29wZV9pZF9fJDEsIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQxLCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDEsIGZhbHNlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcblxuLyogc2NyaXB0ICovXG5cbi8qIHRlbXBsYXRlICovXG52YXIgX192dWVfcmVuZGVyX18kMiA9IGZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fKCkge1xuICB2YXIgX3ZtID0gdGhpcztcblxuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQ7XG5cbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oO1xuXG4gIHJldHVybiBfYygnc3ZnJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInhtbG5zXCI6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgICAgIFwidmlld0JveFwiOiBcIjAgMCAyNCAyNFwiLFxuICAgICAgXCJ3aWR0aFwiOiBcIjFlbVwiLFxuICAgICAgXCJoZWlnaHRcIjogXCIxZW1cIlxuICAgIH1cbiAgfSwgW19jKCdwYXRoJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImRcIjogXCJNMCAwaDI0djI0SDB6XCIsXG4gICAgICBcImZpbGxcIjogXCJub25lXCJcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygncGF0aCcsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJkXCI6IFwiTTExLjk5IDJDNi40NyAyIDIgNi40OCAyIDEyczQuNDcgMTAgOS45OSAxMEMxNy41MiAyMiAyMiAxNy41MiAyMiAxMlMxNy41MiAyIDExLjk5IDJ6TTEyIDIwYy00LjQyIDAtOC0zLjU4LTgtOHMzLjU4LTggOC04IDggMy41OCA4IDgtMy41OCA4LTggOHpcIlxuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdwYXRoJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImRcIjogXCJNMTIuNSA3SDExdjZsNS4yNSAzLjE1Ljc1LTEuMjMtNC41LTIuNjd6XCJcbiAgICB9XG4gIH0pXSk7XG59O1xuXG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kMiA9IFtdO1xuLyogc3R5bGUgKi9cblxudmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyQyID0gdW5kZWZpbmVkO1xuLyogc2NvcGVkICovXG5cbnZhciBfX3Z1ZV9zY29wZV9pZF9fJDIgPSB1bmRlZmluZWQ7XG4vKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQyID0gdW5kZWZpbmVkO1xuLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuXG52YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDIgPSBmYWxzZTtcbi8qIHN0eWxlIGluamVjdCAqL1xuXG4vKiBzdHlsZSBpbmplY3QgU1NSICovXG5cbi8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovXG5cbnZhciBfX3Z1ZV9jb21wb25lbnRfXyQyID0gbm9ybWFsaXplQ29tcG9uZW50KHtcbiAgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXyQyLFxuICBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDJcbn0sIF9fdnVlX2luamVjdF9zdHlsZXNfXyQyLCB7fSwgX192dWVfc2NvcGVfaWRfXyQyLCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMiwgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQyLCBmYWxzZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG5cbi8qIHNjcmlwdCAqL1xuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3JlbmRlcl9fJDMgPSBmdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXygpIHtcbiAgdmFyIF92bSA9IHRoaXM7XG5cbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50O1xuXG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaDtcblxuICByZXR1cm4gX2MoJ3N2ZycsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJ4bWxuc1wiOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gICAgICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gICAgICBcIndpZHRoXCI6IFwiMWVtXCIsXG4gICAgICBcImhlaWdodFwiOiBcIjFlbVwiXG4gICAgfVxuICB9LCBbX2MoJ3BhdGgnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiZFwiOiBcIk04MTAuMDA1MzMzIDI3NC4wMDUzMzNsLTIzNy45OTQ2NjcgMjM3Ljk5NDY2NyAyMzcuOTk0NjY3IDIzNy45OTQ2NjctNjAuMDEwNjY3IDYwLjAxMDY2Ny0yMzcuOTk0NjY3LTIzNy45OTQ2NjctMjM3Ljk5NDY2NyAyMzcuOTk0NjY3LTYwLjAxMDY2Ny02MC4wMTA2NjcgMjM3Ljk5NDY2Ny0yMzcuOTk0NjY3LTIzNy45OTQ2NjctMjM3Ljk5NDY2NyA2MC4wMTA2NjctNjAuMDEwNjY3IDIzNy45OTQ2NjcgMjM3Ljk5NDY2NyAyMzcuOTk0NjY3LTIzNy45OTQ2Njd6XCJcbiAgICB9XG4gIH0pXSk7XG59O1xuXG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kMyA9IFtdO1xuLyogc3R5bGUgKi9cblxudmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyQzID0gdW5kZWZpbmVkO1xuLyogc2NvcGVkICovXG5cbnZhciBfX3Z1ZV9zY29wZV9pZF9fJDMgPSB1bmRlZmluZWQ7XG4vKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQzID0gdW5kZWZpbmVkO1xuLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuXG52YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDMgPSBmYWxzZTtcbi8qIHN0eWxlIGluamVjdCAqL1xuXG4vKiBzdHlsZSBpbmplY3QgU1NSICovXG5cbi8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovXG5cbnZhciBfX3Z1ZV9jb21wb25lbnRfXyQzID0gbm9ybWFsaXplQ29tcG9uZW50KHtcbiAgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXyQzLFxuICBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDNcbn0sIF9fdnVlX2luamVjdF9zdHlsZXNfXyQzLCB7fSwgX192dWVfc2NvcGVfaWRfXyQzLCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kMywgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQzLCBmYWxzZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG5cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG52YXIgc2NyaXB0JDEgPSB7XG4gIHByb3BzOiB7XG4gICAgdHlwZTogU3RyaW5nLFxuICAgIGRpc2FibGVkOiBCb29sZWFuXG4gIH0sXG4gIGluamVjdDoge1xuICAgIHByZWZpeENsYXNzOiB7XG4gICAgICBkZWZhdWx0OiAnbXgnXG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyQxID0gc2NyaXB0JDE7XG4vKiB0ZW1wbGF0ZSAqL1xuXG52YXIgX192dWVfcmVuZGVyX18kNCA9IGZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fKCkge1xuICB2YXIgX3ZtID0gdGhpcztcblxuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQ7XG5cbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oO1xuXG4gIHJldHVybiBfYygnYnV0dG9uJywgX3ZtLl9nKHtcbiAgICBjbGFzczogW192bS5wcmVmaXhDbGFzcyArIFwiLWJ0biBcIiArIF92bS5wcmVmaXhDbGFzcyArIFwiLWJ0bi10ZXh0IFwiICsgX3ZtLnByZWZpeENsYXNzICsgXCItYnRuLWljb24tXCIgKyBfdm0udHlwZSwge1xuICAgICAgZGlzYWJsZWQ6IF92bS5kaXNhYmxlZFxuICAgIH1dLFxuICAgIGF0dHJzOiB7XG4gICAgICBcInR5cGVcIjogXCJidXR0b25cIixcbiAgICAgIFwiZGlzYWJsZWRcIjogX3ZtLmRpc2FibGVkXG4gICAgfVxuICB9LCBfdm0uJGxpc3RlbmVycyksIFtfYygnaScsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItaWNvbi1cIiArIF92bS50eXBlXG4gIH0pXSk7XG59O1xuXG52YXIgX192dWVfc3RhdGljUmVuZGVyRm5zX18kNCA9IFtdO1xuLyogc3R5bGUgKi9cblxudmFyIF9fdnVlX2luamVjdF9zdHlsZXNfXyQ0ID0gdW5kZWZpbmVkO1xuLyogc2NvcGVkICovXG5cbnZhciBfX3Z1ZV9zY29wZV9pZF9fJDQgPSB1bmRlZmluZWQ7XG4vKiBtb2R1bGUgaWRlbnRpZmllciAqL1xuXG52YXIgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ0ID0gdW5kZWZpbmVkO1xuLyogZnVuY3Rpb25hbCB0ZW1wbGF0ZSAqL1xuXG52YXIgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDQgPSBmYWxzZTtcbi8qIHN0eWxlIGluamVjdCAqL1xuXG4vKiBzdHlsZSBpbmplY3QgU1NSICovXG5cbi8qIHN0eWxlIGluamVjdCBzaGFkb3cgZG9tICovXG5cbnZhciBfX3Z1ZV9jb21wb25lbnRfXyQ0ID0gbm9ybWFsaXplQ29tcG9uZW50KHtcbiAgcmVuZGVyOiBfX3Z1ZV9yZW5kZXJfXyQ0LFxuICBzdGF0aWNSZW5kZXJGbnM6IF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDRcbn0sIF9fdnVlX2luamVjdF9zdHlsZXNfXyQ0LCBfX3Z1ZV9zY3JpcHRfXyQxLCBfX3Z1ZV9zY29wZV9pZF9fJDQsIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ0LCBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDQsIGZhbHNlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTtcblxudmFyIHNjcmlwdCQyID0ge1xuICBuYW1lOiAnVGFibGVEYXRlJyxcbiAgY29tcG9uZW50czoge1xuICAgIEljb25CdXR0b246IF9fdnVlX2NvbXBvbmVudF9fJDRcbiAgfSxcbiAgaW5qZWN0OiB7XG4gICAgZ2V0TG9jYWxlOiB7XG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldExvY2FsZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldFdlZWs6IHtcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gZ2V0V2VlaztcbiAgICAgIH1cbiAgICB9LFxuICAgIHByZWZpeENsYXNzOiB7XG4gICAgICBkZWZhdWx0OiAnbXgnXG4gICAgfSxcbiAgICBvbkRhdGVNb3VzZUVudGVyOiB7XG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIG9uRGF0ZU1vdXNlTGVhdmU6IHtcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZENhbGVuZGFyQ2hhbmdlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXI6IHtcbiAgICAgIHR5cGU6IERhdGUsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93V2Vla051bWJlcjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICB0aXRsZUZvcm1hdDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ1lZWVktTU0tREQnXG4gICAgfSxcbiAgICBnZXRSb3dDbGFzc2VzOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRDZWxsQ2xhc3Nlczoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBmaXJzdERheU9mV2VlazogZnVuY3Rpb24gZmlyc3REYXlPZldlZWsoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRMb2NhbGUoKS5mb3JtYXRMb2NhbGUuZmlyc3REYXlPZldlZWsgfHwgMDtcbiAgICB9LFxuICAgIHllYXJNb250aDogZnVuY3Rpb24geWVhck1vbnRoKCkge1xuICAgICAgdmFyIF90aGlzJGdldExvY2FsZSA9IHRoaXMuZ2V0TG9jYWxlKCksXG4gICAgICAgICAgeWVhckZvcm1hdCA9IF90aGlzJGdldExvY2FsZS55ZWFyRm9ybWF0LFxuICAgICAgICAgIG1vbnRoQmVmb3JlWWVhciA9IF90aGlzJGdldExvY2FsZS5tb250aEJlZm9yZVllYXIsXG4gICAgICAgICAgX3RoaXMkZ2V0TG9jYWxlJG1vbnRoID0gX3RoaXMkZ2V0TG9jYWxlLm1vbnRoRm9ybWF0LFxuICAgICAgICAgIG1vbnRoRm9ybWF0ID0gX3RoaXMkZ2V0TG9jYWxlJG1vbnRoID09PSB2b2lkIDAgPyAnTU1NJyA6IF90aGlzJGdldExvY2FsZSRtb250aDtcblxuICAgICAgdmFyIHllYXJMYWJlbCA9IHtcbiAgICAgICAgcGFuZWw6ICd5ZWFyJyxcbiAgICAgICAgbGFiZWw6IHRoaXMuZm9ybWF0RGF0ZSh0aGlzLmNhbGVuZGFyLCB5ZWFyRm9ybWF0KVxuICAgICAgfTtcbiAgICAgIHZhciBtb250aExhYmVsID0ge1xuICAgICAgICBwYW5lbDogJ21vbnRoJyxcbiAgICAgICAgbGFiZWw6IHRoaXMuZm9ybWF0RGF0ZSh0aGlzLmNhbGVuZGFyLCBtb250aEZvcm1hdClcbiAgICAgIH07XG4gICAgICByZXR1cm4gbW9udGhCZWZvcmVZZWFyID8gW21vbnRoTGFiZWwsIHllYXJMYWJlbF0gOiBbeWVhckxhYmVsLCBtb250aExhYmVsXTtcbiAgICB9LFxuICAgIGRheXM6IGZ1bmN0aW9uIGRheXMoKSB7XG4gICAgICB2YXIgbG9jYWxlID0gdGhpcy5nZXRMb2NhbGUoKTtcbiAgICAgIHZhciBkYXlzID0gbG9jYWxlLmRheXMgfHwgbG9jYWxlLmZvcm1hdExvY2FsZS53ZWVrZGF5c01pbjtcbiAgICAgIHJldHVybiBkYXlzLmNvbmNhdChkYXlzKS5zbGljZSh0aGlzLmZpcnN0RGF5T2ZXZWVrLCB0aGlzLmZpcnN0RGF5T2ZXZWVrICsgNyk7XG4gICAgfSxcbiAgICBkYXRlczogZnVuY3Rpb24gZGF0ZXMoKSB7XG4gICAgICB2YXIgeWVhciA9IHRoaXMuY2FsZW5kYXIuZ2V0RnVsbFllYXIoKTtcbiAgICAgIHZhciBtb250aCA9IHRoaXMuY2FsZW5kYXIuZ2V0TW9udGgoKTtcbiAgICAgIHZhciBhcnIgPSBnZXRDYWxlbmRhcih7XG4gICAgICAgIGZpcnN0RGF5T2ZXZWVrOiB0aGlzLmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICB5ZWFyOiB5ZWFyLFxuICAgICAgICBtb250aDogbW9udGhcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNodW5rKGFyciwgNyk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaXNEaXNhYmxlZEFycm93czogZnVuY3Rpb24gaXNEaXNhYmxlZEFycm93cyh0eXBlKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuY2FsZW5kYXIpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnbGFzdC15ZWFyJzpcbiAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSAtIDEsIGRhdGUuZ2V0TW9udGgoKSArIDEsIDApO1xuICAgICAgICAgIGRhdGUuc2V0SG91cnMoMjMsIDU5LCA1OSwgOTk5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICduZXh0LXllYXInOlxuICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgMSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbGFzdC1tb250aCc6XG4gICAgICAgICAgZGF0ZS5zZXRNb250aChkYXRlLmdldE1vbnRoKCksIDApO1xuICAgICAgICAgIGRhdGUuc2V0SG91cnMoMjMsIDU5LCA1OSwgOTk5KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICduZXh0LW1vbnRoJzpcbiAgICAgICAgICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZENhbGVuZGFyQ2hhbmdlcihkYXRlLCB0eXBlKTtcbiAgICB9LFxuICAgIGhhbmRsZUljb25MZWZ0Q2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUljb25MZWZ0Q2xpY2soKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VjYWxlbmRhcicsIHNldE1vbnRoKHRoaXMuY2FsZW5kYXIsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiB2IC0gMTtcbiAgICAgIH0pLCAnbGFzdC1tb250aCcpO1xuICAgIH0sXG4gICAgaGFuZGxlSWNvblJpZ2h0Q2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUljb25SaWdodENsaWNrKCkge1xuICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlY2FsZW5kYXInLCBzZXRNb250aCh0aGlzLmNhbGVuZGFyLCBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gdiArIDE7XG4gICAgICB9KSwgJ25leHQtbW9udGgnKTtcbiAgICB9LFxuICAgIGhhbmRsZUljb25Eb3VibGVMZWZ0Q2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUljb25Eb3VibGVMZWZ0Q2xpY2soKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VjYWxlbmRhcicsIHNldFllYXIodGhpcy5jYWxlbmRhciwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgLSAxO1xuICAgICAgfSksICdsYXN0LXllYXInKTtcbiAgICB9LFxuICAgIGhhbmRsZUljb25Eb3VibGVSaWdodENsaWNrOiBmdW5jdGlvbiBoYW5kbGVJY29uRG91YmxlUmlnaHRDbGljaygpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZWNhbGVuZGFyJywgc2V0WWVhcih0aGlzLmNhbGVuZGFyLCBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gdiArIDE7XG4gICAgICB9KSwgJ25leHQteWVhcicpO1xuICAgIH0sXG4gICAgaGFuZGxlUGFuZWxDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZVBhbmVsQ2hhbmdlKHBhbmVsKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VwYW5lbCcsIHBhbmVsKTtcbiAgICB9LFxuICAgIGhhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoY2VsbCkge1xuICAgICAgaWYgKHR5cGVvZiB0aGlzLm9uRGF0ZU1vdXNlRW50ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vbkRhdGVNb3VzZUVudGVyKGNlbGwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZShjZWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMub25EYXRlTW91c2VMZWF2ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLm9uRGF0ZU1vdXNlTGVhdmUoY2VsbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVDZWxsQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNlbGxDbGljayhldnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBldnQudGFyZ2V0O1xuXG4gICAgICBpZiAodGFyZ2V0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ0RJVicpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBpbmRleCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm93LWNvbCcpO1xuXG4gICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIF9pbmRleCRzcGxpdCRtYXAgPSBpbmRleC5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICAgIHJldHVybiBwYXJzZUludCh2LCAxMCk7XG4gICAgICAgIH0pLFxuICAgICAgICAgICAgX2luZGV4JHNwbGl0JG1hcDIgPSBfc2xpY2VkVG9BcnJheShfaW5kZXgkc3BsaXQkbWFwLCAyKSxcbiAgICAgICAgICAgIHJvdyA9IF9pbmRleCRzcGxpdCRtYXAyWzBdLFxuICAgICAgICAgICAgY29sID0gX2luZGV4JHNwbGl0JG1hcDJbMV07XG5cbiAgICAgICAgdmFyIGRhdGUgPSB0aGlzLmRhdGVzW3Jvd11bY29sXTtcbiAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0JywgbmV3IERhdGUoZGF0ZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZm9ybWF0RGF0ZTogZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlLCBmbXQpIHtcbiAgICAgIHJldHVybiBmb3JtYXQoZGF0ZSwgZm10LCB7XG4gICAgICAgIGxvY2FsZTogdGhpcy5nZXRMb2NhbGUoKS5mb3JtYXRMb2NhbGVcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0Q2VsbFRpdGxlOiBmdW5jdGlvbiBnZXRDZWxsVGl0bGUoZGF0ZSkge1xuICAgICAgdmFyIGZtdCA9IHRoaXMudGl0bGVGb3JtYXQ7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlKGRhdGUsIGZtdCk7XG4gICAgfSxcbiAgICBnZXRXZWVrTnVtYmVyOiBmdW5jdGlvbiBnZXRXZWVrTnVtYmVyKGRhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFdlZWsoZGF0ZSwgdGhpcy5nZXRMb2NhbGUoKS5mb3JtYXRMb2NhbGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18kMiA9IHNjcmlwdCQyO1xuLyogdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX3JlbmRlcl9fJDUgPSBmdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXygpIHtcbiAgdmFyIF92bSA9IHRoaXM7XG5cbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50O1xuXG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaDtcblxuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItY2FsZW5kYXIgXCIgKyBfdm0ucHJlZml4Q2xhc3MgKyBcIi1jYWxlbmRhci1wYW5lbC1kYXRlXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLWNhbGVuZGFyLWhlYWRlclwiXG4gIH0sIFtfYygnaWNvbi1idXR0b24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImRvdWJsZS1sZWZ0XCIsXG4gICAgICBcImRpc2FibGVkXCI6IF92bS5pc0Rpc2FibGVkQXJyb3dzKCdsYXN0LXllYXInKVxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmhhbmRsZUljb25Eb3VibGVMZWZ0Q2xpY2tcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnaWNvbi1idXR0b24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImxlZnRcIixcbiAgICAgIFwiZGlzYWJsZWRcIjogX3ZtLmlzRGlzYWJsZWRBcnJvd3MoJ2xhc3QtbW9udGgnKVxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmhhbmRsZUljb25MZWZ0Q2xpY2tcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnaWNvbi1idXR0b24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImRvdWJsZS1yaWdodFwiLFxuICAgICAgXCJkaXNhYmxlZFwiOiBfdm0uaXNEaXNhYmxlZEFycm93cygnbmV4dC15ZWFyJylcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IF92bS5oYW5kbGVJY29uRG91YmxlUmlnaHRDbGlja1xuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdpY29uLWJ1dHRvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwicmlnaHRcIixcbiAgICAgIFwiZGlzYWJsZWRcIjogX3ZtLmlzRGlzYWJsZWRBcnJvd3MoJ25leHQtbW9udGgnKVxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmhhbmRsZUljb25SaWdodENsaWNrXG4gICAgfVxuICB9KSwgX3ZtLl92KFwiIFwiKSwgX2MoJ3NwYW4nLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLWNhbGVuZGFyLWhlYWRlci1sYWJlbFwiXG4gIH0sIF92bS5fbChfdm0ueWVhck1vbnRoLCBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBfYygnYnV0dG9uJywge1xuICAgICAga2V5OiBpdGVtLnBhbmVsLFxuICAgICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLWJ0biBcIiArIF92bS5wcmVmaXhDbGFzcyArIFwiLWJ0bi10ZXh0IFwiICsgX3ZtLnByZWZpeENsYXNzICsgXCItYnRuLWN1cnJlbnQtXCIgKyBpdGVtLnBhbmVsLFxuICAgICAgYXR0cnM6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwiYnV0dG9uXCJcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBcImNsaWNrXCI6IGZ1bmN0aW9uIGNsaWNrKCRldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdm0uaGFuZGxlUGFuZWxDaGFuZ2UoaXRlbS5wYW5lbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbX3ZtLl92KFwiXFxuICAgICAgICBcIiArIF92bS5fcyhpdGVtLmxhYmVsKSArIFwiXFxuICAgICAgXCIpXSk7XG4gIH0pLCAwKV0sIDEpLCBfdm0uX3YoXCIgXCIpLCBfYygnZGl2Jywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi1jYWxlbmRhci1jb250ZW50XCJcbiAgfSwgW19jKCd0YWJsZScsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItdGFibGUgXCIgKyBfdm0ucHJlZml4Q2xhc3MgKyBcIi10YWJsZS1kYXRlXCJcbiAgfSwgW19jKCd0aGVhZCcsIFtfYygndHInLCBbX3ZtLnNob3dXZWVrTnVtYmVyID8gX2MoJ3RoJywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi13ZWVrLW51bWJlci1oZWFkZXJcIlxuICB9KSA6IF92bS5fZSgpLCBfdm0uX3YoXCIgXCIpLCBfdm0uX2woX3ZtLmRheXMsIGZ1bmN0aW9uIChkYXkpIHtcbiAgICByZXR1cm4gX2MoJ3RoJywge1xuICAgICAga2V5OiBkYXlcbiAgICB9LCBbX3ZtLl92KF92bS5fcyhkYXkpKV0pO1xuICB9KV0sIDIpXSksIF92bS5fdihcIiBcIiksIF9jKCd0Ym9keScsIHtcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGFuZGxlQ2VsbENsaWNrXG4gICAgfVxuICB9LCBfdm0uX2woX3ZtLmRhdGVzLCBmdW5jdGlvbiAocm93LCBpKSB7XG4gICAgcmV0dXJuIF9jKCd0cicsIHtcbiAgICAgIGtleTogaSxcbiAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENsYXNzICsgXCItZGF0ZS1yb3dcIiwgX3ZtLmdldFJvd0NsYXNzZXMocm93KV1cbiAgICB9LCBbX3ZtLnNob3dXZWVrTnVtYmVyID8gX2MoJ3RkJywge1xuICAgICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLXdlZWstbnVtYmVyXCIsXG4gICAgICBhdHRyczoge1xuICAgICAgICBcImRhdGEtcm93LWNvbFwiOiBpICsgXCIsMFwiXG4gICAgICB9XG4gICAgfSwgW192bS5fdihcIlxcbiAgICAgICAgICAgIFwiICsgX3ZtLl9zKF92bS5nZXRXZWVrTnVtYmVyKHJvd1swXSkpICsgXCJcXG4gICAgICAgICAgXCIpXSkgOiBfdm0uX2UoKSwgX3ZtLl92KFwiIFwiKSwgX3ZtLl9sKHJvdywgZnVuY3Rpb24gKGNlbGwsIGopIHtcbiAgICAgIHJldHVybiBfYygndGQnLCB7XG4gICAgICAgIGtleTogaixcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwiY2VsbFwiLFxuICAgICAgICBjbGFzczogX3ZtLmdldENlbGxDbGFzc2VzKGNlbGwpLFxuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIFwiZGF0YS1yb3ctY29sXCI6IGkgKyBcIixcIiArIGosXG4gICAgICAgICAgXCJ0aXRsZVwiOiBfdm0uZ2V0Q2VsbFRpdGxlKGNlbGwpXG4gICAgICAgIH0sXG4gICAgICAgIG9uOiB7XG4gICAgICAgICAgXCJtb3VzZWVudGVyXCI6IGZ1bmN0aW9uIG1vdXNlZW50ZXIoJGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3ZtLmhhbmRsZU1vdXNlRW50ZXIoY2VsbCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1vdXNlbGVhdmVcIjogZnVuY3Rpb24gbW91c2VsZWF2ZSgkZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdm0uaGFuZGxlTW91c2VMZWF2ZShjZWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIFtfYygnZGl2JywgW192bS5fdihfdm0uX3MoY2VsbC5nZXREYXRlKCkpKV0pXSk7XG4gICAgfSldLCAyKTtcbiAgfSksIDApXSldKV0pO1xufTtcblxudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDUgPSBbXTtcbi8qIHN0eWxlICovXG5cbnZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kNSA9IHVuZGVmaW5lZDtcbi8qIHNjb3BlZCAqL1xuXG52YXIgX192dWVfc2NvcGVfaWRfXyQ1ID0gdW5kZWZpbmVkO1xuLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cblxudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kNSA9IHVuZGVmaW5lZDtcbi8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ1ID0gZmFsc2U7XG4vKiBzdHlsZSBpbmplY3QgKi9cblxuLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuXG4vKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL1xuXG52YXIgX192dWVfY29tcG9uZW50X18kNSA9IG5vcm1hbGl6ZUNvbXBvbmVudCh7XG4gIHJlbmRlcjogX192dWVfcmVuZGVyX18kNSxcbiAgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQ1XG59LCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kNSwgX192dWVfc2NyaXB0X18kMiwgX192dWVfc2NvcGVfaWRfXyQ1LCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kNSwgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ1LCBmYWxzZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG5cbi8vXG52YXIgc2NyaXB0JDMgPSB7XG4gIG5hbWU6ICdUYWJsZU1vbnRoJyxcbiAgY29tcG9uZW50czoge1xuICAgIEljb25CdXR0b246IF9fdnVlX2NvbXBvbmVudF9fJDRcbiAgfSxcbiAgaW5qZWN0OiB7XG4gICAgZ2V0TG9jYWxlOiB7XG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldExvY2FsZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHByZWZpeENsYXNzOiB7XG4gICAgICBkZWZhdWx0OiAnbXgnXG4gICAgfVxuICB9LFxuICBwcm9wczoge1xuICAgIGRpc2FibGVkQ2FsZW5kYXJDaGFuZ2VyOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgdHlwZTogRGF0ZSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldENlbGxDbGFzc2VzOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGNhbGVuZGFyWWVhcjogZnVuY3Rpb24gY2FsZW5kYXJZZWFyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXIuZ2V0RnVsbFllYXIoKTtcbiAgICB9LFxuICAgIG1vbnRoczogZnVuY3Rpb24gbW9udGhzKCkge1xuICAgICAgdmFyIGxvY2FsZSA9IHRoaXMuZ2V0TG9jYWxlKCk7XG4gICAgICB2YXIgbW9udGhzTG9jYWxlID0gbG9jYWxlLm1vbnRocyB8fCBsb2NhbGUuZm9ybWF0TG9jYWxlLm1vbnRoc1Nob3J0O1xuICAgICAgdmFyIG1vbnRocyA9IG1vbnRoc0xvY2FsZS5tYXAoZnVuY3Rpb24gKHRleHQsIG1vbnRoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICBtb250aDogbW9udGhcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNodW5rKG1vbnRocywgMyk7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgaXNEaXNhYmxlZEFycm93czogZnVuY3Rpb24gaXNEaXNhYmxlZEFycm93cyh0eXBlKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuY2FsZW5kYXIpO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnbGFzdC15ZWFyJzpcbiAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMSk7XG4gICAgICAgICAgZGF0ZS5zZXRIb3VycygyMywgNTksIDU5LCA5OTkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ25leHQteWVhcic6XG4gICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyAxLCAwLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZWRDYWxlbmRhckNoYW5nZXIoZGF0ZSwgdHlwZSk7XG4gICAgfSxcbiAgICBoYW5kbGVJY29uRG91YmxlTGVmdENsaWNrOiBmdW5jdGlvbiBoYW5kbGVJY29uRG91YmxlTGVmdENsaWNrKCkge1xuICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlY2FsZW5kYXInLCBzZXRZZWFyKHRoaXMuY2FsZW5kYXIsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiB2IC0gMTtcbiAgICAgIH0pLCAnbGFzdC15ZWFyJyk7XG4gICAgfSxcbiAgICBoYW5kbGVJY29uRG91YmxlUmlnaHRDbGljazogZnVuY3Rpb24gaGFuZGxlSWNvbkRvdWJsZVJpZ2h0Q2xpY2soKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFuZ2VjYWxlbmRhcicsIHNldFllYXIodGhpcy5jYWxlbmRhciwgZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIHYgKyAxO1xuICAgICAgfSksICduZXh0LXllYXInKTtcbiAgICB9LFxuICAgIGhhbmRsZVBhbmVsQ2hhbmdlOiBmdW5jdGlvbiBoYW5kbGVQYW5lbENoYW5nZSgpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZXBhbmVsJywgJ3llYXInKTtcbiAgICB9LFxuICAgIGhhbmRsZUNsaWNrOiBmdW5jdGlvbiBoYW5kbGVDbGljayhldnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBldnQudGFyZ2V0O1xuXG4gICAgICBpZiAodGFyZ2V0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ0RJVicpIHtcbiAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICB9XG5cbiAgICAgIHZhciBtb250aCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbW9udGgnKTtcblxuICAgICAgaWYgKG1vbnRoICYmICF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdCcsIHBhcnNlSW50KG1vbnRoLCAxMCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18kMyA9IHNjcmlwdCQzO1xuLyogdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX3JlbmRlcl9fJDYgPSBmdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXygpIHtcbiAgdmFyIF92bSA9IHRoaXM7XG5cbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50O1xuXG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaDtcblxuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItY2FsZW5kYXIgXCIgKyBfdm0ucHJlZml4Q2xhc3MgKyBcIi1jYWxlbmRhci1wYW5lbC1tb250aFwiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi1jYWxlbmRhci1oZWFkZXJcIlxuICB9LCBbX2MoJ2ljb24tYnV0dG9uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInR5cGVcIjogXCJkb3VibGUtbGVmdFwiLFxuICAgICAgXCJkaXNhYmxlZFwiOiBfdm0uaXNEaXNhYmxlZEFycm93cygnbGFzdC15ZWFyJylcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBcImNsaWNrXCI6IF92bS5oYW5kbGVJY29uRG91YmxlTGVmdENsaWNrXG4gICAgfVxuICB9KSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2ljb24tYnV0dG9uJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcInR5cGVcIjogXCJkb3VibGUtcmlnaHRcIixcbiAgICAgIFwiZGlzYWJsZWRcIjogX3ZtLmlzRGlzYWJsZWRBcnJvd3MoJ25leHQteWVhcicpXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGFuZGxlSWNvbkRvdWJsZVJpZ2h0Q2xpY2tcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnc3BhbicsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItY2FsZW5kYXItaGVhZGVyLWxhYmVsXCJcbiAgfSwgW19jKCdidXR0b24nLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLWJ0biBcIiArIF92bS5wcmVmaXhDbGFzcyArIFwiLWJ0bi10ZXh0XCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGFuZGxlUGFuZWxDaGFuZ2VcbiAgICB9XG4gIH0sIFtfdm0uX3YoXCJcXG4gICAgICAgIFwiICsgX3ZtLl9zKF92bS5jYWxlbmRhclllYXIpICsgXCJcXG4gICAgICBcIildKV0pXSwgMSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLWNhbGVuZGFyLWNvbnRlbnRcIlxuICB9LCBbX2MoJ3RhYmxlJywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi10YWJsZSBcIiArIF92bS5wcmVmaXhDbGFzcyArIFwiLXRhYmxlLW1vbnRoXCIsXG4gICAgb246IHtcbiAgICAgIFwiY2xpY2tcIjogX3ZtLmhhbmRsZUNsaWNrXG4gICAgfVxuICB9LCBfdm0uX2woX3ZtLm1vbnRocywgZnVuY3Rpb24gKHJvdywgaSkge1xuICAgIHJldHVybiBfYygndHInLCB7XG4gICAgICBrZXk6IGlcbiAgICB9LCBfdm0uX2wocm93LCBmdW5jdGlvbiAoY2VsbCwgaikge1xuICAgICAgcmV0dXJuIF9jKCd0ZCcsIHtcbiAgICAgICAga2V5OiBqLFxuICAgICAgICBzdGF0aWNDbGFzczogXCJjZWxsXCIsXG4gICAgICAgIGNsYXNzOiBfdm0uZ2V0Q2VsbENsYXNzZXMoY2VsbC5tb250aCksXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgXCJkYXRhLW1vbnRoXCI6IGNlbGwubW9udGhcbiAgICAgICAgfVxuICAgICAgfSwgW19jKCdkaXYnLCBbX3ZtLl92KF92bS5fcyhjZWxsLnRleHQpKV0pXSk7XG4gICAgfSksIDApO1xuICB9KSwgMCldKV0pO1xufTtcblxudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJDYgPSBbXTtcbi8qIHN0eWxlICovXG5cbnZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kNiA9IHVuZGVmaW5lZDtcbi8qIHNjb3BlZCAqL1xuXG52YXIgX192dWVfc2NvcGVfaWRfXyQ2ID0gdW5kZWZpbmVkO1xuLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cblxudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kNiA9IHVuZGVmaW5lZDtcbi8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyQ2ID0gZmFsc2U7XG4vKiBzdHlsZSBpbmplY3QgKi9cblxuLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuXG4vKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL1xuXG52YXIgX192dWVfY29tcG9uZW50X18kNiA9IG5vcm1hbGl6ZUNvbXBvbmVudCh7XG4gIHJlbmRlcjogX192dWVfcmVuZGVyX18kNixcbiAgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQ2XG59LCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kNiwgX192dWVfc2NyaXB0X18kMywgX192dWVfc2NvcGVfaWRfXyQ2LCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kNiwgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyQ2LCBmYWxzZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG5cbi8vXG52YXIgc2NyaXB0JDQgPSB7XG4gIG5hbWU6ICdUYWJsZVllYXInLFxuICBjb21wb25lbnRzOiB7XG4gICAgSWNvbkJ1dHRvbjogX192dWVfY29tcG9uZW50X18kNFxuICB9LFxuICBpbmplY3Q6IHtcbiAgICBwcmVmaXhDbGFzczoge1xuICAgICAgZGVmYXVsdDogJ214J1xuICAgIH1cbiAgfSxcbiAgcHJvcHM6IHtcbiAgICBkaXNhYmxlZENhbGVuZGFyQ2hhbmdlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2FsZW5kYXI6IHtcbiAgICAgIHR5cGU6IERhdGUsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRDZWxsQ2xhc3Nlczoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0WWVhclBhbmVsOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvblxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICB5ZWFyczogZnVuY3Rpb24geWVhcnMoKSB7XG4gICAgICB2YXIgY2FsZW5kYXIgPSBuZXcgRGF0ZSh0aGlzLmNhbGVuZGFyKTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLmdldFllYXJQYW5lbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRZZWFyUGFuZWwoY2FsZW5kYXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5nZXRZZWFycyhjYWxlbmRhcik7XG4gICAgfSxcbiAgICBmaXJzdFllYXI6IGZ1bmN0aW9uIGZpcnN0WWVhcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnllYXJzWzBdWzBdO1xuICAgIH0sXG4gICAgbGFzdFllYXI6IGZ1bmN0aW9uIGxhc3RZZWFyKCkge1xuICAgICAgdmFyIGxhc3QgPSBmdW5jdGlvbiBsYXN0KGFycikge1xuICAgICAgICByZXR1cm4gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBsYXN0KGxhc3QodGhpcy55ZWFycykpO1xuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGlzRGlzYWJsZWRBcnJvd3M6IGZ1bmN0aW9uIGlzRGlzYWJsZWRBcnJvd3ModHlwZSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmNhbGVuZGFyKTtcblxuICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2xhc3QtZGVjYWRlJzpcbiAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHRoaXMuZmlyc3RZZWFyIC0gMSwgMTEsIDMxKTtcbiAgICAgICAgICBkYXRlLnNldEhvdXJzKDIzLCA1OSwgNTksIDk5OSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbmV4dC1kZWNhZGUnOlxuICAgICAgICAgIGRhdGUuc2V0RnVsbFllYXIodGhpcy5sYXN0WWVhciArIDEsIDAsIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZENhbGVuZGFyQ2hhbmdlcihkYXRlLCB0eXBlKTtcbiAgICB9LFxuICAgIGdldFllYXJzOiBmdW5jdGlvbiBnZXRZZWFycyhjYWxlbmRhcikge1xuICAgICAgdmFyIGZpcnN0WWVhciA9IE1hdGguZmxvb3IoY2FsZW5kYXIuZ2V0RnVsbFllYXIoKSAvIDEwKSAqIDEwO1xuICAgICAgdmFyIHllYXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICB5ZWFycy5wdXNoKGZpcnN0WWVhciArIGkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2h1bmsoeWVhcnMsIDIpO1xuICAgIH0sXG4gICAgaGFuZGxlSWNvbkRvdWJsZUxlZnRDbGljazogZnVuY3Rpb24gaGFuZGxlSWNvbkRvdWJsZUxlZnRDbGljaygpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZWNhbGVuZGFyJywgc2V0WWVhcih0aGlzLmNhbGVuZGFyLCBmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gdiAtIDEwO1xuICAgICAgfSksICdsYXN0LWRlY2FkZScpO1xuICAgIH0sXG4gICAgaGFuZGxlSWNvbkRvdWJsZVJpZ2h0Q2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUljb25Eb3VibGVSaWdodENsaWNrKCkge1xuICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlY2FsZW5kYXInLCBzZXRZZWFyKHRoaXMuY2FsZW5kYXIsIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiB2ICsgMTA7XG4gICAgICB9KSwgJ25leHQtZGVjYWRlJyk7XG4gICAgfSxcbiAgICBoYW5kbGVDbGljazogZnVuY3Rpb24gaGFuZGxlQ2xpY2soZXZ0KSB7XG4gICAgICB2YXIgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcblxuICAgICAgaWYgKHRhcmdldC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdESVYnKSB7XG4gICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICB2YXIgeWVhciA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEteWVhcicpO1xuXG4gICAgICBpZiAoeWVhciAmJiAhdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgICB0aGlzLiRlbWl0KCdzZWxlY3QnLCBwYXJzZUludCh5ZWFyLCAxMCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18kNCA9IHNjcmlwdCQ0O1xuLyogdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX3JlbmRlcl9fJDcgPSBmdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXygpIHtcbiAgdmFyIF92bSA9IHRoaXM7XG5cbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50O1xuXG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaDtcblxuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItY2FsZW5kYXIgXCIgKyBfdm0ucHJlZml4Q2xhc3MgKyBcIi1jYWxlbmRhci1wYW5lbC15ZWFyXCJcbiAgfSwgW19jKCdkaXYnLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLWNhbGVuZGFyLWhlYWRlclwiXG4gIH0sIFtfYygnaWNvbi1idXR0b24nLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImRvdWJsZS1sZWZ0XCIsXG4gICAgICBcImRpc2FibGVkXCI6IF92bS5pc0Rpc2FibGVkQXJyb3dzKCdsYXN0LWRlY2FkZScpXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGFuZGxlSWNvbkRvdWJsZUxlZnRDbGlja1xuICAgIH1cbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdpY29uLWJ1dHRvbicsIHtcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwiZG91YmxlLXJpZ2h0XCIsXG4gICAgICBcImRpc2FibGVkXCI6IF92bS5pc0Rpc2FibGVkQXJyb3dzKCduZXh0LWRlY2FkZScpXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGFuZGxlSWNvbkRvdWJsZVJpZ2h0Q2xpY2tcbiAgICB9XG4gIH0pLCBfdm0uX3YoXCIgXCIpLCBfYygnc3BhbicsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItY2FsZW5kYXItaGVhZGVyLWxhYmVsXCJcbiAgfSwgW19jKCdzcGFuJywgW192bS5fdihfdm0uX3MoX3ZtLmZpcnN0WWVhcikpXSksIF92bS5fdihcIiBcIiksIF9jKCdzcGFuJywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi1jYWxlbmRhci1kZWNhZGUtc2VwYXJhdG9yXCJcbiAgfSksIF92bS5fdihcIiBcIiksIF9jKCdzcGFuJywgW192bS5fdihfdm0uX3MoX3ZtLmxhc3RZZWFyKSldKV0pXSwgMSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLWNhbGVuZGFyLWNvbnRlbnRcIlxuICB9LCBbX2MoJ3RhYmxlJywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi10YWJsZSBcIiArIF92bS5wcmVmaXhDbGFzcyArIFwiLXRhYmxlLXllYXJcIixcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGFuZGxlQ2xpY2tcbiAgICB9XG4gIH0sIF92bS5fbChfdm0ueWVhcnMsIGZ1bmN0aW9uIChyb3csIGkpIHtcbiAgICByZXR1cm4gX2MoJ3RyJywge1xuICAgICAga2V5OiBpXG4gICAgfSwgX3ZtLl9sKHJvdywgZnVuY3Rpb24gKGNlbGwsIGopIHtcbiAgICAgIHJldHVybiBfYygndGQnLCB7XG4gICAgICAgIGtleTogaixcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwiY2VsbFwiLFxuICAgICAgICBjbGFzczogX3ZtLmdldENlbGxDbGFzc2VzKGNlbGwpLFxuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIFwiZGF0YS15ZWFyXCI6IGNlbGxcbiAgICAgICAgfVxuICAgICAgfSwgW19jKCdkaXYnLCBbX3ZtLl92KF92bS5fcyhjZWxsKSldKV0pO1xuICAgIH0pLCAwKTtcbiAgfSksIDApXSldKTtcbn07XG5cbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQ3ID0gW107XG4vKiBzdHlsZSAqL1xuXG52YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJDcgPSB1bmRlZmluZWQ7XG4vKiBzY29wZWQgKi9cblxudmFyIF9fdnVlX3Njb3BlX2lkX18kNyA9IHVuZGVmaW5lZDtcbi8qIG1vZHVsZSBpZGVudGlmaWVyICovXG5cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDcgPSB1bmRlZmluZWQ7XG4vKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kNyA9IGZhbHNlO1xuLyogc3R5bGUgaW5qZWN0ICovXG5cbi8qIHN0eWxlIGluamVjdCBTU1IgKi9cblxuLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi9cblxudmFyIF9fdnVlX2NvbXBvbmVudF9fJDcgPSBub3JtYWxpemVDb21wb25lbnQoe1xuICByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDcsXG4gIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kN1xufSwgX192dWVfaW5qZWN0X3N0eWxlc19fJDcsIF9fdnVlX3NjcmlwdF9fJDQsIF9fdnVlX3Njb3BlX2lkX18kNywgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDcsIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kNywgZmFsc2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuXG52YXIgQ2FsZW5kYXJQYW5lbCA9IHtcbiAgbmFtZTogJ0NhbGVuZGFyUGFuZWwnLFxuICBpbmplY3Q6IHtcbiAgICBwcmVmaXhDbGFzczoge1xuICAgICAgZGVmYXVsdDogJ214J1xuICAgIH0sXG4gICAgZGlzcGF0Y2hEYXRlUGlja2VyOiB7XG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHt9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge30sXG4gICAgZGVmYXVsdFZhbHVlOiB7XG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlZmF1bHRQYW5lbDoge1xuICAgICAgdHlwZTogU3RyaW5nXG4gICAgfSxcbiAgICBkaXNhYmxlZENhbGVuZGFyQ2hhbmdlcjoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlzYWJsZWREYXRlOiB7XG4gICAgICB0eXBlOiBGdW5jdGlvbixcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGF0ZSdcbiAgICB9LFxuICAgIGdldENsYXNzZXM6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNob3dXZWVrTnVtYmVyOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfSxcbiAgICBnZXRZZWFyUGFuZWw6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uXG4gICAgfSxcbiAgICB0aXRsZUZvcm1hdDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ1lZWVktTU0tREQnXG4gICAgfSxcbiAgICBjYWxlbmRhcjogRGF0ZSxcbiAgICAvLyB1cGRhdGUgZGF0ZSB3aGVuIHNlbGVjdCB5ZWFyIG9yIG1vbnRoXG4gICAgcGFydGlhbFVwZGF0ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgIHZhciBwYW5lbHMgPSBbJ2RhdGUnLCAnbW9udGgnLCAneWVhciddO1xuICAgIHZhciBpbmRleCA9IE1hdGgubWF4KHBhbmVscy5pbmRleE9mKHRoaXMudHlwZSksIHBhbmVscy5pbmRleE9mKHRoaXMuZGVmYXVsdFBhbmVsKSk7XG4gICAgdmFyIHBhbmVsID0gaW5kZXggIT09IC0xID8gcGFuZWxzW2luZGV4XSA6ICdkYXRlJztcbiAgICByZXR1cm4ge1xuICAgICAgcGFuZWw6IHBhbmVsLFxuICAgICAgaW5uZXJDYWxlbmRhcjogbmV3IERhdGUoKVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgaW5uZXJWYWx1ZTogZnVuY3Rpb24gaW5uZXJWYWx1ZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IEFycmF5LmlzQXJyYXkodGhpcy52YWx1ZSkgPyB0aGlzLnZhbHVlIDogW3RoaXMudmFsdWVdO1xuICAgICAgdmFyIG1hcCA9IHtcbiAgICAgICAgeWVhcjogc3RhcnRPZlllYXIsXG4gICAgICAgIG1vbnRoOiBzdGFydE9mTW9udGgsXG4gICAgICAgIGRhdGU6IHN0YXJ0T2ZEYXlcbiAgICAgIH07XG4gICAgICB2YXIgc3RhcnQgPSBtYXBbdGhpcy50eXBlXSB8fCBtYXAuZGF0ZTtcbiAgICAgIHJldHVybiB2YWx1ZS5maWx0ZXIoaXNWYWxpZERhdGUpLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gc3RhcnQodik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNhbGVuZGFyWWVhcjogZnVuY3Rpb24gY2FsZW5kYXJZZWFyKCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5uZXJDYWxlbmRhci5nZXRGdWxsWWVhcigpO1xuICAgIH0sXG4gICAgY2FsZW5kYXJNb250aDogZnVuY3Rpb24gY2FsZW5kYXJNb250aCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmlubmVyQ2FsZW5kYXIuZ2V0TW9udGgoKTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcbiAgICAgIGhhbmRsZXI6ICdpbml0Q2FsZW5kYXInXG4gICAgfSxcbiAgICBjYWxlbmRhcjoge1xuICAgICAgaGFuZGxlcjogJ2luaXRDYWxlbmRhcidcbiAgICB9LFxuICAgIGRlZmF1bHRWYWx1ZToge1xuICAgICAgaGFuZGxlcjogJ2luaXRDYWxlbmRhcidcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBpbml0Q2FsZW5kYXI6IGZ1bmN0aW9uIGluaXRDYWxlbmRhcigpIHtcbiAgICAgIHZhciBjYWxlbmRhckRhdGUgPSB0aGlzLmNhbGVuZGFyO1xuXG4gICAgICBpZiAoIWlzVmFsaWREYXRlKGNhbGVuZGFyRGF0ZSkpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHRoaXMuaW5uZXJWYWx1ZS5sZW5ndGg7XG4gICAgICAgIGNhbGVuZGFyRGF0ZSA9IGdldFZhbGlkRGF0ZShsZW5ndGggPiAwID8gdGhpcy5pbm5lclZhbHVlW2xlbmd0aCAtIDFdIDogdGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmlubmVyQ2FsZW5kYXIgPSBzdGFydE9mTW9udGgoY2FsZW5kYXJEYXRlKTtcbiAgICB9LFxuICAgIGlzRGlzYWJsZWQ6IGZ1bmN0aW9uIGlzRGlzYWJsZWQoZGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZWREYXRlKG5ldyBEYXRlKGRhdGUpLCB0aGlzLmlubmVyVmFsdWUpO1xuICAgIH0sXG4gICAgZW1pdERhdGU6IGZ1bmN0aW9uIGVtaXREYXRlKGRhdGUsIHR5cGUpIHtcbiAgICAgIGlmICghdGhpcy5pc0Rpc2FibGVkKGRhdGUpKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdCcsIGRhdGUsIHR5cGUsIHRoaXMuaW5uZXJWYWx1ZSk7IC8vIHNvbWVvbmUgbmVlZCBnZXQgdGhlIGZpcnN0IHNlbGVjdGVkIGRhdGUgdG8gc2V0IHJhbmdlIHZhbHVlLiAoIzQyOSlcblxuICAgICAgICB0aGlzLmRpc3BhdGNoRGF0ZVBpY2tlcigncGljaycsIGRhdGUsIHR5cGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlQ2FsZW5kYXJDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUNhbGVuZGFyQ2hhbmdlKGNhbGVuZGFyLCB0eXBlKSB7XG4gICAgICB2YXIgb2xkQ2FsZW5kYXIgPSBuZXcgRGF0ZSh0aGlzLmlubmVyQ2FsZW5kYXIpO1xuICAgICAgdGhpcy5pbm5lckNhbGVuZGFyID0gY2FsZW5kYXI7XG4gICAgICB0aGlzLiRlbWl0KCd1cGRhdGU6Y2FsZW5kYXInLCBjYWxlbmRhcik7XG4gICAgICB0aGlzLmRpc3BhdGNoRGF0ZVBpY2tlcignY2FsZW5kYXItY2hhbmdlJywgY2FsZW5kYXIsIG9sZENhbGVuZGFyLCB0eXBlKTtcbiAgICB9LFxuICAgIGhhbmRlbFBhbmVsQ2hhbmdlOiBmdW5jdGlvbiBoYW5kZWxQYW5lbENoYW5nZShwYW5lbCkge1xuICAgICAgdmFyIG9sZFBhbmVsID0gdGhpcy5wYW5lbDtcbiAgICAgIHRoaXMucGFuZWwgPSBwYW5lbDtcbiAgICAgIHRoaXMuZGlzcGF0Y2hEYXRlUGlja2VyKCdwYW5lbC1jaGFuZ2UnLCBwYW5lbCwgb2xkUGFuZWwpO1xuICAgIH0sXG4gICAgaGFuZGxlU2VsZWN0WWVhcjogZnVuY3Rpb24gaGFuZGxlU2VsZWN0WWVhcih5ZWFyKSB7XG4gICAgICBpZiAodGhpcy50eXBlID09PSAneWVhcicpIHtcbiAgICAgICAgdmFyIGRhdGUgPSB0aGlzLmdldFllYXJDZWxsRGF0ZSh5ZWFyKTtcbiAgICAgICAgdGhpcy5lbWl0RGF0ZShkYXRlLCAneWVhcicpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDYWxlbmRhckNoYW5nZShjcmVhdGVEYXRlKHllYXIsIHRoaXMuY2FsZW5kYXJNb250aCksICd5ZWFyJyk7XG4gICAgICAgIHRoaXMuaGFuZGVsUGFuZWxDaGFuZ2UoJ21vbnRoJyk7XG5cbiAgICAgICAgaWYgKHRoaXMucGFydGlhbFVwZGF0ZSAmJiB0aGlzLmlubmVyVmFsdWUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdmFyIF9kYXRlID0gbmV3IERhdGUodGhpcy5pbm5lclZhbHVlWzBdKTtcblxuICAgICAgICAgIF9kYXRlLnNldEZ1bGxZZWFyKHllYXIpO1xuXG4gICAgICAgICAgdGhpcy5lbWl0RGF0ZShfZGF0ZSwgJ3llYXInKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlU2VsZWN0TW9udGg6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdE1vbnRoKG1vbnRoKSB7XG4gICAgICBpZiAodGhpcy50eXBlID09PSAnbW9udGgnKSB7XG4gICAgICAgIHZhciBkYXRlID0gdGhpcy5nZXRNb250aENlbGxEYXRlKG1vbnRoKTtcbiAgICAgICAgdGhpcy5lbWl0RGF0ZShkYXRlLCAnbW9udGgnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2FsZW5kYXJDaGFuZ2UoY3JlYXRlRGF0ZSh0aGlzLmNhbGVuZGFyWWVhciwgbW9udGgpLCAnbW9udGgnKTtcbiAgICAgICAgdGhpcy5oYW5kZWxQYW5lbENoYW5nZSgnZGF0ZScpO1xuXG4gICAgICAgIGlmICh0aGlzLnBhcnRpYWxVcGRhdGUgJiYgdGhpcy5pbm5lclZhbHVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHZhciBfZGF0ZTIgPSBuZXcgRGF0ZSh0aGlzLmlubmVyVmFsdWVbMF0pO1xuXG4gICAgICAgICAgX2RhdGUyLnNldEZ1bGxZZWFyKHRoaXMuY2FsZW5kYXJZZWFyKTtcblxuICAgICAgICAgIHRoaXMuZW1pdERhdGUoc2V0TW9udGgoX2RhdGUyLCBtb250aCksICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVTZWxlY3REYXRlOiBmdW5jdGlvbiBoYW5kbGVTZWxlY3REYXRlKGRhdGUpIHtcbiAgICAgIHRoaXMuZW1pdERhdGUoZGF0ZSwgdGhpcy50eXBlID09PSAnd2VlaycgPyAnd2VlaycgOiAnZGF0ZScpO1xuICAgIH0sXG4gICAgZ2V0TW9udGhDZWxsRGF0ZTogZnVuY3Rpb24gZ2V0TW9udGhDZWxsRGF0ZShtb250aCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZURhdGUodGhpcy5jYWxlbmRhclllYXIsIG1vbnRoKTtcbiAgICB9LFxuICAgIGdldFllYXJDZWxsRGF0ZTogZnVuY3Rpb24gZ2V0WWVhckNlbGxEYXRlKHllYXIpIHtcbiAgICAgIHJldHVybiBjcmVhdGVEYXRlKHllYXIsIDApO1xuICAgIH0sXG4gICAgZ2V0RGF0ZUNsYXNzZXM6IGZ1bmN0aW9uIGdldERhdGVDbGFzc2VzKGNlbGxEYXRlKSB7XG4gICAgICB2YXIgbm90Q3VycmVudE1vbnRoID0gY2VsbERhdGUuZ2V0TW9udGgoKSAhPT0gdGhpcy5jYWxlbmRhck1vbnRoO1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXTtcblxuICAgICAgaWYgKGNlbGxEYXRlLmdldFRpbWUoKSA9PT0gbmV3IERhdGUoKS5zZXRIb3VycygwLCAwLCAwLCAwKSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goJ3RvZGF5Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChub3RDdXJyZW50TW9udGgpIHtcbiAgICAgICAgY2xhc3Nlcy5wdXNoKCdub3QtY3VycmVudC1tb250aCcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhdGUgPSB0aGlzLmdldFN0YXRlQ2xhc3MoY2VsbERhdGUpO1xuXG4gICAgICBpZiAoIShzdGF0ZSA9PT0gJ2FjdGl2ZScgJiYgbm90Q3VycmVudE1vbnRoKSkge1xuICAgICAgICBjbGFzc2VzLnB1c2goc3RhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xhc3Nlcy5jb25jYXQodGhpcy5nZXRDbGFzc2VzKGNlbGxEYXRlLCB0aGlzLmlubmVyVmFsdWUsIGNsYXNzZXMuam9pbignICcpKSk7XG4gICAgfSxcbiAgICBnZXRNb250aENsYXNzZXM6IGZ1bmN0aW9uIGdldE1vbnRoQ2xhc3Nlcyhtb250aCkge1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXTtcblxuICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ21vbnRoJykge1xuICAgICAgICBpZiAodGhpcy5jYWxlbmRhck1vbnRoID09PSBtb250aCkge1xuICAgICAgICAgIGNsYXNzZXMucHVzaCgnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2NlbGxEYXRlID0gdGhpcy5nZXRNb250aENlbGxEYXRlKG1vbnRoKTtcblxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZENhbGVuZGFyQ2hhbmdlcihfY2VsbERhdGUsICdtb250aCcpKSB7XG4gICAgICAgICAgY2xhc3Nlcy5wdXNoKCdkaXNhYmxlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBjZWxsRGF0ZSA9IHRoaXMuZ2V0TW9udGhDZWxsRGF0ZShtb250aCk7XG4gICAgICBjbGFzc2VzLnB1c2godGhpcy5nZXRTdGF0ZUNsYXNzKGNlbGxEYXRlKSk7XG4gICAgICByZXR1cm4gY2xhc3Nlcy5jb25jYXQodGhpcy5nZXRDbGFzc2VzKGNlbGxEYXRlLCB0aGlzLmlubmVyVmFsdWUsIGNsYXNzZXMuam9pbignICcpKSk7XG4gICAgfSxcbiAgICBnZXRZZWFyQ2xhc3NlczogZnVuY3Rpb24gZ2V0WWVhckNsYXNzZXMoeWVhcikge1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXTtcblxuICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ3llYXInKSB7XG4gICAgICAgIGlmICh0aGlzLmNhbGVuZGFyWWVhciA9PT0geWVhcikge1xuICAgICAgICAgIGNsYXNzZXMucHVzaCgnYWN0aXZlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2NlbGxEYXRlMiA9IHRoaXMuZ2V0WWVhckNlbGxEYXRlKHllYXIpO1xuXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkQ2FsZW5kYXJDaGFuZ2VyKF9jZWxsRGF0ZTIsICd5ZWFyJykpIHtcbiAgICAgICAgICBjbGFzc2VzLnB1c2goJ2Rpc2FibGVkJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2xhc3NlcztcbiAgICAgIH1cblxuICAgICAgdmFyIGNlbGxEYXRlID0gdGhpcy5nZXRZZWFyQ2VsbERhdGUoeWVhcik7XG4gICAgICBjbGFzc2VzLnB1c2godGhpcy5nZXRTdGF0ZUNsYXNzKGNlbGxEYXRlKSk7XG4gICAgICByZXR1cm4gY2xhc3Nlcy5jb25jYXQodGhpcy5nZXRDbGFzc2VzKGNlbGxEYXRlLCB0aGlzLmlubmVyVmFsdWUsIGNsYXNzZXMuam9pbignICcpKSk7XG4gICAgfSxcbiAgICBnZXRTdGF0ZUNsYXNzOiBmdW5jdGlvbiBnZXRTdGF0ZUNsYXNzKGNlbGxEYXRlKSB7XG4gICAgICBpZiAodGhpcy5pc0Rpc2FibGVkKGNlbGxEYXRlKSkge1xuICAgICAgICByZXR1cm4gJ2Rpc2FibGVkJztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaW5uZXJWYWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHJldHVybiB2LmdldFRpbWUoKSA9PT0gY2VsbERhdGUuZ2V0VGltZSgpO1xuICAgICAgfSkpIHtcbiAgICAgICAgcmV0dXJuICdhY3RpdmUnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJyc7XG4gICAgfSxcbiAgICBnZXRXZWVrU3RhdGU6IGZ1bmN0aW9uIGdldFdlZWtTdGF0ZShyb3cpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgIT09ICd3ZWVrJykgcmV0dXJuICcnO1xuICAgICAgdmFyIHN0YXJ0ID0gcm93WzBdLmdldFRpbWUoKTtcbiAgICAgIHZhciBlbmQgPSByb3dbNl0uZ2V0VGltZSgpO1xuICAgICAgdmFyIGFjdGl2ZSA9IHRoaXMuaW5uZXJWYWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHZhciB0aW1lID0gdi5nZXRUaW1lKCk7XG4gICAgICAgIHJldHVybiB0aW1lID49IHN0YXJ0ICYmIHRpbWUgPD0gZW5kO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYWN0aXZlID8gXCJcIi5jb25jYXQodGhpcy5wcmVmaXhDbGFzcywgXCItYWN0aXZlLXdlZWtcIikgOiAnJztcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBoID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBwYW5lbCA9IHRoaXMucGFuZWwsXG4gICAgICAgIGlubmVyQ2FsZW5kYXIgPSB0aGlzLmlubmVyQ2FsZW5kYXI7XG5cbiAgICBpZiAocGFuZWwgPT09ICd5ZWFyJykge1xuICAgICAgcmV0dXJuIGgoX192dWVfY29tcG9uZW50X18kNywge1xuICAgICAgICBcImF0dHJzXCI6IHtcbiAgICAgICAgICBcImRpc2FibGVkQ2FsZW5kYXJDaGFuZ2VyXCI6IHRoaXMuZGlzYWJsZWRDYWxlbmRhckNoYW5nZXIsXG4gICAgICAgICAgXCJjYWxlbmRhclwiOiBpbm5lckNhbGVuZGFyLFxuICAgICAgICAgIFwiZ2V0Q2VsbENsYXNzZXNcIjogdGhpcy5nZXRZZWFyQ2xhc3NlcyxcbiAgICAgICAgICBcImdldFllYXJQYW5lbFwiOiB0aGlzLmdldFllYXJQYW5lbFxuICAgICAgICB9LFxuICAgICAgICBcIm9uXCI6IHtcbiAgICAgICAgICBcInNlbGVjdFwiOiB0aGlzLmhhbmRsZVNlbGVjdFllYXIsXG4gICAgICAgICAgXCJjaGFuZ2VjYWxlbmRhclwiOiB0aGlzLmhhbmRsZUNhbGVuZGFyQ2hhbmdlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwYW5lbCA9PT0gJ21vbnRoJykge1xuICAgICAgcmV0dXJuIGgoX192dWVfY29tcG9uZW50X18kNiwge1xuICAgICAgICBcImF0dHJzXCI6IHtcbiAgICAgICAgICBcImRpc2FibGVkQ2FsZW5kYXJDaGFuZ2VyXCI6IHRoaXMuZGlzYWJsZWRDYWxlbmRhckNoYW5nZXIsXG4gICAgICAgICAgXCJjYWxlbmRhclwiOiBpbm5lckNhbGVuZGFyLFxuICAgICAgICAgIFwiZ2V0Q2VsbENsYXNzZXNcIjogdGhpcy5nZXRNb250aENsYXNzZXNcbiAgICAgICAgfSxcbiAgICAgICAgXCJvblwiOiB7XG4gICAgICAgICAgXCJzZWxlY3RcIjogdGhpcy5oYW5kbGVTZWxlY3RNb250aCxcbiAgICAgICAgICBcImNoYW5nZXBhbmVsXCI6IHRoaXMuaGFuZGVsUGFuZWxDaGFuZ2UsXG4gICAgICAgICAgXCJjaGFuZ2VjYWxlbmRhclwiOiB0aGlzLmhhbmRsZUNhbGVuZGFyQ2hhbmdlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBoKF9fdnVlX2NvbXBvbmVudF9fJDUsIHtcbiAgICAgIFwiYXR0cnNcIjoge1xuICAgICAgICBcImRpc2FibGVkQ2FsZW5kYXJDaGFuZ2VyXCI6IHRoaXMuZGlzYWJsZWRDYWxlbmRhckNoYW5nZXIsXG4gICAgICAgIFwiY2FsZW5kYXJcIjogaW5uZXJDYWxlbmRhcixcbiAgICAgICAgXCJnZXRDZWxsQ2xhc3Nlc1wiOiB0aGlzLmdldERhdGVDbGFzc2VzLFxuICAgICAgICBcImdldFJvd0NsYXNzZXNcIjogdGhpcy5nZXRXZWVrU3RhdGUsXG4gICAgICAgIFwidGl0bGVGb3JtYXRcIjogdGhpcy50aXRsZUZvcm1hdCxcbiAgICAgICAgXCJzaG93V2Vla051bWJlclwiOiB0eXBlb2YgdGhpcy5zaG93V2Vla051bWJlciA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5zaG93V2Vla051bWJlciA6IHRoaXMudHlwZSA9PT0gJ3dlZWsnXG4gICAgICB9LFxuICAgICAgXCJjbGFzc1wiOiBfZGVmaW5lUHJvcGVydHkoe30sIFwiXCIuY29uY2F0KHRoaXMucHJlZml4Q2xhc3MsIFwiLWNhbGVuZGFyLXdlZWstbW9kZVwiKSwgdGhpcy50eXBlID09PSAnd2VlaycpLFxuICAgICAgXCJvblwiOiB7XG4gICAgICAgIFwic2VsZWN0XCI6IHRoaXMuaGFuZGxlU2VsZWN0RGF0ZSxcbiAgICAgICAgXCJjaGFuZ2VwYW5lbFwiOiB0aGlzLmhhbmRlbFBhbmVsQ2hhbmdlLFxuICAgICAgICBcImNoYW5nZWNhbGVuZGFyXCI6IHRoaXMuaGFuZGxlQ2FsZW5kYXJDaGFuZ2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxudmFyIENhbGVuZGFyUmFuZ2UgPSB7XG4gIG5hbWU6ICdDYWxlbmRhclJhbmdlJyxcbiAgY29tcG9uZW50czoge1xuICAgIENhbGVuZGFyUGFuZWw6IENhbGVuZGFyUGFuZWxcbiAgfSxcbiAgcHJvdmlkZTogZnVuY3Rpb24gcHJvdmlkZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb25EYXRlTW91c2VFbnRlcjogdGhpcy5vbkRhdGVNb3VzZUVudGVyLFxuICAgICAgb25EYXRlTW91c2VMZWF2ZTogdGhpcy5vbkRhdGVNb3VzZUxlYXZlXG4gICAgfTtcbiAgfSxcbiAgaW5qZWN0OiB7XG4gICAgcHJlZml4Q2xhc3M6IHtcbiAgICAgIGRlZmF1bHQ6ICdteCdcbiAgICB9XG4gIH0sXG4gIHByb3BzOiBfb2JqZWN0U3ByZWFkMih7fSwgQ2FsZW5kYXJQYW5lbC5wcm9wcyksXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlubmVyVmFsdWU6IFtdLFxuICAgICAgY2FsZW5kYXJzOiBbXSxcbiAgICAgIGhvdmVyZWRWYWx1ZTogbnVsbFxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgLy8gTWluaW11bSBkaWZmZXJlbmNlIGJldHdlZW4gc3RhcnQgYW5kIGVuZCBjYWxlbmRhcnNcbiAgICBjYWxlbmRhck1pbkRpZmY6IGZ1bmN0aW9uIGNhbGVuZGFyTWluRGlmZigpIHtcbiAgICAgIHZhciBtYXAgPSB7XG4gICAgICAgIGRhdGU6IDEsXG4gICAgICAgIC8vIHR5cGU6ZGF0ZSAgbWluIDEgbW9udGhcbiAgICAgICAgbW9udGg6IDEgKiAxMixcbiAgICAgICAgLy8gdHlwZTptb250aCBtaW4gMSB5ZWFyXG4gICAgICAgIHllYXI6IDEwICogMTIgLy8gdHlwZTp5ZWFyICBtaW4gMTAgeWVhclxuXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG1hcFt0aGlzLnR5cGVdIHx8IG1hcC5kYXRlO1xuICAgIH0sXG4gICAgY2FsZW5kYXJNYXhEaWZmOiBmdW5jdGlvbiBjYWxlbmRhck1heERpZmYoKSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfSxcbiAgICBkZWZhdWx0VmFsdWVzOiBmdW5jdGlvbiBkZWZhdWx0VmFsdWVzKCkge1xuICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5kZWZhdWx0VmFsdWUpID8gdGhpcy5kZWZhdWx0VmFsdWUgOiBbdGhpcy5kZWZhdWx0VmFsdWUsIHRoaXMuZGVmYXVsdFZhbHVlXTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgdmFsdWU6IHtcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5pbm5lclZhbHVlID0gaXNWYWxpZFJhbmdlRGF0ZSh0aGlzLnZhbHVlKSA/IHRoaXMudmFsdWUgOiBbbmV3IERhdGUoTmFOKSwgbmV3IERhdGUoTmFOKV07XG4gICAgICAgIHZhciBjYWxlbmRhcnMgPSB0aGlzLmlubmVyVmFsdWUubWFwKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0T2ZNb250aChnZXRWYWxpZERhdGUodiwgX3RoaXMuZGVmYXVsdFZhbHVlc1tpXSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cGRhdGVDYWxlbmRhcnMoY2FsZW5kYXJzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBoYW5kbGVTZWxlY3Q6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdChkYXRlLCB0eXBlKSB7XG4gICAgICB2YXIgX3RoaXMkaW5uZXJWYWx1ZSA9IF9zbGljZWRUb0FycmF5KHRoaXMuaW5uZXJWYWx1ZSwgMiksXG4gICAgICAgICAgc3RhcnRWYWx1ZSA9IF90aGlzJGlubmVyVmFsdWVbMF0sXG4gICAgICAgICAgZW5kVmFsdWUgPSBfdGhpcyRpbm5lclZhbHVlWzFdO1xuXG4gICAgICBpZiAoaXNWYWxpZERhdGUoc3RhcnRWYWx1ZSkgJiYgIWlzVmFsaWREYXRlKGVuZFZhbHVlKSkge1xuICAgICAgICBpZiAoc3RhcnRWYWx1ZS5nZXRUaW1lKCkgPiBkYXRlLmdldFRpbWUoKSkge1xuICAgICAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IFtkYXRlLCBzdGFydFZhbHVlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlubmVyVmFsdWUgPSBbc3RhcnRWYWx1ZSwgZGF0ZV07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXREYXRlKHRoaXMuaW5uZXJWYWx1ZSwgdHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlubmVyVmFsdWUgPSBbZGF0ZSwgbmV3IERhdGUoTmFOKV07XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkRhdGVNb3VzZUVudGVyOiBmdW5jdGlvbiBvbkRhdGVNb3VzZUVudGVyKGNlbGwpIHtcbiAgICAgIHRoaXMuaG92ZXJlZFZhbHVlID0gY2VsbDtcbiAgICB9LFxuICAgIG9uRGF0ZU1vdXNlTGVhdmU6IGZ1bmN0aW9uIG9uRGF0ZU1vdXNlTGVhdmUoKSB7XG4gICAgICB0aGlzLmhvdmVyZWRWYWx1ZSA9IG51bGw7XG4gICAgfSxcbiAgICBlbWl0RGF0ZTogZnVuY3Rpb24gZW1pdERhdGUoZGF0ZXMsIHR5cGUpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdCcsIGRhdGVzLCB0eXBlKTtcbiAgICB9LFxuICAgIHVwZGF0ZVN0YXJ0Q2FsZW5kYXI6IGZ1bmN0aW9uIHVwZGF0ZVN0YXJ0Q2FsZW5kYXIodmFsdWUpIHtcbiAgICAgIHRoaXMudXBkYXRlQ2FsZW5kYXJzKFt2YWx1ZSwgdGhpcy5jYWxlbmRhcnNbMV1dLCAxKTtcbiAgICB9LFxuICAgIHVwZGF0ZUVuZENhbGVuZGFyOiBmdW5jdGlvbiB1cGRhdGVFbmRDYWxlbmRhcih2YWx1ZSkge1xuICAgICAgdGhpcy51cGRhdGVDYWxlbmRhcnMoW3RoaXMuY2FsZW5kYXJzWzBdLCB2YWx1ZV0sIDApO1xuICAgIH0sXG4gICAgdXBkYXRlQ2FsZW5kYXJzOiBmdW5jdGlvbiB1cGRhdGVDYWxlbmRhcnMoY2FsZW5kYXJzKSB7XG4gICAgICB2YXIgYWRqdXN0SW5kZXggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7XG4gICAgICB2YXIgZ2FwID0gdGhpcy5nZXRDYWxlbmRhckdhcChjYWxlbmRhcnMpO1xuXG4gICAgICBpZiAoZ2FwKSB7XG4gICAgICAgIHZhciBjYWxlbmRhciA9IG5ldyBEYXRlKGNhbGVuZGFyc1thZGp1c3RJbmRleF0pO1xuICAgICAgICBjYWxlbmRhci5zZXRNb250aChjYWxlbmRhci5nZXRNb250aCgpICsgKGFkanVzdEluZGV4ID09PSAwID8gLWdhcCA6IGdhcCkpO1xuICAgICAgICBjYWxlbmRhcnNbYWRqdXN0SW5kZXhdID0gY2FsZW5kYXI7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsZW5kYXJzID0gY2FsZW5kYXJzO1xuICAgIH0sXG4gICAgZ2V0Q2FsZW5kYXJHYXA6IGZ1bmN0aW9uIGdldENhbGVuZGFyR2FwKGNhbGVuZGFycykge1xuICAgICAgdmFyIF9jYWxlbmRhcnMgPSBfc2xpY2VkVG9BcnJheShjYWxlbmRhcnMsIDIpLFxuICAgICAgICAgIGNhbGVuZGFyTGVmdCA9IF9jYWxlbmRhcnNbMF0sXG4gICAgICAgICAgY2FsZW5kYXJSaWdodCA9IF9jYWxlbmRhcnNbMV07XG5cbiAgICAgIHZhciB5ZWFyRGlmZiA9IGNhbGVuZGFyUmlnaHQuZ2V0RnVsbFllYXIoKSAtIGNhbGVuZGFyTGVmdC5nZXRGdWxsWWVhcigpO1xuICAgICAgdmFyIG1vbnRoRGlmZiA9IGNhbGVuZGFyUmlnaHQuZ2V0TW9udGgoKSAtIGNhbGVuZGFyTGVmdC5nZXRNb250aCgpO1xuICAgICAgdmFyIGRpZmYgPSB5ZWFyRGlmZiAqIDEyICsgbW9udGhEaWZmO1xuICAgICAgdmFyIG1pbiA9IHRoaXMuY2FsZW5kYXJNaW5EaWZmO1xuICAgICAgdmFyIG1heCA9IHRoaXMuY2FsZW5kYXJNYXhEaWZmO1xuXG4gICAgICBpZiAoZGlmZiA8IG1pbikge1xuICAgICAgICByZXR1cm4gbWluIC0gZGlmZjtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpZmYgPiBtYXgpIHtcbiAgICAgICAgcmV0dXJuIG1heCAtIGRpZmY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgZ2V0UmFuZ2VDbGFzc2VzOiBmdW5jdGlvbiBnZXRSYW5nZUNsYXNzZXMoY2VsbERhdGUsIGN1cnJlbnREYXRlcywgY2xhc3NuYW1lcykge1xuICAgICAgdmFyIGNsYXNzZXMgPSBbXS5jb25jYXQodGhpcy5nZXRDbGFzc2VzKGNlbGxEYXRlLCBjdXJyZW50RGF0ZXMsIGNsYXNzbmFtZXMpKTtcbiAgICAgIGlmICgvZGlzYWJsZWR8YWN0aXZlLy50ZXN0KGNsYXNzbmFtZXMpKSByZXR1cm4gY2xhc3NlcztcblxuICAgICAgdmFyIGluUmFuZ2UgPSBmdW5jdGlvbiBpblJhbmdlKGRhdGEsIHJhbmdlKSB7XG4gICAgICAgIHZhciBmbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICByZXR1cm4gdi5nZXRUaW1lKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciB2YWx1ZSA9IGZuKGRhdGEpO1xuXG4gICAgICAgIHZhciBfcmFuZ2UkbWFwID0gcmFuZ2UubWFwKGZuKSxcbiAgICAgICAgICAgIF9yYW5nZSRtYXAyID0gX3NsaWNlZFRvQXJyYXkoX3JhbmdlJG1hcCwgMiksXG4gICAgICAgICAgICBtaW4gPSBfcmFuZ2UkbWFwMlswXSxcbiAgICAgICAgICAgIG1heCA9IF9yYW5nZSRtYXAyWzFdO1xuXG4gICAgICAgIGlmIChtaW4gPiBtYXgpIHtcbiAgICAgICAgICB2YXIgX3JlZiA9IFttYXgsIG1pbl07XG4gICAgICAgICAgbWluID0gX3JlZlswXTtcbiAgICAgICAgICBtYXggPSBfcmVmWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlID4gbWluICYmIHZhbHVlIDwgbWF4O1xuICAgICAgfTtcblxuICAgICAgaWYgKGN1cnJlbnREYXRlcy5sZW5ndGggPT09IDIgJiYgaW5SYW5nZShjZWxsRGF0ZSwgY3VycmVudERhdGVzKSkge1xuICAgICAgICByZXR1cm4gY2xhc3Nlcy5jb25jYXQoJ2luLXJhbmdlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50RGF0ZXMubGVuZ3RoID09PSAxICYmIHRoaXMuaG92ZXJlZFZhbHVlICYmIGluUmFuZ2UoY2VsbERhdGUsIFtjdXJyZW50RGF0ZXNbMF0sIHRoaXMuaG92ZXJlZFZhbHVlXSkpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzZXMuY29uY2F0KCdob3Zlci1pbi1yYW5nZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2xhc3NlcztcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGggPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIGNhbGVuZGFyUmFuZ2UgPSB0aGlzLmNhbGVuZGFycy5tYXAoZnVuY3Rpb24gKGNhbGVuZGFyLCBpbmRleCkge1xuICAgICAgdmFyIHByb3BzID0gX29iamVjdFNwcmVhZDIoe30sIF90aGlzMi4kcHJvcHMsIHtcbiAgICAgICAgY2FsZW5kYXI6IGNhbGVuZGFyLFxuICAgICAgICB2YWx1ZTogX3RoaXMyLmlubmVyVmFsdWUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogX3RoaXMyLmRlZmF1bHRWYWx1ZXNbaW5kZXhdLFxuICAgICAgICBnZXRDbGFzc2VzOiBfdGhpczIuZ2V0UmFuZ2VDbGFzc2VzLFxuICAgICAgICAvLyBkb24ndCB1cGRhdGUgd2hlbiByYW5nZSBpcyB0cnVlXG4gICAgICAgIHBhcnRpYWxVcGRhdGU6IGZhbHNlXG4gICAgICB9KTtcblxuICAgICAgdmFyIG9uID0ge1xuICAgICAgICBzZWxlY3Q6IF90aGlzMi5oYW5kbGVTZWxlY3QsXG4gICAgICAgICd1cGRhdGU6Y2FsZW5kYXInOiBpbmRleCA9PT0gMCA/IF90aGlzMi51cGRhdGVTdGFydENhbGVuZGFyIDogX3RoaXMyLnVwZGF0ZUVuZENhbGVuZGFyXG4gICAgICB9O1xuICAgICAgcmV0dXJuIGgoXCJjYWxlbmRhci1wYW5lbFwiLCB7XG4gICAgICAgIFwicHJvcHNcIjogX29iamVjdFNwcmVhZDIoe30sIHByb3BzKSxcbiAgICAgICAgXCJvblwiOiBfb2JqZWN0U3ByZWFkMih7fSwgb24pXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB2YXIgcHJlZml4Q2xhc3MgPSB0aGlzLnByZWZpeENsYXNzO1xuICAgIHJldHVybiBoKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJcIi5jb25jYXQocHJlZml4Q2xhc3MsIFwiLXJhbmdlLXdyYXBwZXJcIilcbiAgICB9LCBbY2FsZW5kYXJSYW5nZV0pO1xuICB9XG59O1xuXG52YXIgc2Nyb2xsQmFyV2lkdGg7XG5mdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aCAoKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIDA7XG4gIGlmIChzY3JvbGxCYXJXaWR0aCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gc2Nyb2xsQmFyV2lkdGg7XG4gIHZhciBvdXRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBvdXRlci5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIG91dGVyLnN0eWxlLndpZHRoID0gJzEwMHB4JztcbiAgb3V0ZXIuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICBvdXRlci5zdHlsZS50b3AgPSAnLTk5OTlweCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3V0ZXIpO1xuICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgaW5uZXIuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gIG91dGVyLmFwcGVuZENoaWxkKGlubmVyKTtcbiAgc2Nyb2xsQmFyV2lkdGggPSBvdXRlci5vZmZzZXRXaWR0aCAtIGlubmVyLm9mZnNldFdpZHRoO1xuICBvdXRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG91dGVyKTtcbiAgcmV0dXJuIHNjcm9sbEJhcldpZHRoO1xufVxuXG4vL1xudmFyIHNjcmlwdCQ1ID0ge1xuICBpbmplY3Q6IHtcbiAgICBwcmVmaXhDbGFzczoge1xuICAgICAgZGVmYXVsdDogJ214J1xuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2Nyb2xsYmFyV2lkdGg6IDAsXG4gICAgICB0aHVtYlRvcDogJycsXG4gICAgICB0aHVtYkhlaWdodDogJydcbiAgICB9O1xuICB9LFxuICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkge1xuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSBnZXRTY3JvbGxiYXJXaWR0aCgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZURyYWdlbmQpO1xuICB9LFxuICBiZWZvcmVEZXN0cm95OiBmdW5jdGlvbiBiZWZvcmVEZXN0cm95KCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZURyYWdlbmQpO1xuICB9LFxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkge1xuICAgIHRoaXMuJG5leHRUaWNrKHRoaXMuZ2V0VGh1bWJTaXplKTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGdldFRodW1iU2l6ZTogZnVuY3Rpb24gZ2V0VGh1bWJTaXplKCkge1xuICAgICAgdmFyIHdyYXAgPSB0aGlzLiRyZWZzLndyYXA7XG4gICAgICBpZiAoIXdyYXApIHJldHVybjtcbiAgICAgIHZhciBoZWlnaHRQZXJjZW50YWdlID0gd3JhcC5jbGllbnRIZWlnaHQgKiAxMDAgLyB3cmFwLnNjcm9sbEhlaWdodDtcbiAgICAgIHRoaXMudGh1bWJIZWlnaHQgPSBoZWlnaHRQZXJjZW50YWdlIDwgMTAwID8gXCJcIi5jb25jYXQoaGVpZ2h0UGVyY2VudGFnZSwgXCIlXCIpIDogJyc7XG4gICAgfSxcbiAgICBoYW5kbGVTY3JvbGw6IGZ1bmN0aW9uIGhhbmRsZVNjcm9sbChldnQpIHtcbiAgICAgIHZhciBlbCA9IGV2dC5jdXJyZW50VGFyZ2V0O1xuICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IGVsLnNjcm9sbEhlaWdodCxcbiAgICAgICAgICBzY3JvbGxUb3AgPSBlbC5zY3JvbGxUb3A7XG4gICAgICB0aGlzLnRodW1iVG9wID0gXCJcIi5jb25jYXQoc2Nyb2xsVG9wICogMTAwIC8gc2Nyb2xsSGVpZ2h0LCBcIiVcIik7XG4gICAgfSxcbiAgICBoYW5kbGVEcmFnc3RhcnQ6IGZ1bmN0aW9uIGhhbmRsZURyYWdzdGFydChldnQpIHtcbiAgICAgIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIHRoaXMuX2RyYWdnYWJsZSA9IHRydWU7XG4gICAgICB2YXIgb2Zmc2V0VG9wID0gdGhpcy4kcmVmcy50aHVtYi5vZmZzZXRUb3A7XG4gICAgICB0aGlzLl9wcmV2WSA9IGV2dC5jbGllbnRZIC0gb2Zmc2V0VG9wO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVEcmFnaW5nKTtcbiAgICB9LFxuICAgIGhhbmRsZURyYWdpbmc6IGZ1bmN0aW9uIGhhbmRsZURyYWdpbmcoZXZ0KSB7XG4gICAgICBpZiAoIXRoaXMuX2RyYWdnYWJsZSkgcmV0dXJuO1xuICAgICAgdmFyIGNsaWVudFkgPSBldnQuY2xpZW50WTtcbiAgICAgIHZhciB3cmFwID0gdGhpcy4kcmVmcy53cmFwO1xuICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHdyYXAuc2Nyb2xsSGVpZ2h0LFxuICAgICAgICAgIGNsaWVudEhlaWdodCA9IHdyYXAuY2xpZW50SGVpZ2h0O1xuICAgICAgdmFyIG9mZnNldFkgPSBjbGllbnRZIC0gdGhpcy5fcHJldlk7XG4gICAgICB2YXIgdG9wID0gb2Zmc2V0WSAqIHNjcm9sbEhlaWdodCAvIGNsaWVudEhlaWdodDtcbiAgICAgIHdyYXAuc2Nyb2xsVG9wID0gdG9wO1xuICAgIH0sXG4gICAgaGFuZGxlRHJhZ2VuZDogZnVuY3Rpb24gaGFuZGxlRHJhZ2VuZCgpIHtcbiAgICAgIGlmICh0aGlzLl9kcmFnZ2FibGUpIHtcbiAgICAgICAgdGhpcy5fZHJhZ2dhYmxlID0gZmFsc2U7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlRHJhZ2luZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKiBzY3JpcHQgKi9cbnZhciBfX3Z1ZV9zY3JpcHRfXyQ1ID0gc2NyaXB0JDU7XG4vKiB0ZW1wbGF0ZSAqL1xuXG52YXIgX192dWVfcmVuZGVyX18kOCA9IGZ1bmN0aW9uIF9fdnVlX3JlbmRlcl9fKCkge1xuICB2YXIgX3ZtID0gdGhpcztcblxuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQ7XG5cbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oO1xuXG4gIHJldHVybiBfYygnZGl2Jywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi1zY3JvbGxiYXJcIixcbiAgICBzdHlsZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICB9XG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHJlZjogXCJ3cmFwXCIsXG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLXNjcm9sbGJhci13cmFwXCIsXG4gICAgc3R5bGU6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiBcIi1cIiArIF92bS5zY3JvbGxiYXJXaWR0aCArIFwicHhcIlxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwic2Nyb2xsXCI6IF92bS5oYW5kbGVTY3JvbGxcbiAgICB9XG4gIH0sIFtfdm0uX3QoXCJkZWZhdWx0XCIpXSwgMiksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLXNjcm9sbGJhci10cmFja1wiXG4gIH0sIFtfYygnZGl2Jywge1xuICAgIHJlZjogXCJ0aHVtYlwiLFxuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi1zY3JvbGxiYXItdGh1bWJcIixcbiAgICBzdHlsZToge1xuICAgICAgaGVpZ2h0OiBfdm0udGh1bWJIZWlnaHQsXG4gICAgICB0b3A6IF92bS50aHVtYlRvcFxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwibW91c2Vkb3duXCI6IF92bS5oYW5kbGVEcmFnc3RhcnRcbiAgICB9XG4gIH0pXSldKTtcbn07XG5cbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQ4ID0gW107XG4vKiBzdHlsZSAqL1xuXG52YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJDggPSB1bmRlZmluZWQ7XG4vKiBzY29wZWQgKi9cblxudmFyIF9fdnVlX3Njb3BlX2lkX18kOCA9IHVuZGVmaW5lZDtcbi8qIG1vZHVsZSBpZGVudGlmaWVyICovXG5cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDggPSB1bmRlZmluZWQ7XG4vKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kOCA9IGZhbHNlO1xuLyogc3R5bGUgaW5qZWN0ICovXG5cbi8qIHN0eWxlIGluamVjdCBTU1IgKi9cblxuLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi9cblxudmFyIF9fdnVlX2NvbXBvbmVudF9fJDggPSBub3JtYWxpemVDb21wb25lbnQoe1xuICByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDgsXG4gIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kOFxufSwgX192dWVfaW5qZWN0X3N0eWxlc19fJDgsIF9fdnVlX3NjcmlwdF9fJDUsIF9fdnVlX3Njb3BlX2lkX18kOCwgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDgsIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kOCwgZmFsc2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuXG4vL1xuXG52YXIgcGFkTnVtYmVyID0gZnVuY3Rpb24gcGFkTnVtYmVyKHZhbHVlKSB7XG4gIHZhbHVlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgcmV0dXJuIHZhbHVlIDwgMTAgPyBcIjBcIi5jb25jYXQodmFsdWUpIDogXCJcIi5jb25jYXQodmFsdWUpO1xufTtcblxudmFyIGdlbmVyYXRlT3B0aW9ucyA9IGZ1bmN0aW9uIGdlbmVyYXRlT3B0aW9ucyhsZW5ndGgsIHN0ZXAsIG9wdGlvbnMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHYpIHtcbiAgICAgIHJldHVybiB2ID49IDAgJiYgdiA8IGxlbmd0aDtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChzdGVwIDw9IDApIHtcbiAgICBzdGVwID0gMTtcbiAgfVxuXG4gIHZhciBhcnIgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBzdGVwKSB7XG4gICAgYXJyLnB1c2goaSk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufTtcblxudmFyIHNjcm9sbFRvID0gZnVuY3Rpb24gc2Nyb2xsVG8oZWxlbWVudCwgdG8pIHtcbiAgdmFyIGR1cmF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuXG4gIC8vIGp1bXAgdG8gdGFyZ2V0IGlmIGR1cmF0aW9uIHplcm9cbiAgaWYgKGR1cmF0aW9uIDw9IDApIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSB0bztcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZGlmZmVyZW5jZSA9IHRvIC0gZWxlbWVudC5zY3JvbGxUb3A7XG4gIHZhciB0aWNrID0gZGlmZmVyZW5jZSAvIGR1cmF0aW9uICogMTA7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCA9IGVsZW1lbnQuc2Nyb2xsVG9wICsgdGljaztcblxuICAgIGlmIChzY3JvbGxUb3AgPj0gdG8pIHtcbiAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gdG87XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWxlbWVudC5zY3JvbGxUb3AgPSBzY3JvbGxUb3A7XG4gICAgc2Nyb2xsVG8oZWxlbWVudCwgdG8sIGR1cmF0aW9uIC0gMTApO1xuICB9KTtcbn07XG5cbnZhciBzY3JpcHQkNiA9IHtcbiAgbmFtZTogJ0xpc3RDb2x1bW5zJyxcbiAgY29tcG9uZW50czoge1xuICAgIFNjcm9sbGJhclZlcnRpY2FsOiBfX3Z1ZV9jb21wb25lbnRfXyQ4XG4gIH0sXG4gIGluamVjdDoge1xuICAgIHByZWZpeENsYXNzOiB7XG4gICAgICBkZWZhdWx0OiAnbXgnXG4gICAgfVxuICB9LFxuICBwcm9wczoge1xuICAgIGRhdGU6IERhdGUsXG4gICAgc2Nyb2xsRHVyYXRpb246IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDEwMFxuICAgIH0sXG4gICAgZ2V0Q2xhc3Nlczoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH0sXG4gICAgaG91ck9wdGlvbnM6IEFycmF5LFxuICAgIG1pbnV0ZU9wdGlvbnM6IEFycmF5LFxuICAgIHNlY29uZE9wdGlvbnM6IEFycmF5LFxuICAgIHNob3dIb3VyOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgc2hvd01pbnV0ZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIHNob3dTZWNvbmQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBob3VyU3RlcDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgbWludXRlU3RlcDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgc2Vjb25kU3RlcDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgdXNlMTJoOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgY29sdW1uczogZnVuY3Rpb24gY29sdW1ucygpIHtcbiAgICAgIHZhciBjb2xzID0gW107XG4gICAgICBpZiAodGhpcy5zaG93SG91cikgY29scy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ2hvdXInLFxuICAgICAgICBsaXN0OiB0aGlzLmdldEhvdXJzTGlzdCgpXG4gICAgICB9KTtcbiAgICAgIGlmICh0aGlzLnNob3dNaW51dGUpIGNvbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdtaW51dGUnLFxuICAgICAgICBsaXN0OiB0aGlzLmdldE1pbnV0ZXNMaXN0KClcbiAgICAgIH0pO1xuICAgICAgaWYgKHRoaXMuc2hvd1NlY29uZCkgY29scy5wdXNoKHtcbiAgICAgICAgdHlwZTogJ3NlY29uZCcsXG4gICAgICAgIGxpc3Q6IHRoaXMuZ2V0U2Vjb25kc0xpc3QoKVxuICAgICAgfSk7XG4gICAgICBpZiAodGhpcy51c2UxMmgpIGNvbHMucHVzaCh7XG4gICAgICAgIHR5cGU6ICdhbXBtJyxcbiAgICAgICAgbGlzdDogdGhpcy5nZXRBTVBNTGlzdCgpXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBjb2xzLmZpbHRlcihmdW5jdGlvbiAodikge1xuICAgICAgICByZXR1cm4gdi5saXN0Lmxlbmd0aCA+IDA7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgZGF0ZToge1xuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuc2Nyb2xsVG9TZWxlY3RlZChfdGhpcy5zY3JvbGxEdXJhdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHtcbiAgICB0aGlzLnNjcm9sbFRvU2VsZWN0ZWQoMCk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBnZXRIb3Vyc0xpc3Q6IGZ1bmN0aW9uIGdldEhvdXJzTGlzdCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gZ2VuZXJhdGVPcHRpb25zKHRoaXMudXNlMTJoID8gMTIgOiAyNCwgdGhpcy5ob3VyU3RlcCwgdGhpcy5ob3VyT3B0aW9ucykubWFwKGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShfdGhpczIuZGF0ZSk7XG4gICAgICAgIHZhciB0ZXh0ID0gcGFkTnVtYmVyKG51bSk7XG5cbiAgICAgICAgaWYgKF90aGlzMi51c2UxMmgpIHtcbiAgICAgICAgICBpZiAobnVtID09PSAwKSB7XG4gICAgICAgICAgICB0ZXh0ID0gJzEyJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZGF0ZS5nZXRIb3VycygpID49IDEyKSB7XG4gICAgICAgICAgICBudW0gKz0gMTI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlID0gZGF0ZS5zZXRIb3VycyhudW0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldE1pbnV0ZXNMaXN0OiBmdW5jdGlvbiBnZXRNaW51dGVzTGlzdCgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gZ2VuZXJhdGVPcHRpb25zKDYwLCB0aGlzLm1pbnV0ZVN0ZXAsIHRoaXMubWludXRlT3B0aW9ucykubWFwKGZ1bmN0aW9uIChudW0pIHtcbiAgICAgICAgdmFyIHZhbHVlID0gbmV3IERhdGUoX3RoaXMzLmRhdGUpLnNldE1pbnV0ZXMobnVtKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgdGV4dDogcGFkTnVtYmVyKG51bSlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0U2Vjb25kc0xpc3Q6IGZ1bmN0aW9uIGdldFNlY29uZHNMaXN0KCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHJldHVybiBnZW5lcmF0ZU9wdGlvbnMoNjAsIHRoaXMuc2Vjb25kU3RlcCwgdGhpcy5zZWNvbmRPcHRpb25zKS5tYXAoZnVuY3Rpb24gKG51bSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBuZXcgRGF0ZShfdGhpczQuZGF0ZSkuc2V0U2Vjb25kcyhudW0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICB0ZXh0OiBwYWROdW1iZXIobnVtKVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRBTVBNTGlzdDogZnVuY3Rpb24gZ2V0QU1QTUxpc3QoKSB7XG4gICAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgICAgcmV0dXJuIFsnQU0nLCAnUE0nXS5tYXAoZnVuY3Rpb24gKHRleHQsIGkpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShfdGhpczUuZGF0ZSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpICUgMTIgKyBpICogMTIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNjcm9sbFRvU2VsZWN0ZWQ6IGZ1bmN0aW9uIHNjcm9sbFRvU2VsZWN0ZWQoZHVyYXRpb24pIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hY3RpdmUnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuICAgICAgICB2YXIgc2Nyb2xsRWxlbWVudCA9IGdldFNjcm9sbFBhcmVudChlbGVtZW50LCB0aGlzLiRlbCk7XG5cbiAgICAgICAgaWYgKHNjcm9sbEVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgdG8gPSBlbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgICBzY3JvbGxUbyhzY3JvbGxFbGVtZW50LCB0bywgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVTZWxlY3Q6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdChldnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBldnQudGFyZ2V0LFxuICAgICAgICAgIGN1cnJlbnRUYXJnZXQgPSBldnQuY3VycmVudFRhcmdldDtcbiAgICAgIGlmICh0YXJnZXQudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnTEknKSByZXR1cm47XG4gICAgICB2YXIgdHlwZSA9IGN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXR5cGUnKTtcbiAgICAgIHZhciBjb2xJbmRleCA9IHBhcnNlSW50KGN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JyksIDEwKTtcbiAgICAgIHZhciBjZWxsSW5kZXggPSBwYXJzZUludCh0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4JyksIDEwKTtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuY29sdW1uc1tjb2xJbmRleF0ubGlzdFtjZWxsSW5kZXhdLnZhbHVlO1xuICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0JywgdmFsdWUsIHR5cGUpO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18kNiA9IHNjcmlwdCQ2O1xuLyogdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX3JlbmRlcl9fJDkgPSBmdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXygpIHtcbiAgdmFyIF92bSA9IHRoaXM7XG5cbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50O1xuXG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaDtcblxuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItdGltZS1jb2x1bW5zXCJcbiAgfSwgX3ZtLl9sKF92bS5jb2x1bW5zLCBmdW5jdGlvbiAoY29sLCBpKSB7XG4gICAgcmV0dXJuIF9jKCdzY3JvbGxiYXItdmVydGljYWwnLCB7XG4gICAgICBrZXk6IGksXG4gICAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItdGltZS1jb2x1bW5cIlxuICAgIH0sIFtfYygndWwnLCB7XG4gICAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItdGltZS1saXN0XCIsXG4gICAgICBhdHRyczoge1xuICAgICAgICBcImRhdGEtdHlwZVwiOiBjb2wudHlwZSxcbiAgICAgICAgXCJkYXRhLWluZGV4XCI6IGlcbiAgICAgIH0sXG4gICAgICBvbjoge1xuICAgICAgICBcImNsaWNrXCI6IF92bS5oYW5kbGVTZWxlY3RcbiAgICAgIH1cbiAgICB9LCBfdm0uX2woY29sLmxpc3QsIGZ1bmN0aW9uIChpdGVtLCBqKSB7XG4gICAgICByZXR1cm4gX2MoJ2xpJywge1xuICAgICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICAgIGNsYXNzOiBbX3ZtLnByZWZpeENsYXNzICsgXCItdGltZS1pdGVtXCIsIF92bS5nZXRDbGFzc2VzKGl0ZW0udmFsdWUsIGNvbC50eXBlKV0sXG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgXCJkYXRhLWluZGV4XCI6IGpcbiAgICAgICAgfVxuICAgICAgfSwgW192bS5fdihcIlxcbiAgICAgICAgXCIgKyBfdm0uX3MoaXRlbS50ZXh0KSArIFwiXFxuICAgICAgXCIpXSk7XG4gICAgfSksIDApXSk7XG4gIH0pLCAxKTtcbn07XG5cbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyQ5ID0gW107XG4vKiBzdHlsZSAqL1xuXG52YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJDkgPSB1bmRlZmluZWQ7XG4vKiBzY29wZWQgKi9cblxudmFyIF9fdnVlX3Njb3BlX2lkX18kOSA9IHVuZGVmaW5lZDtcbi8qIG1vZHVsZSBpZGVudGlmaWVyICovXG5cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJDkgPSB1bmRlZmluZWQ7XG4vKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kOSA9IGZhbHNlO1xuLyogc3R5bGUgaW5qZWN0ICovXG5cbi8qIHN0eWxlIGluamVjdCBTU1IgKi9cblxuLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi9cblxudmFyIF9fdnVlX2NvbXBvbmVudF9fJDkgPSBub3JtYWxpemVDb21wb25lbnQoe1xuICByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJDksXG4gIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kOVxufSwgX192dWVfaW5qZWN0X3N0eWxlc19fJDksIF9fdnVlX3NjcmlwdF9fJDYsIF9fdnVlX3Njb3BlX2lkX18kOSwgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJDksIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kOSwgZmFsc2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuXG4vL1xuXG5mdW5jdGlvbiBwYXJzZU9wdGlvbigpIHtcbiAgdmFyIHRpbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICcnO1xuICB2YXIgdmFsdWVzID0gdGltZS5zcGxpdCgnOicpO1xuXG4gIGlmICh2YWx1ZXMubGVuZ3RoID49IDIpIHtcbiAgICB2YXIgaG91cnMgPSBwYXJzZUludCh2YWx1ZXNbMF0sIDEwKTtcbiAgICB2YXIgbWludXRlcyA9IHBhcnNlSW50KHZhbHVlc1sxXSwgMTApO1xuICAgIHJldHVybiB7XG4gICAgICBob3VyczogaG91cnMsXG4gICAgICBtaW51dGVzOiBtaW51dGVzXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgc2Nyb2xsVG8kMSA9IGZ1bmN0aW9uIHNjcm9sbFRvKGVsZW1lbnQsIHRvKSB7XG4gIGlmIChlbGVtZW50KSB7XG4gICAgZWxlbWVudC5zY3JvbGxUb3AgPSB0bztcbiAgfVxufTtcblxudmFyIHNjcmlwdCQ3ID0ge1xuICBuYW1lOiAnTGlzdE9wdGlvbnMnLFxuICBjb21wb25lbnRzOiB7XG4gICAgU2Nyb2xsYmFyVmVydGljYWw6IF9fdnVlX2NvbXBvbmVudF9fJDhcbiAgfSxcbiAgaW5qZWN0OiB7XG4gICAgZ2V0TG9jYWxlOiB7XG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGdldExvY2FsZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHByZWZpeENsYXNzOiB7XG4gICAgICBkZWZhdWx0OiAnbXgnXG4gICAgfVxuICB9LFxuICBwcm9wczoge1xuICAgIGRhdGU6IERhdGUsXG4gICAgb3B0aW9uczoge1xuICAgICAgdHlwZTogW09iamVjdCwgRnVuY3Rpb25dLFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZvcm1hdDoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ0hIOm1tOnNzJ1xuICAgIH0sXG4gICAgZ2V0Q2xhc3Nlczoge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBsaXN0OiBmdW5jdGlvbiBsaXN0KCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucygpIHx8IFtdO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnQgPSBwYXJzZU9wdGlvbihvcHRpb25zLnN0YXJ0KTtcbiAgICAgIHZhciBlbmQgPSBwYXJzZU9wdGlvbihvcHRpb25zLmVuZCk7XG4gICAgICB2YXIgc3RlcCA9IHBhcnNlT3B0aW9uKG9wdGlvbnMuc3RlcCk7XG4gICAgICB2YXIgZm10ID0gb3B0aW9ucy5mb3JtYXQgfHwgdGhpcy5mb3JtYXQ7XG5cbiAgICAgIGlmIChzdGFydCAmJiBlbmQgJiYgc3RlcCkge1xuICAgICAgICB2YXIgc3RhcnRNaW51dGVzID0gc3RhcnQubWludXRlcyArIHN0YXJ0LmhvdXJzICogNjA7XG4gICAgICAgIHZhciBlbmRNaW51dGVzID0gZW5kLm1pbnV0ZXMgKyBlbmQuaG91cnMgKiA2MDtcbiAgICAgICAgdmFyIHN0ZXBNaW51dGVzID0gc3RlcC5taW51dGVzICsgc3RlcC5ob3VycyAqIDYwO1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5mbG9vcigoZW5kTWludXRlcyAtIHN0YXJ0TWludXRlcykgLyBzdGVwTWludXRlcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPD0gbGVuOyBpKyspIHtcbiAgICAgICAgICB2YXIgdGltZU1pbnV0ZXMgPSBzdGFydE1pbnV0ZXMgKyBpICogc3RlcE1pbnV0ZXM7XG4gICAgICAgICAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcih0aW1lTWludXRlcyAvIDYwKTtcbiAgICAgICAgICB2YXIgbWludXRlcyA9IHRpbWVNaW51dGVzICUgNjA7XG4gICAgICAgICAgdmFyIHZhbHVlID0gbmV3IERhdGUodGhpcy5kYXRlKS5zZXRIb3Vycyhob3VycywgbWludXRlcywgMCk7XG4gICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgdGV4dDogdGhpcy5mb3JtYXREYXRlKHZhbHVlLCBmbXQpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5zY3JvbGxUb1NlbGVjdGVkKCk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBmb3JtYXREYXRlOiBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIGZtdCkge1xuICAgICAgcmV0dXJuIGZvcm1hdChkYXRlLCBmbXQsIHtcbiAgICAgICAgbG9jYWxlOiB0aGlzLmdldExvY2FsZSgpLmZvcm1hdExvY2FsZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBzY3JvbGxUb1NlbGVjdGVkOiBmdW5jdGlvbiBzY3JvbGxUb1NlbGVjdGVkKCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCcuYWN0aXZlJyk7XG4gICAgICBpZiAoIWVsZW1lbnQpIHJldHVybjtcbiAgICAgIHZhciBzY3JvbGxFbGVtZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQsIHRoaXMuJGVsKTtcbiAgICAgIGlmICghc2Nyb2xsRWxlbWVudCkgcmV0dXJuO1xuICAgICAgdmFyIHRvID0gZWxlbWVudC5vZmZzZXRUb3A7XG4gICAgICBzY3JvbGxUbyQxKHNjcm9sbEVsZW1lbnQsIHRvKTtcbiAgICB9LFxuICAgIGhhbmRsZVNlbGVjdDogZnVuY3Rpb24gaGFuZGxlU2VsZWN0KHZhbHVlKSB7XG4gICAgICB0aGlzLiRlbWl0KCdzZWxlY3QnLCB2YWx1ZSwgJ3RpbWUnKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qIHNjcmlwdCAqL1xudmFyIF9fdnVlX3NjcmlwdF9fJDcgPSBzY3JpcHQkNztcbi8qIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9yZW5kZXJfXyRhID0gZnVuY3Rpb24gX192dWVfcmVuZGVyX18oKSB7XG4gIHZhciBfdm0gPSB0aGlzO1xuXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudDtcblxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2g7XG5cbiAgcmV0dXJuIF9jKCdzY3JvbGxiYXItdmVydGljYWwnLCBfdm0uX2woX3ZtLmxpc3QsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgICBrZXk6IGl0ZW0udmFsdWUsXG4gICAgICBjbGFzczogW192bS5wcmVmaXhDbGFzcyArIFwiLXRpbWUtb3B0aW9uXCIsIF92bS5nZXRDbGFzc2VzKGl0ZW0udmFsdWUpXSxcbiAgICAgIG9uOiB7XG4gICAgICAgIFwiY2xpY2tcIjogZnVuY3Rpb24gY2xpY2soJGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF92bS5oYW5kbGVTZWxlY3QoaXRlbS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBbX3ZtLl92KFwiXFxuICAgIFwiICsgX3ZtLl9zKGl0ZW0udGV4dCkgKyBcIlxcbiAgXCIpXSk7XG4gIH0pLCAwKTtcbn07XG5cbnZhciBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRhID0gW107XG4vKiBzdHlsZSAqL1xuXG52YXIgX192dWVfaW5qZWN0X3N0eWxlc19fJGEgPSB1bmRlZmluZWQ7XG4vKiBzY29wZWQgKi9cblxudmFyIF9fdnVlX3Njb3BlX2lkX18kYSA9IHVuZGVmaW5lZDtcbi8qIG1vZHVsZSBpZGVudGlmaWVyICovXG5cbnZhciBfX3Z1ZV9tb2R1bGVfaWRlbnRpZmllcl9fJGEgPSB1bmRlZmluZWQ7XG4vKiBmdW5jdGlvbmFsIHRlbXBsYXRlICovXG5cbnZhciBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kYSA9IGZhbHNlO1xuLyogc3R5bGUgaW5qZWN0ICovXG5cbi8qIHN0eWxlIGluamVjdCBTU1IgKi9cblxuLyogc3R5bGUgaW5qZWN0IHNoYWRvdyBkb20gKi9cblxudmFyIF9fdnVlX2NvbXBvbmVudF9fJGEgPSBub3JtYWxpemVDb21wb25lbnQoe1xuICByZW5kZXI6IF9fdnVlX3JlbmRlcl9fJGEsXG4gIHN0YXRpY1JlbmRlckZuczogX192dWVfc3RhdGljUmVuZGVyRm5zX18kYVxufSwgX192dWVfaW5qZWN0X3N0eWxlc19fJGEsIF9fdnVlX3NjcmlwdF9fJDcsIF9fdnVlX3Njb3BlX2lkX18kYSwgX192dWVfaXNfZnVuY3Rpb25hbF90ZW1wbGF0ZV9fJGEsIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kYSwgZmFsc2UsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuXG4vL1xudmFyIHNjcmlwdCQ4ID0ge1xuICBuYW1lOiAnVGltZVBhbmVsJyxcbiAgY29tcG9uZW50czoge1xuICAgIExpc3RDb2x1bW5zOiBfX3Z1ZV9jb21wb25lbnRfXyQ5LFxuICAgIExpc3RPcHRpb25zOiBfX3Z1ZV9jb21wb25lbnRfXyRhXG4gIH0sXG4gIGluamVjdDoge1xuICAgIGdldExvY2FsZToge1xuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiBnZXRMb2NhbGU7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmVmaXhDbGFzczoge1xuICAgICAgZGVmYXVsdDogJ214J1xuICAgIH1cbiAgfSxcbiAgcHJvcHM6IHtcbiAgICB2YWx1ZToge30sXG4gICAgZGVmYXVsdFZhbHVlOiB7XG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGZvcm1hdDoge1xuICAgICAgZGVmYXVsdDogJ0hIOm1tOnNzJ1xuICAgIH0sXG4gICAgdGltZVRpdGxlRm9ybWF0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnWVlZWS1NTS1ERCdcbiAgICB9LFxuICAgIHNob3dUaW1lSGVhZGVyOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGRpc2FibGVkVGltZToge1xuICAgICAgdHlwZTogRnVuY3Rpb24sXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgdGltZVBpY2tlck9wdGlvbnM6IHtcbiAgICAgIHR5cGU6IFtPYmplY3QsIEZ1bmN0aW9uXSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGhvdXJPcHRpb25zOiBBcnJheSxcbiAgICBtaW51dGVPcHRpb25zOiBBcnJheSxcbiAgICBzZWNvbmRPcHRpb25zOiBBcnJheSxcbiAgICBob3VyU3RlcDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgbWludXRlU3RlcDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgc2Vjb25kU3RlcDoge1xuICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgZGVmYXVsdDogMVxuICAgIH0sXG4gICAgc2hvd0hvdXI6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIHNob3dNaW51dGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIHNob3dTZWNvbmQ6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB1bmRlZmluZWRcbiAgICB9LFxuICAgIHVzZTEyaDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgc2Nyb2xsRHVyYXRpb246IHtcbiAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgIGRlZmF1bHQ6IDEwMFxuICAgIH1cbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5uZXJWYWx1ZTogZ2V0VmFsaWREYXRlKHRoaXMudmFsdWUsIHRoaXMuZGVmYXVsdFZhbHVlKVxuICAgIH07XG4gIH0sXG4gIGNvbXB1dGVkOiB7XG4gICAgdGl0bGU6IGZ1bmN0aW9uIHRpdGxlKCkge1xuICAgICAgdmFyIHRpdGxlRm9ybWF0ID0gdGhpcy50aW1lVGl0bGVGb3JtYXQ7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHRoaXMuaW5uZXJWYWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlKGRhdGUsIHRpdGxlRm9ybWF0KTtcbiAgICB9LFxuICAgIGlubmVyRm9yYW10OiBmdW5jdGlvbiBpbm5lckZvcmFtdCgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5mb3JtYXQgPT09ICdzdHJpbmcnID8gdGhpcy5mb3JtYXQgOiAnSEg6bW06c3MnO1xuICAgIH0sXG4gICAgU2hvd0hvdXJNaW51dGVTZWNvbmRBTVBNOiBmdW5jdGlvbiBTaG93SG91ck1pbnV0ZVNlY29uZEFNUE0oKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgZm10ID0gdGhpcy5pbm5lckZvcmFtdDtcbiAgICAgIHZhciBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIHNob3dIb3VyOiAvW0hoS2tdLy50ZXN0KGZtdCksXG4gICAgICAgIHNob3dNaW51dGU6IC9tLy50ZXN0KGZtdCksXG4gICAgICAgIHNob3dTZWNvbmQ6IC9zLy50ZXN0KGZtdCksXG4gICAgICAgIHVzZTEyaDogL2EvaS50ZXN0KGZtdClcbiAgICAgIH07XG4gICAgICB2YXIgb2JqID0ge307XG4gICAgICBPYmplY3Qua2V5cyhkZWZhdWx0UHJvcHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBvYmpba2V5XSA9IHR5cGVvZiBfdGhpc1trZXldID09PSAnYm9vbGVhbicgPyBfdGhpc1trZXldIDogZGVmYXVsdFByb3BzW2tleV07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIHZhbHVlOiB7XG4gICAgICBpbW1lZGlhdGU6IHRydWUsXG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICB0aGlzLmlubmVyVmFsdWUgPSBnZXRWYWxpZERhdGUodGhpcy52YWx1ZSwgdGhpcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGZvcm1hdERhdGU6IGZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSwgZm10KSB7XG4gICAgICByZXR1cm4gZm9ybWF0KGRhdGUsIGZtdCwge1xuICAgICAgICBsb2NhbGU6IHRoaXMuZ2V0TG9jYWxlKCkuZm9ybWF0TG9jYWxlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGlzRGlzYWJsZWRUaW1lOiBmdW5jdGlvbiBpc0Rpc2FibGVkVGltZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZWRUaW1lKG5ldyBEYXRlKHZhbHVlKSk7XG4gICAgfSxcbiAgICBpc0Rpc2FibGVkSG91cjogZnVuY3Rpb24gaXNEaXNhYmxlZEhvdXIoZGF0ZSkge1xuICAgICAgdmFyIHZhbHVlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICByZXR1cm4gdGhpcy5pc0Rpc2FibGVkVGltZSh2YWx1ZSkgJiYgdGhpcy5pc0Rpc2FibGVkVGltZSh2YWx1ZS5zZXRNaW51dGVzKDAsIDAsIDApKSAmJiB0aGlzLmlzRGlzYWJsZWRUaW1lKHZhbHVlLnNldE1pbnV0ZXMoNTksIDU5LCA5OTkpKTtcbiAgICB9LFxuICAgIGlzRGlzYWJsZWRNaW51dGU6IGZ1bmN0aW9uIGlzRGlzYWJsZWRNaW51dGUoZGF0ZSkge1xuICAgICAgdmFyIHZhbHVlID0gbmV3IERhdGUoZGF0ZSk7XG4gICAgICByZXR1cm4gdGhpcy5pc0Rpc2FibGVkVGltZSh2YWx1ZSkgJiYgdGhpcy5pc0Rpc2FibGVkVGltZSh2YWx1ZS5zZXRTZWNvbmRzKDAsIDApKSAmJiB0aGlzLmlzRGlzYWJsZWRUaW1lKHZhbHVlLnNldFNlY29uZHMoNTksIDk5OSkpO1xuICAgIH0sXG4gICAgaXNEaXNhYmxlZEFNUE06IGZ1bmN0aW9uIGlzRGlzYWJsZWRBTVBNKGRhdGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgICAgdmFyIG1pbkhvdXIgPSB2YWx1ZS5nZXRIb3VycygpIDwgMTIgPyAwIDogMTI7XG4gICAgICB2YXIgbWF4SG91ciA9IG1pbkhvdXIgKyAxMTtcbiAgICAgIHJldHVybiB0aGlzLmlzRGlzYWJsZWRUaW1lKHZhbHVlKSAmJiB0aGlzLmlzRGlzYWJsZWRUaW1lKHZhbHVlLnNldEhvdXJzKG1pbkhvdXIsIDAsIDAsIDApKSAmJiB0aGlzLmlzRGlzYWJsZWRUaW1lKHZhbHVlLnNldEhvdXJzKG1heEhvdXIsIDU5LCA1OSwgOTk5KSk7XG4gICAgfSxcbiAgICBpc0Rpc2FibGVkOiBmdW5jdGlvbiBpc0Rpc2FibGVkKGRhdGUsIHR5cGUpIHtcbiAgICAgIGlmICh0eXBlID09PSAnaG91cicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNEaXNhYmxlZEhvdXIoZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSAnbWludXRlJykge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0Rpc2FibGVkTWludXRlKGRhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ2FtcG0nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRGlzYWJsZWRBTVBNKGRhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5pc0Rpc2FibGVkVGltZShkYXRlKTtcbiAgICB9LFxuICAgIGhhbmRsZVNlbGVjdDogZnVuY3Rpb24gaGFuZGxlU2VsZWN0KHZhbHVlLCB0eXBlKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKHZhbHVlKTtcblxuICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQodmFsdWUsIHR5cGUpKSB7XG4gICAgICAgIHRoaXMuaW5uZXJWYWx1ZSA9IGRhdGU7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWRUaW1lKGRhdGUpKSB7XG4gICAgICAgICAgdGhpcy4kZW1pdCgnc2VsZWN0JywgZGF0ZSwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGhhbmRsZUNsaWNrVGl0bGU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrVGl0bGUoKSB7XG4gICAgICB0aGlzLiRlbWl0KCdjbGlja3RpdGxlJyk7XG4gICAgfSxcbiAgICBnZXRDbGFzc2VzOiBmdW5jdGlvbiBnZXRDbGFzc2VzKHZhbHVlLCB0eXBlKSB7XG4gICAgICB2YXIgY2VsbERhdGUgPSBuZXcgRGF0ZSh2YWx1ZSk7XG5cbiAgICAgIGlmICh0aGlzLmlzRGlzYWJsZWQodmFsdWUsIHR5cGUpKSB7XG4gICAgICAgIHJldHVybiAnZGlzYWJsZWQnO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2VsbERhdGUuZ2V0VGltZSgpID09PSB0aGlzLmlubmVyVmFsdWUuZ2V0VGltZSgpKSB7XG4gICAgICAgIHJldHVybiAnYWN0aXZlJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufTtcblxuLyogc2NyaXB0ICovXG52YXIgX192dWVfc2NyaXB0X18kOCA9IHNjcmlwdCQ4O1xuLyogdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX3JlbmRlcl9fJGIgPSBmdW5jdGlvbiBfX3Z1ZV9yZW5kZXJfXygpIHtcbiAgdmFyIF92bSA9IHRoaXM7XG5cbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50O1xuXG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaDtcblxuICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICBjbGFzczogX3ZtLnByZWZpeENsYXNzICsgXCItdGltZVwiXG4gIH0sIFtfdm0uc2hvd1RpbWVIZWFkZXIgPyBfYygnZGl2Jywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi10aW1lLWhlYWRlclwiXG4gIH0sIFtfYygnYnV0dG9uJywge1xuICAgIGNsYXNzOiBfdm0ucHJlZml4Q2xhc3MgKyBcIi1idG4gXCIgKyBfdm0ucHJlZml4Q2xhc3MgKyBcIi1idG4tdGV4dCBcIiArIF92bS5wcmVmaXhDbGFzcyArIFwiLXRpbWUtaGVhZGVyLXRpdGxlXCIsXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBfdm0uaGFuZGxlQ2xpY2tUaXRsZVxuICAgIH1cbiAgfSwgW192bS5fdihcIlxcbiAgICAgIFwiICsgX3ZtLl9zKF92bS50aXRsZSkgKyBcIlxcbiAgICBcIildKV0pIDogX3ZtLl9lKCksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgY2xhc3M6IF92bS5wcmVmaXhDbGFzcyArIFwiLXRpbWUtY29udGVudFwiXG4gIH0sIFtfdm0udGltZVBpY2tlck9wdGlvbnMgPyBfYygnbGlzdC1vcHRpb25zJywge1xuICAgIGF0dHJzOiB7XG4gICAgICBcImRhdGVcIjogX3ZtLmlubmVyVmFsdWUsXG4gICAgICBcImdldC1jbGFzc2VzXCI6IF92bS5nZXRDbGFzc2VzLFxuICAgICAgXCJvcHRpb25zXCI6IF92bS50aW1lUGlja2VyT3B0aW9ucyxcbiAgICAgIFwiZm9ybWF0XCI6IF92bS5pbm5lckZvcmFtdFxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwic2VsZWN0XCI6IF92bS5oYW5kbGVTZWxlY3RcbiAgICB9XG4gIH0pIDogX2MoJ2xpc3QtY29sdW1ucycsIF92bS5fYih7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiZGF0ZVwiOiBfdm0uaW5uZXJWYWx1ZSxcbiAgICAgIFwiZ2V0LWNsYXNzZXNcIjogX3ZtLmdldENsYXNzZXMsXG4gICAgICBcImhvdXItb3B0aW9uc1wiOiBfdm0uaG91ck9wdGlvbnMsXG4gICAgICBcIm1pbnV0ZS1vcHRpb25zXCI6IF92bS5taW51dGVPcHRpb25zLFxuICAgICAgXCJzZWNvbmQtb3B0aW9uc1wiOiBfdm0uc2Vjb25kT3B0aW9ucyxcbiAgICAgIFwiaG91ci1zdGVwXCI6IF92bS5ob3VyU3RlcCxcbiAgICAgIFwibWludXRlLXN0ZXBcIjogX3ZtLm1pbnV0ZVN0ZXAsXG4gICAgICBcInNlY29uZC1zdGVwXCI6IF92bS5zZWNvbmRTdGVwLFxuICAgICAgXCJzY3JvbGwtZHVyYXRpb25cIjogX3ZtLnNjcm9sbER1cmF0aW9uXG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgXCJzZWxlY3RcIjogX3ZtLmhhbmRsZVNlbGVjdFxuICAgIH1cbiAgfSwgJ2xpc3QtY29sdW1ucycsIF92bS5TaG93SG91ck1pbnV0ZVNlY29uZEFNUE0sIGZhbHNlKSldLCAxKV0pO1xufTtcblxudmFyIF9fdnVlX3N0YXRpY1JlbmRlckZuc19fJGIgPSBbXTtcbi8qIHN0eWxlICovXG5cbnZhciBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kYiA9IHVuZGVmaW5lZDtcbi8qIHNjb3BlZCAqL1xuXG52YXIgX192dWVfc2NvcGVfaWRfXyRiID0gdW5kZWZpbmVkO1xuLyogbW9kdWxlIGlkZW50aWZpZXIgKi9cblxudmFyIF9fdnVlX21vZHVsZV9pZGVudGlmaWVyX18kYiA9IHVuZGVmaW5lZDtcbi8qIGZ1bmN0aW9uYWwgdGVtcGxhdGUgKi9cblxudmFyIF9fdnVlX2lzX2Z1bmN0aW9uYWxfdGVtcGxhdGVfXyRiID0gZmFsc2U7XG4vKiBzdHlsZSBpbmplY3QgKi9cblxuLyogc3R5bGUgaW5qZWN0IFNTUiAqL1xuXG4vKiBzdHlsZSBpbmplY3Qgc2hhZG93IGRvbSAqL1xuXG52YXIgX192dWVfY29tcG9uZW50X18kYiA9IG5vcm1hbGl6ZUNvbXBvbmVudCh7XG4gIHJlbmRlcjogX192dWVfcmVuZGVyX18kYixcbiAgc3RhdGljUmVuZGVyRm5zOiBfX3Z1ZV9zdGF0aWNSZW5kZXJGbnNfXyRiXG59LCBfX3Z1ZV9pbmplY3Rfc3R5bGVzX18kYiwgX192dWVfc2NyaXB0X18kOCwgX192dWVfc2NvcGVfaWRfXyRiLCBfX3Z1ZV9pc19mdW5jdGlvbmFsX3RlbXBsYXRlX18kYiwgX192dWVfbW9kdWxlX2lkZW50aWZpZXJfXyRiLCBmYWxzZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG5cbnZhciBUaW1lUmFuZ2UgPSB7XG4gIG5hbWU6ICdUaW1lUmFuZ2UnLFxuICBpbmplY3Q6IHtcbiAgICBwcmVmaXhDbGFzczoge1xuICAgICAgZGVmYXVsdDogJ214J1xuICAgIH1cbiAgfSxcbiAgcHJvcHM6IF9vYmplY3RTcHJlYWQyKHt9LCBfX3Z1ZV9jb21wb25lbnRfXyRiLnByb3BzKSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnRWYWx1ZTogbmV3IERhdGUoTmFOKSxcbiAgICAgIGVuZFZhbHVlOiBuZXcgRGF0ZShOYU4pXG4gICAgfTtcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICB2YWx1ZToge1xuICAgICAgaW1tZWRpYXRlOiB0cnVlLFxuICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgaWYgKGlzVmFsaWRSYW5nZURhdGUodGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICB2YXIgX3RoaXMkdmFsdWUgPSBfc2xpY2VkVG9BcnJheSh0aGlzLnZhbHVlLCAyKSxcbiAgICAgICAgICAgICAgc3RhcnRWYWx1ZSA9IF90aGlzJHZhbHVlWzBdLFxuICAgICAgICAgICAgICBlbmRWYWx1ZSA9IF90aGlzJHZhbHVlWzFdO1xuXG4gICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gc3RhcnRWYWx1ZTtcbiAgICAgICAgICB0aGlzLmVuZFZhbHVlID0gZW5kVmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zdGFydFZhbHVlID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgICB0aGlzLmVuZFZhbHVlID0gbmV3IERhdGUoTmFOKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIGVtaXRDaGFuZ2U6IGZ1bmN0aW9uIGVtaXRDaGFuZ2UodHlwZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkYXRlID0gW3RoaXMuc3RhcnRWYWx1ZSwgdGhpcy5lbmRWYWx1ZV07XG4gICAgICB0aGlzLiRlbWl0KCdzZWxlY3QnLCBkYXRlLCB0eXBlID09PSAndGltZScgPyAndGltZS1yYW5nZScgOiB0eXBlLCBpbmRleCk7XG4gICAgfSxcbiAgICBoYW5kbGVTZWxlY3RTdGFydDogZnVuY3Rpb24gaGFuZGxlU2VsZWN0U3RhcnQoZGF0ZSwgdHlwZSkge1xuICAgICAgdGhpcy5zdGFydFZhbHVlID0gZGF0ZTsgLy8gY2hlY2sgdGhlIE5hTlxuXG4gICAgICBpZiAoISh0aGlzLmVuZFZhbHVlLmdldFRpbWUoKSA+PSBkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgICAgdGhpcy5lbmRWYWx1ZSA9IGRhdGU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZW1pdENoYW5nZSh0eXBlLCAwKTtcbiAgICB9LFxuICAgIGhhbmRsZVNlbGVjdEVuZDogZnVuY3Rpb24gaGFuZGxlU2VsZWN0RW5kKGRhdGUsIHR5cGUpIHtcbiAgICAgIC8vIGNoZWNrIHRoZSBOYU5cbiAgICAgIHRoaXMuZW5kVmFsdWUgPSBkYXRlO1xuXG4gICAgICBpZiAoISh0aGlzLnN0YXJ0VmFsdWUuZ2V0VGltZSgpIDw9IGRhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICB0aGlzLnN0YXJ0VmFsdWUgPSBkYXRlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVtaXRDaGFuZ2UodHlwZSwgMSk7XG4gICAgfSxcbiAgICBkaXNhYmxlZFN0YXJ0VGltZTogZnVuY3Rpb24gZGlzYWJsZWRTdGFydFRpbWUoZGF0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuZGlzYWJsZWRUaW1lKGRhdGUsIDApO1xuICAgIH0sXG4gICAgZGlzYWJsZWRFbmRUaW1lOiBmdW5jdGlvbiBkaXNhYmxlZEVuZFRpbWUoZGF0ZSkge1xuICAgICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpIDwgdGhpcy5zdGFydFZhbHVlLmdldFRpbWUoKSB8fCB0aGlzLmRpc2FibGVkVGltZShkYXRlLCAxKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBoID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBkZWZhdWx0VmFsdWVzID0gQXJyYXkuaXNBcnJheSh0aGlzLmRlZmF1bHRWYWx1ZSkgPyB0aGlzLmRlZmF1bHRWYWx1ZSA6IFt0aGlzLmRlZmF1bHRWYWx1ZSwgdGhpcy5kZWZhdWx0VmFsdWVdO1xuICAgIHZhciBwcmVmaXhDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3M7XG4gICAgcmV0dXJuIGgoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItcmFuZ2Utd3JhcHBlclwiKVxuICAgIH0sIFtoKF9fdnVlX2NvbXBvbmVudF9fJGIsIHtcbiAgICAgIFwicHJvcHNcIjogX29iamVjdFNwcmVhZDIoe30sIF9vYmplY3RTcHJlYWQyKHt9LCB0aGlzLiRwcm9wcywge1xuICAgICAgICB2YWx1ZTogdGhpcy5zdGFydFZhbHVlLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZXNbMF0sXG4gICAgICAgIGRpc2FibGVkVGltZTogdGhpcy5kaXNhYmxlZFN0YXJ0VGltZVxuICAgICAgfSkpLFxuICAgICAgXCJvblwiOiBfb2JqZWN0U3ByZWFkMih7fSwgX29iamVjdFNwcmVhZDIoe30sIHRoaXMuJGxpc3RlbmVycywge1xuICAgICAgICBzZWxlY3Q6IHRoaXMuaGFuZGxlU2VsZWN0U3RhcnRcbiAgICAgIH0pKVxuICAgIH0pLCBoKF9fdnVlX2NvbXBvbmVudF9fJGIsIHtcbiAgICAgIFwicHJvcHNcIjogX29iamVjdFNwcmVhZDIoe30sIF9vYmplY3RTcHJlYWQyKHt9LCB0aGlzLiRwcm9wcywge1xuICAgICAgICB2YWx1ZTogdGhpcy5lbmRWYWx1ZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWVzWzFdLFxuICAgICAgICBkaXNhYmxlZFRpbWU6IHRoaXMuZGlzYWJsZWRFbmRUaW1lXG4gICAgICB9KSksXG4gICAgICBcIm9uXCI6IF9vYmplY3RTcHJlYWQyKHt9LCBfb2JqZWN0U3ByZWFkMih7fSwgdGhpcy4kbGlzdGVuZXJzLCB7XG4gICAgICAgIHNlbGVjdDogdGhpcy5oYW5kbGVTZWxlY3RFbmRcbiAgICAgIH0pKVxuICAgIH0pXSk7XG4gIH1cbn07XG5cbnZhciBEYXRldGltZVBhbmVsID0ge1xuICBuYW1lOiAnRGF0ZXRpbWVQYW5lbCcsXG4gIGluamVjdDoge1xuICAgIHByZWZpeENsYXNzOiB7XG4gICAgICBkZWZhdWx0OiAnbXgnXG4gICAgfVxuICB9LFxuICBlbWl0czogWydzZWxlY3QnLCAndXBkYXRlOnNob3ctdGltZS1wYW5lbCddLFxuICBwcm9wczogX29iamVjdFNwcmVhZDIoe30sIENhbGVuZGFyUGFuZWwucHJvcHMsIHt9LCBfX3Z1ZV9jb21wb25lbnRfXyRiLnByb3BzLCB7XG4gICAgc2hvd1RpbWVQYW5lbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSksXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmF1bHRUaW1lVmlzaWJsZTogZmFsc2UsXG4gICAgICBjdXJyZW50VmFsdWU6IHRoaXMudmFsdWVcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHRpbWVWaXNpYmxlOiBmdW5jdGlvbiB0aW1lVmlzaWJsZSgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5zaG93VGltZVBhbmVsID09PSAnYm9vbGVhbicgPyB0aGlzLnNob3dUaW1lUGFuZWwgOiB0aGlzLmRlZmF1bHRUaW1lVmlzaWJsZTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHZhbCkge1xuICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB2YWw7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VUaW1lUGFuZWw6IGZ1bmN0aW9uIGNsb3NlVGltZVBhbmVsKCkge1xuICAgICAgdGhpcy5kZWZhdWx0VGltZVZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpzaG93LXRpbWUtcGFuZWwnLCBmYWxzZSk7XG4gICAgfSxcbiAgICBvcGVuVGltZVBhbmVsOiBmdW5jdGlvbiBvcGVuVGltZVBhbmVsKCkge1xuICAgICAgdGhpcy5kZWZhdWx0VGltZVZpc2libGUgPSB0cnVlO1xuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnNob3ctdGltZS1wYW5lbCcsIHRydWUpO1xuICAgIH0sXG4gICAgZW1pdERhdGU6IGZ1bmN0aW9uIGVtaXREYXRlKGRhdGUsIHR5cGUpIHtcbiAgICAgIHRoaXMuJGVtaXQoJ3NlbGVjdCcsIGRhdGUsIHR5cGUpO1xuICAgIH0sXG4gICAgaGFuZGxlU2VsZWN0OiBmdW5jdGlvbiBoYW5kbGVTZWxlY3QoZGF0ZSwgdHlwZSkge1xuICAgICAgaWYgKHR5cGUgPT09ICdkYXRlJykge1xuICAgICAgICB0aGlzLm9wZW5UaW1lUGFuZWwoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGV0aW1lID0gYXNzaWduVGltZShkYXRlLCBnZXRWYWxpZERhdGUodGhpcy52YWx1ZSwgdGhpcy5kZWZhdWx0VmFsdWUpKTtcblxuICAgICAgaWYgKHRoaXMuZGlzYWJsZWRUaW1lKG5ldyBEYXRlKGRhdGV0aW1lKSkpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB0aW1lIG9mIGRlZmFsdXRWYWx1ZTtcbiAgICAgICAgZGF0ZXRpbWUgPSBhc3NpZ25UaW1lKGRhdGUsIHRoaXMuZGVmYXVsdFZhbHVlKTtcblxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZFRpbWUobmV3IERhdGUoZGF0ZXRpbWUpKSkge1xuICAgICAgICAgIC8vIGlmIGRpc2FibGVkIGRvbid0IGVtaXQgZGF0ZVxuICAgICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gZGF0ZXRpbWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZW1pdERhdGUoZGF0ZXRpbWUsIHR5cGUpO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGggPSBhcmd1bWVudHNbMF07XG4gICAgdmFyIGNhbGVuZGFyUHJvcHMgPSB7XG4gICAgICBwcm9wczogX29iamVjdFNwcmVhZDIoe30sIHBpY2sodGhpcy4kcHJvcHMsIE9iamVjdC5rZXlzKENhbGVuZGFyUGFuZWwucHJvcHMpKSwge1xuICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgIHZhbHVlOiB0aGlzLmN1cnJlbnRWYWx1ZVxuICAgICAgfSksXG4gICAgICBvbjoge1xuICAgICAgICBzZWxlY3Q6IHRoaXMuaGFuZGxlU2VsZWN0XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgdGltZVByb3BzID0ge1xuICAgICAgcHJvcHM6IF9vYmplY3RTcHJlYWQyKHt9LCBwaWNrKHRoaXMuJHByb3BzLCBPYmplY3Qua2V5cyhfX3Z1ZV9jb21wb25lbnRfXyRiLnByb3BzKSksIHtcbiAgICAgICAgc2hvd1RpbWVIZWFkZXI6IHRydWUsXG4gICAgICAgIHZhbHVlOiB0aGlzLmN1cnJlbnRWYWx1ZVxuICAgICAgfSksXG4gICAgICBvbjoge1xuICAgICAgICBzZWxlY3Q6IHRoaXMuZW1pdERhdGUsXG4gICAgICAgIGNsaWNrdGl0bGU6IHRoaXMuY2xvc2VUaW1lUGFuZWxcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwcmVmaXhDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3M7XG4gICAgcmV0dXJuIGgoXCJkaXZcIiwgW2goQ2FsZW5kYXJQYW5lbCwgaGVscGVyKFt7fSwgY2FsZW5kYXJQcm9wc10pKSwgdGhpcy50aW1lVmlzaWJsZSAmJiBoKF9fdnVlX2NvbXBvbmVudF9fJGIsIGhlbHBlcihbe1xuICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItY2FsZW5kYXItdGltZVwiKVxuICAgIH0sIHRpbWVQcm9wc10pKV0pO1xuICB9XG59O1xuXG52YXIgRGF0ZXRpbWVSYW5nZSA9IHtcbiAgbmFtZTogJ0RhdGV0aW1lUmFuZ2UnLFxuICBpbmplY3Q6IHtcbiAgICBwcmVmaXhDbGFzczoge1xuICAgICAgZGVmYXVsdDogJ214J1xuICAgIH1cbiAgfSxcbiAgZW1pdHM6IFsnc2VsZWN0JywgJ3VwZGF0ZTpzaG93LXRpbWUtcGFuZWwnXSxcbiAgcHJvcHM6IF9vYmplY3RTcHJlYWQyKHt9LCBDYWxlbmRhclJhbmdlLnByb3BzLCB7fSwgVGltZVJhbmdlLnByb3BzLCB7XG4gICAgc2hvd1RpbWVQYW5lbDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH1cbiAgfSksXG4gIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmF1bHRUaW1lVmlzaWJsZTogZmFsc2UsXG4gICAgICBjdXJyZW50VmFsdWU6IHRoaXMudmFsdWVcbiAgICB9O1xuICB9LFxuICBjb21wdXRlZDoge1xuICAgIHRpbWVWaXNpYmxlOiBmdW5jdGlvbiB0aW1lVmlzaWJsZSgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5zaG93VGltZVBhbmVsID09PSAnYm9vbGVhbicgPyB0aGlzLnNob3dUaW1lUGFuZWwgOiB0aGlzLmRlZmF1bHRUaW1lVmlzaWJsZTtcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uIHZhbHVlKHZhbCkge1xuICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB2YWw7XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgY2xvc2VUaW1lUGFuZWw6IGZ1bmN0aW9uIGNsb3NlVGltZVBhbmVsKCkge1xuICAgICAgdGhpcy5kZWZhdWx0VGltZVZpc2libGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpzaG93LXRpbWUtcGFuZWwnLCBmYWxzZSk7XG4gICAgfSxcbiAgICBvcGVuVGltZVBhbmVsOiBmdW5jdGlvbiBvcGVuVGltZVBhbmVsKCkge1xuICAgICAgdGhpcy5kZWZhdWx0VGltZVZpc2libGUgPSB0cnVlO1xuICAgICAgdGhpcy4kZW1pdCgndXBkYXRlOnNob3ctdGltZS1wYW5lbCcsIHRydWUpO1xuICAgIH0sXG4gICAgZW1pdERhdGU6IGZ1bmN0aW9uIGVtaXREYXRlKGRhdGVzLCB0eXBlKSB7XG4gICAgICB0aGlzLiRlbWl0KCdzZWxlY3QnLCBkYXRlcywgdHlwZSk7XG4gICAgfSxcbiAgICBoYW5kbGVTZWxlY3Q6IGZ1bmN0aW9uIGhhbmRsZVNlbGVjdChkYXRlcywgdHlwZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHR5cGUgPT09ICdkYXRlJykge1xuICAgICAgICB0aGlzLm9wZW5UaW1lUGFuZWwoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlZmF1bHRWYWx1ZXMgPSBBcnJheS5pc0FycmF5KHRoaXMuZGVmYXVsdFZhbHVlKSA/IHRoaXMuZGVmYXVsdFZhbHVlIDogW3RoaXMuZGVmYXVsdFZhbHVlLCB0aGlzLmRlZmF1bHRWYWx1ZV07XG4gICAgICB2YXIgZGF0ZXRpbWVzID0gZGF0ZXMubWFwKGZ1bmN0aW9uIChkYXRlLCBpKSB7XG4gICAgICAgIHZhciB0aW1lID0gaXNWYWxpZFJhbmdlRGF0ZShfdGhpcy52YWx1ZSkgPyBfdGhpcy52YWx1ZVtpXSA6IGRlZmF1bHRWYWx1ZXNbaV07XG4gICAgICAgIHJldHVybiBhc3NpZ25UaW1lKGRhdGUsIHRpbWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChkYXRldGltZXNbMV0uZ2V0VGltZSgpIDwgZGF0ZXRpbWVzWzBdLmdldFRpbWUoKSkge1xuICAgICAgICBkYXRldGltZXMgPSBbZGF0ZXRpbWVzWzBdLCBkYXRldGltZXNbMF1dO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0ZXRpbWVzLnNvbWUodGhpcy5kaXNhYmxlZFRpbWUpKSB7XG4gICAgICAgIGRhdGV0aW1lcyA9IGRhdGVzLm1hcChmdW5jdGlvbiAoZGF0ZSwgaSkge1xuICAgICAgICAgIHJldHVybiBhc3NpZ25UaW1lKGRhdGUsIGRlZmF1bHRWYWx1ZXNbaV0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoZGF0ZXRpbWVzLnNvbWUodGhpcy5kaXNhYmxlZFRpbWUpKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSBkYXRldGltZXM7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZW1pdERhdGUoZGF0ZXRpbWVzLCB0eXBlKTtcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBoID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBjYWxlbmRhclByb3BzID0ge1xuICAgICAgcHJvcHM6IF9vYmplY3RTcHJlYWQyKHt9LCBwaWNrKHRoaXMuJHByb3BzLCBPYmplY3Qua2V5cyhDYWxlbmRhclJhbmdlLnByb3BzKSksIHtcbiAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICB2YWx1ZTogdGhpcy5jdXJyZW50VmFsdWVcbiAgICAgIH0pLFxuICAgICAgb246IHtcbiAgICAgICAgc2VsZWN0OiB0aGlzLmhhbmRsZVNlbGVjdFxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHRpbWVQcm9wcyA9IHtcbiAgICAgIHByb3BzOiBfb2JqZWN0U3ByZWFkMih7fSwgcGljayh0aGlzLiRwcm9wcywgT2JqZWN0LmtleXMoVGltZVJhbmdlLnByb3BzKSksIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuY3VycmVudFZhbHVlLFxuICAgICAgICBzaG93VGltZUhlYWRlcjogdHJ1ZVxuICAgICAgfSksXG4gICAgICBvbjoge1xuICAgICAgICBzZWxlY3Q6IHRoaXMuZW1pdERhdGUsXG4gICAgICAgIGNsaWNrdGl0bGU6IHRoaXMuY2xvc2VUaW1lUGFuZWxcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwcmVmaXhDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3M7XG4gICAgcmV0dXJuIGgoXCJkaXZcIiwgW2goQ2FsZW5kYXJSYW5nZSwgaGVscGVyKFt7fSwgY2FsZW5kYXJQcm9wc10pKSwgdGhpcy50aW1lVmlzaWJsZSAmJiBoKFRpbWVSYW5nZSwgaGVscGVyKFt7XG4gICAgICBcImNsYXNzXCI6IFwiXCIuY29uY2F0KHByZWZpeENsYXNzLCBcIi1jYWxlbmRhci10aW1lXCIpXG4gICAgfSwgdGltZVByb3BzXSkpXSk7XG4gIH1cbn07XG5cbnZhciBjb21wb25lbnRNYXAgPSB7XG4gIGRlZmF1bHQ6IENhbGVuZGFyUGFuZWwsXG4gIHRpbWU6IF9fdnVlX2NvbXBvbmVudF9fJGIsXG4gIGRhdGV0aW1lOiBEYXRldGltZVBhbmVsXG59O1xudmFyIGNvbXBvbmVudFJhbmdlTWFwID0ge1xuICBkZWZhdWx0OiBDYWxlbmRhclJhbmdlLFxuICB0aW1lOiBUaW1lUmFuZ2UsXG4gIGRhdGV0aW1lOiBEYXRldGltZVJhbmdlXG59O1xudmFyIERhdGVQaWNrZXIgPSB7XG4gIG5hbWU6ICdEYXRlUGlja2VyJyxcbiAgcHJvdmlkZTogZnVuY3Rpb24gcHJvdmlkZSgpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIG1ha2UgbG9jYWxlIHJlYWN0aXZlXG4gICAgICBnZXRMb2NhbGU6IGZ1bmN0aW9uIGdldExvY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmxvY2FsZTtcbiAgICAgIH0sXG4gICAgICBnZXRXZWVrOiB0aGlzLmdldFdlZWssXG4gICAgICBwcmVmaXhDbGFzczogdGhpcy5wcmVmaXhDbGFzcyxcbiAgICAgIGRpc3BhdGNoRGF0ZVBpY2tlcjogdGhpcy4kZW1pdC5iaW5kKHRoaXMpXG4gICAgfTtcbiAgfSxcbiAgcHJvcHM6IF9vYmplY3RTcHJlYWQyKHt9LCBEYXRldGltZVBhbmVsLnByb3BzLCB7XG4gICAgdmFsdWU6IHt9LFxuICAgIHZhbHVlVHlwZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RhdGUnIC8vIGRhdGUsIGZvcm1hdCwgdGltZXN0YW1wLCBvciB0b2tlbiBsaWtlICdZWVlZLU1NLUREJ1xuXG4gICAgfSxcbiAgICB0eXBlOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAvLyBbJ2RhdGUnLCAnZGF0ZXRpbWUnLCAndGltZScsICd5ZWFyJywgJ21vbnRoJywgJ3dlZWsnXVxuICAgICAgZGVmYXVsdDogJ2RhdGUnXG4gICAgfSxcbiAgICBmb3JtYXQ6IHtcbiAgICAgIHR5cGU6IFN0cmluZ1xuICAgIH0sXG4gICAgZm9ybWF0dGVyOiB7XG4gICAgICB0eXBlOiBPYmplY3RcbiAgICB9LFxuICAgIHJhbmdlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIG11bHRpcGxlOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIHJhbmdlU2VwYXJhdG9yOiB7XG4gICAgICB0eXBlOiBTdHJpbmdcbiAgICB9LFxuICAgIGxhbmc6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE9iamVjdF1cbiAgICB9LFxuICAgIHBsYWNlaG9sZGVyOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnJ1xuICAgIH0sXG4gICAgZWRpdGFibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBkaXNhYmxlZDoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBjbGVhcmFibGU6IHtcbiAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBwcmVmaXhDbGFzczoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ214J1xuICAgIH0sXG4gICAgaW5wdXRDbGFzczoge30sXG4gICAgaW5wdXRBdHRyOiB7XG4gICAgICB0eXBlOiBPYmplY3QsXG4gICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgfVxuICAgIH0sXG4gICAgYXBwZW5kVG9Cb2R5OiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgb3Blbjoge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IHVuZGVmaW5lZFxuICAgIH0sXG4gICAgcG9wdXBDbGFzczoge30sXG4gICAgcG9wdXBTdHlsZToge1xuICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlubGluZToge1xuICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBjb25maXJtOiB7XG4gICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGNvbmZpcm1UZXh0OiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnT0snXG4gICAgfSxcbiAgICByZW5kZXJJbnB1dFRleHQ6IHtcbiAgICAgIHR5cGU6IEZ1bmN0aW9uXG4gICAgfSxcbiAgICBzaG9ydGN1dHM6IHtcbiAgICAgIHR5cGU6IEFycmF5LFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHR5cGVvZiB2LnRleHQgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB2Lm9uQ2xpY2sgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfVxuICB9KSxcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gY2FjaGUgdGhlIGlubmVydmFsdWUsIHdhaXQgdG8gY29uZmlybVxuICAgICAgY3VycmVudFZhbHVlOiBudWxsLFxuICAgICAgdXNlcklucHV0OiBudWxsLFxuICAgICAgZGVmYXVsdE9wZW46IGZhbHNlXG4gICAgfTtcbiAgfSxcbiAgY29tcHV0ZWQ6IHtcbiAgICBwb3B1cFZpc2libGU6IGZ1bmN0aW9uIHBvcHVwVmlzaWJsZSgpIHtcbiAgICAgIHJldHVybiAhdGhpcy5kaXNhYmxlZCAmJiAodHlwZW9mIHRoaXMub3BlbiA9PT0gJ2Jvb2xlYW4nID8gdGhpcy5vcGVuIDogdGhpcy5kZWZhdWx0T3Blbik7XG4gICAgfSxcbiAgICBpbm5lclJhbmdlU2VwYXJhdG9yOiBmdW5jdGlvbiBpbm5lclJhbmdlU2VwYXJhdG9yKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmFuZ2VTZXBhcmF0b3IgfHwgKHRoaXMubXVsdGlwbGUgPyAnLCcgOiAnIH4gJyk7XG4gICAgfSxcbiAgICBpbm5lckZvcm1hdDogZnVuY3Rpb24gaW5uZXJGb3JtYXQoKSB7XG4gICAgICB2YXIgbWFwID0ge1xuICAgICAgICBkYXRlOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgIGRhdGV0aW1lOiAnWVlZWS1NTS1ERCBISDptbTpzcycsXG4gICAgICAgIHllYXI6ICdZWVlZJyxcbiAgICAgICAgbW9udGg6ICdZWVlZLU1NJyxcbiAgICAgICAgdGltZTogJ0hIOm1tOnNzJyxcbiAgICAgICAgd2VlazogJ3cnXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0IHx8IG1hcFt0aGlzLnR5cGVdIHx8IG1hcC5kYXRlO1xuICAgIH0sXG4gICAgaW5uZXJWYWx1ZTogZnVuY3Rpb24gaW5uZXJWYWx1ZSgpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLnZhbGlkTXVsdGlwbGVUeXBlKSB7XG4gICAgICAgIHZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgICAgICByZXR1cm4gdmFsdWUubWFwKHRoaXMudmFsdWUyZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnJhbmdlKSB7XG4gICAgICAgIHZhbHVlID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZS5zbGljZSgwLCAyKSA6IFtudWxsLCBudWxsXTtcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCh0aGlzLnZhbHVlMmRhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy52YWx1ZTJkYXRlKHZhbHVlKTtcbiAgICB9LFxuICAgIHRleHQ6IGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMudXNlcklucHV0ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZXJJbnB1dDtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlbmRlcklucHV0VGV4dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJJbnB1dFRleHQodGhpcy5pbm5lclZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRWYWx1ZSh0aGlzLmlubmVyVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5pbm5lclZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbm5lclZhbHVlLm1hcChmdW5jdGlvbiAodikge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuZm9ybWF0RGF0ZSh2KTtcbiAgICAgICAgfSkuam9pbih0aGlzLmlubmVyUmFuZ2VTZXBhcmF0b3IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlKHRoaXMuaW5uZXJWYWx1ZSk7XG4gICAgfSxcbiAgICBzaG93Q2xlYXJJY29uOiBmdW5jdGlvbiBzaG93Q2xlYXJJY29uKCkge1xuICAgICAgcmV0dXJuICF0aGlzLmRpc2FibGVkICYmIHRoaXMuY2xlYXJhYmxlICYmIHRoaXMudGV4dDtcbiAgICB9LFxuICAgIGxvY2FsZTogZnVuY3Rpb24gbG9jYWxlKCkge1xuICAgICAgaWYgKGlzT2JqZWN0KHRoaXMubGFuZykpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGVlcChnZXRMb2NhbGUoKSwgdGhpcy5sYW5nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGdldExvY2FsZSh0aGlzLmxhbmcpO1xuICAgIH0sXG4gICAgdmFsaWRNdWx0aXBsZVR5cGU6IGZ1bmN0aW9uIHZhbGlkTXVsdGlwbGVUeXBlKCkge1xuICAgICAgdmFyIHR5cGVzID0gWydkYXRlJywgJ21vbnRoJywgJ3llYXInXTtcbiAgICAgIHJldHVybiB0aGlzLm11bHRpcGxlICYmICF0aGlzLnJhbmdlICYmIHR5cGVzLmluZGV4T2YodGhpcy50eXBlKSAhPT0gLTE7XG4gICAgfVxuICB9LFxuICB3YXRjaDoge1xuICAgIGlubmVyVmFsdWU6IHtcbiAgICAgIGltbWVkaWF0ZTogdHJ1ZSxcbiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIodmFsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFZhbHVlID0gdmFsO1xuICAgICAgfVxuICAgIH0sXG4gICAgcG9wdXBWaXNpYmxlOiB7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKHZhbCkge1xuICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB0aGlzLmlubmVyVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7XG4gICAgaWYgKF90eXBlb2YodGhpcy5mb3JtYXQpID09PSAnb2JqZWN0Jykge1xuICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZTItZGF0ZXBpY2tlcl06IFRoZSBwcm9wIGBmb3JtYXRgIGRvbid0IHN1cHBvcnQgT2JqZWN0IGFueSBtb3JlLiBZb3UgY2FuIHVzZSB0aGUgbmV3IHByb3AgYGZvcm1hdHRlcmAgdG8gcmVwbGFjZSBpdFwiKTtcbiAgICB9XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBoYW5kbGVDbGlja091dFNpZGU6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrT3V0U2lkZShldnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBldnQudGFyZ2V0O1xuXG4gICAgICBpZiAoIXRoaXMuJGVsLmNvbnRhaW5zKHRhcmdldCkpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcHVwKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRGb3JtYXR0ZXI6IGZ1bmN0aW9uIGdldEZvcm1hdHRlcihrZXkpIHtcbiAgICAgIHJldHVybiBpc09iamVjdCh0aGlzLmZvcm1hdHRlcikgJiYgdGhpcy5mb3JtYXR0ZXJba2V5XSB8fCBpc09iamVjdCh0aGlzLmZvcm1hdCkgJiYgdGhpcy5mb3JtYXRba2V5XTtcbiAgICB9LFxuICAgIGdldFdlZWs6IGZ1bmN0aW9uIGdldFdlZWskMShkYXRlLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXMuZ2V0Rm9ybWF0dGVyKCdnZXRXZWVrJykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm9ybWF0dGVyKCdnZXRXZWVrJykoZGF0ZSwgb3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgcGFyc2VEYXRlOiBmdW5jdGlvbiBwYXJzZURhdGUodmFsdWUsIGZtdCkge1xuICAgICAgZm10ID0gZm10IHx8IHRoaXMuaW5uZXJGb3JtYXQ7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5nZXRGb3JtYXR0ZXIoJ3BhcnNlJykgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm9ybWF0dGVyKCdwYXJzZScpKHZhbHVlLCBmbXQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmFja3VwRGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICByZXR1cm4gcGFyc2UodmFsdWUsIGZtdCwge1xuICAgICAgICBsb2NhbGU6IHRoaXMubG9jYWxlLmZvcm1hdExvY2FsZSxcbiAgICAgICAgYmFja3VwRGF0ZTogYmFja3VwRGF0ZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBmb3JtYXREYXRlOiBmdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUsIGZtdCkge1xuICAgICAgZm10ID0gZm10IHx8IHRoaXMuaW5uZXJGb3JtYXQ7XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5nZXRGb3JtYXR0ZXIoJ3N0cmluZ2lmeScpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldEZvcm1hdHRlcignc3RyaW5naWZ5JykoZGF0ZSwgZm10KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdChkYXRlLCBmbXQsIHtcbiAgICAgICAgbG9jYWxlOiB0aGlzLmxvY2FsZS5mb3JtYXRMb2NhbGVcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8gdHJhbnNmb3JtIHRoZSBvdXRlciB2YWx1ZSB0byBpbm5lciBkYXRlXG4gICAgdmFsdWUyZGF0ZTogZnVuY3Rpb24gdmFsdWUyZGF0ZSh2YWx1ZSkge1xuICAgICAgc3dpdGNoICh0aGlzLnZhbHVlVHlwZSkge1xuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBEYXRlID8gbmV3IERhdGUodmFsdWUuZ2V0VGltZSgpKSA6IG5ldyBEYXRlKE5hTik7XG5cbiAgICAgICAgY2FzZSAndGltZXN0YW1wJzpcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyA/IG5ldyBEYXRlKHZhbHVlKSA6IG5ldyBEYXRlKE5hTik7XG5cbiAgICAgICAgY2FzZSAnZm9ybWF0JzpcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHRoaXMucGFyc2VEYXRlKHZhbHVlKSA6IG5ldyBEYXRlKE5hTik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHRoaXMucGFyc2VEYXRlKHZhbHVlLCB0aGlzLnZhbHVlVHlwZSkgOiBuZXcgRGF0ZShOYU4pO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gdHJhbnNmb3JtIHRoZSBpbm5lciBkYXRlIHRvIG91dGVyIHZhbHVlXG4gICAgZGF0ZTJ2YWx1ZTogZnVuY3Rpb24gZGF0ZTJ2YWx1ZShkYXRlKSB7XG4gICAgICBpZiAoIWlzVmFsaWREYXRlKGRhdGUpKSByZXR1cm4gbnVsbDtcblxuICAgICAgc3dpdGNoICh0aGlzLnZhbHVlVHlwZSkge1xuICAgICAgICBjYXNlICdkYXRlJzpcbiAgICAgICAgICByZXR1cm4gZGF0ZTtcblxuICAgICAgICBjYXNlICd0aW1lc3RhbXAnOlxuICAgICAgICAgIHJldHVybiBkYXRlLmdldFRpbWUoKTtcblxuICAgICAgICBjYXNlICdmb3JtYXQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdERhdGUoZGF0ZSk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlKGRhdGUsIHRoaXMudmFsdWVUeXBlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVtaXRWYWx1ZTogZnVuY3Rpb24gZW1pdFZhbHVlKGRhdGUsIHR5cGUpIHtcbiAgICAgIHZhciBjbG9zZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogdHJ1ZTtcbiAgICAgIC8vIGZpeCBJRTExLzEwIHRyaWdnZXIgaW5wdXQgZXZlbnQgd2hlbiBpbnB1dCBpcyBmb2N1c2VkLiAocGxhY2Vob2xkZXIgIT09ICcnKVxuICAgICAgdGhpcy51c2VySW5wdXQgPSBudWxsO1xuICAgICAgdmFyIHZhbHVlID0gQXJyYXkuaXNBcnJheShkYXRlKSA/IGRhdGUubWFwKHRoaXMuZGF0ZTJ2YWx1ZSkgOiB0aGlzLmRhdGUydmFsdWUoZGF0ZSk7XG4gICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHZhbHVlKTtcbiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHZhbHVlLCB0eXBlKTtcblxuICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBpc1ZhbGlkVmFsdWU6IGZ1bmN0aW9uIGlzVmFsaWRWYWx1ZSh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMudmFsaWRNdWx0aXBsZVR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGlzVmFsaWREYXRlcyh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnJhbmdlKSB7XG4gICAgICAgIHJldHVybiBpc1ZhbGlkUmFuZ2VEYXRlKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlzVmFsaWREYXRlKHZhbHVlKTtcbiAgICB9LFxuICAgIGlzVmFsaWRWYWx1ZUFuZE5vdERpc2FibGVkOiBmdW5jdGlvbiBpc1ZhbGlkVmFsdWVBbmROb3REaXNhYmxlZCh2YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlzYWJsZWREYXRlID0gdHlwZW9mIHRoaXMuZGlzYWJsZWREYXRlID09PSAnZnVuY3Rpb24nID8gdGhpcy5kaXNhYmxlZERhdGUgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4gICAgICB2YXIgZGlzYWJsZWRUaW1lID0gdHlwZW9mIHRoaXMuZGlzYWJsZWRUaW1lID09PSAnZnVuY3Rpb24nID8gdGhpcy5kaXNhYmxlZFRpbWUgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWUuZXZlcnkoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuICFkaXNhYmxlZERhdGUodikgJiYgIWRpc2FibGVkVGltZSh2KTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgaGFuZGxlTXVsdGlwbGVEYXRlczogZnVuY3Rpb24gaGFuZGxlTXVsdGlwbGVEYXRlcyhkYXRlLCBkYXRlcykge1xuICAgICAgaWYgKHRoaXMudmFsaWRNdWx0aXBsZVR5cGUgJiYgZGF0ZXMpIHtcbiAgICAgICAgdmFyIG5leHREYXRlcyA9IGRhdGVzLmZpbHRlcihmdW5jdGlvbiAodikge1xuICAgICAgICAgIHJldHVybiB2LmdldFRpbWUoKSAhPT0gZGF0ZS5nZXRUaW1lKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChuZXh0RGF0ZXMubGVuZ3RoID09PSBkYXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICBuZXh0RGF0ZXMucHVzaChkYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXh0RGF0ZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH0sXG4gICAgaGFuZGxlU2VsZWN0RGF0ZTogZnVuY3Rpb24gaGFuZGxlU2VsZWN0RGF0ZSh2YWwsIHR5cGUsIGRhdGVzKSB7XG4gICAgICB2YWwgPSB0aGlzLmhhbmRsZU11bHRpcGxlRGF0ZXModmFsLCBkYXRlcyk7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpcm0pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB2YWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZSh2YWwsIHR5cGUsIC8vIHRoaXMudHlwZSA9PT0gJ2RhdGV0aW1lJywgY2xpY2sgdGhlIHRpbWUgc2hvdWxkIGNsb3NlIHBvcHVwXG4gICAgICAgICF0aGlzLnZhbGlkTXVsdGlwbGVUeXBlICYmICh0eXBlID09PSB0aGlzLnR5cGUgfHwgdHlwZSA9PT0gJ3RpbWUnKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICB0aGlzLmVtaXRWYWx1ZSh0aGlzLnJhbmdlID8gW251bGwsIG51bGxdIDogbnVsbCk7XG4gICAgICB0aGlzLiRlbWl0KCdjbGVhcicpO1xuICAgIH0sXG4gICAgaGFuZGxlQ2xlYXI6IGZ1bmN0aW9uIGhhbmRsZUNsZWFyKGV2dCkge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH0sXG4gICAgaGFuZGxlQ29uZmlybURhdGU6IGZ1bmN0aW9uIGhhbmRsZUNvbmZpcm1EYXRlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5lbWl0VmFsdWUodGhpcy5jdXJyZW50VmFsdWUpO1xuICAgICAgdGhpcy4kZW1pdCgnY29uZmlybScsIHZhbHVlKTtcbiAgICB9LFxuICAgIGhhbmRsZVNlbGVjdFNob3J0Y3V0OiBmdW5jdGlvbiBoYW5kbGVTZWxlY3RTaG9ydGN1dChldnQpIHtcbiAgICAgIHZhciBpbmRleCA9IGV2dC5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcpO1xuICAgICAgdmFyIGl0ZW0gPSB0aGlzLnNob3J0Y3V0c1twYXJzZUludChpbmRleCwgMTApXTtcblxuICAgICAgaWYgKGlzT2JqZWN0KGl0ZW0pICYmIHR5cGVvZiBpdGVtLm9uQ2xpY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBpdGVtLm9uQ2xpY2sodGhpcyk7XG5cbiAgICAgICAgaWYgKGRhdGUpIHtcbiAgICAgICAgICB0aGlzLmVtaXRWYWx1ZShkYXRlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgb3BlblBvcHVwOiBmdW5jdGlvbiBvcGVuUG9wdXAoZXZ0KSB7XG4gICAgICBpZiAodGhpcy5wb3B1cFZpc2libGUgfHwgdGhpcy5kaXNhYmxlZCkgcmV0dXJuO1xuICAgICAgdGhpcy5kZWZhdWx0T3BlbiA9IHRydWU7XG4gICAgICB0aGlzLiRlbWl0KCdvcGVuJywgZXZ0KTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpvcGVuJywgdHJ1ZSk7XG4gICAgfSxcbiAgICBjbG9zZVBvcHVwOiBmdW5jdGlvbiBjbG9zZVBvcHVwKCkge1xuICAgICAgaWYgKCF0aGlzLnBvcHVwVmlzaWJsZSkgcmV0dXJuO1xuICAgICAgdGhpcy5kZWZhdWx0T3BlbiA9IGZhbHNlO1xuICAgICAgdGhpcy4kZW1pdCgnY2xvc2UnKTtcbiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZTpvcGVuJywgZmFsc2UpO1xuICAgIH0sXG4gICAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHtcbiAgICAgIC8vIHdoZW4gdXNlIHNsb3QgaW5wdXRcbiAgICAgIGlmICh0aGlzLiRyZWZzLmlucHV0KSB7XG4gICAgICAgIHRoaXMuJHJlZnMuaW5wdXQuYmx1cigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZm9jdXM6IGZ1bmN0aW9uIGZvY3VzKCkge1xuICAgICAgaWYgKHRoaXMuJHJlZnMuaW5wdXQpIHtcbiAgICAgICAgdGhpcy4kcmVmcy5pbnB1dC5mb2N1cygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlSW5wdXRDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUlucHV0Q2hhbmdlKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5lZGl0YWJsZSB8fCB0aGlzLnVzZXJJbnB1dCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgdmFyIHRleHQgPSB0aGlzLnVzZXJJbnB1dC50cmltKCk7XG4gICAgICB0aGlzLnVzZXJJbnB1dCA9IG51bGw7XG5cbiAgICAgIGlmICh0ZXh0ID09PSAnJykge1xuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRhdGU7XG5cbiAgICAgIGlmICh0aGlzLnZhbGlkTXVsdGlwbGVUeXBlKSB7XG4gICAgICAgIGRhdGUgPSB0ZXh0LnNwbGl0KHRoaXMuaW5uZXJSYW5nZVNlcGFyYXRvcikubWFwKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5wYXJzZURhdGUodi50cmltKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5yYW5nZSkge1xuICAgICAgICB2YXIgYXJyID0gdGV4dC5zcGxpdCh0aGlzLmlubmVyUmFuZ2VTZXBhcmF0b3IpO1xuXG4gICAgICAgIGlmIChhcnIubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgLy8gTWF5YmUgdGhlIHNlcGFyYXRvciBkdXJpbmcgdGhlIGRheSBpcyB0aGUgc2FtZSBhcyB0aGUgc2VwYXJhdG9yIGZvciB0aGUgZGF0ZVxuICAgICAgICAgIC8vIGVnOiAyMDE5LTEwLTA5LTIwMjAtMDEtMDJcbiAgICAgICAgICBhcnIgPSB0ZXh0LnNwbGl0KHRoaXMuaW5uZXJSYW5nZVNlcGFyYXRvci50cmltKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0ZSA9IGFyci5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMzLnBhcnNlRGF0ZSh2LnRyaW0oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZSA9IHRoaXMucGFyc2VEYXRlKHRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1ZhbGlkVmFsdWVBbmROb3REaXNhYmxlZChkYXRlKSkge1xuICAgICAgICB0aGlzLmVtaXRWYWx1ZShkYXRlKTtcbiAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dC1lcnJvcicsIHRleHQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaGFuZGxlSW5wdXRJbnB1dDogZnVuY3Rpb24gaGFuZGxlSW5wdXRJbnB1dChldnQpIHtcbiAgICAgIC8vIHNsb3QgaW5wdXQgdi1tb2RlbFxuICAgICAgdGhpcy51c2VySW5wdXQgPSB0eXBlb2YgZXZ0ID09PSAnc3RyaW5nJyA/IGV2dCA6IGV2dC50YXJnZXQudmFsdWU7XG4gICAgfSxcbiAgICBoYW5kbGVJbnB1dEtleWRvd246IGZ1bmN0aW9uIGhhbmRsZUlucHV0S2V5ZG93bihldnQpIHtcbiAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGU7IC8vIFRhYiA5IG9yIEVudGVyIDEzXG5cbiAgICAgIGlmIChrZXlDb2RlID09PSA5KSB7XG4gICAgICAgIHRoaXMuY2xvc2VQb3B1cCgpO1xuICAgICAgfSBlbHNlIGlmIChrZXlDb2RlID09PSAxMykge1xuICAgICAgICB0aGlzLmhhbmRsZUlucHV0Q2hhbmdlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBoYW5kbGVJbnB1dEJsdXI6IGZ1bmN0aW9uIGhhbmRsZUlucHV0Qmx1cihldnQpIHtcbiAgICAgIC8vIHRhYiBjbG9zZVxuICAgICAgdGhpcy4kZW1pdCgnYmx1cicsIGV2dCk7XG4gICAgfSxcbiAgICBoYW5kbGVJbnB1dEZvY3VzOiBmdW5jdGlvbiBoYW5kbGVJbnB1dEZvY3VzKGV2dCkge1xuICAgICAgdGhpcy5vcGVuUG9wdXAoZXZ0KTtcbiAgICAgIHRoaXMuJGVtaXQoJ2ZvY3VzJywgZXZ0KTtcbiAgICB9LFxuICAgIGhhc1Nsb3Q6IGZ1bmN0aW9uIGhhc1Nsb3QobmFtZSkge1xuICAgICAgcmV0dXJuICEhKHRoaXMuJHNsb3RzW25hbWVdIHx8IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdKTtcbiAgICB9LFxuICAgIHJlbmRlclNsb3Q6IGZ1bmN0aW9uIHJlbmRlclNsb3QobmFtZSwgZmFsbGJhY2ssIHByb3BzKSB7XG4gICAgICB2YXIgc2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG5cbiAgICAgIGlmIChzbG90Rm4pIHtcbiAgICAgICAgcmV0dXJuIHNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgICB9LFxuICAgIHJlbmRlcklucHV0OiBmdW5jdGlvbiByZW5kZXJJbnB1dCgpIHtcbiAgICAgIHZhciBoID0gdGhpcy4kY3JlYXRlRWxlbWVudDtcbiAgICAgIHZhciBwcmVmaXhDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3M7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgbmFtZTogJ2RhdGUnLFxuICAgICAgICB0eXBlOiAndGV4dCcsXG4gICAgICAgIGF1dG9jb21wbGV0ZTogJ29mZicsXG4gICAgICAgIHZhbHVlOiB0aGlzLnRleHQsXG4gICAgICAgIGNsYXNzOiB0aGlzLmlucHV0Q2xhc3MgfHwgXCJcIi5jb25jYXQodGhpcy5wcmVmaXhDbGFzcywgXCItaW5wdXRcIiksXG4gICAgICAgIHJlYWRvbmx5OiAhdGhpcy5lZGl0YWJsZSxcbiAgICAgICAgZGlzYWJsZWQ6IHRoaXMuZGlzYWJsZWQsXG4gICAgICAgIHBsYWNlaG9sZGVyOiB0aGlzLnBsYWNlaG9sZGVyXG4gICAgICB9LCB0aGlzLmlucHV0QXR0cik7XG5cbiAgICAgIHZhciB2YWx1ZSA9IHByb3BzLnZhbHVlLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzLFxuICAgICAgICAgIGF0dHJzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJ2YWx1ZVwiLCBcImNsYXNzXCJdKTtcblxuICAgICAgdmFyIGV2ZW50cyA9IHtcbiAgICAgICAga2V5ZG93bjogdGhpcy5oYW5kbGVJbnB1dEtleWRvd24sXG4gICAgICAgIGZvY3VzOiB0aGlzLmhhbmRsZUlucHV0Rm9jdXMsXG4gICAgICAgIGJsdXI6IHRoaXMuaGFuZGxlSW5wdXRCbHVyLFxuICAgICAgICBpbnB1dDogdGhpcy5oYW5kbGVJbnB1dElucHV0LFxuICAgICAgICBjaGFuZ2U6IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2VcbiAgICAgIH07XG4gICAgICB2YXIgaW5wdXQgPSB0aGlzLnJlbmRlclNsb3QoJ2lucHV0JywgaChcImlucHV0XCIsIHtcbiAgICAgICAgXCJkb21Qcm9wc1wiOiB7XG4gICAgICAgICAgXCJ2YWx1ZVwiOiB2YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBcImNsYXNzXCI6IGNsYXNzTmFtZSxcbiAgICAgICAgXCJhdHRyc1wiOiBfb2JqZWN0U3ByZWFkMih7fSwgYXR0cnMpLFxuICAgICAgICBcIm9uXCI6IF9vYmplY3RTcHJlYWQyKHt9LCBldmVudHMpLFxuICAgICAgICBcInJlZlwiOiBcImlucHV0XCJcbiAgICAgIH0pLCB7XG4gICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgZXZlbnRzOiBldmVudHNcbiAgICAgIH0pO1xuICAgICAgdmFyIGNhbGVuZGFySWNvbiA9IHRoaXMudHlwZSA9PT0gJ3RpbWUnID8gaChfX3Z1ZV9jb21wb25lbnRfXyQyKSA6IGgoX192dWVfY29tcG9uZW50X18kMSk7XG4gICAgICByZXR1cm4gaChcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJcIi5jb25jYXQocHJlZml4Q2xhc3MsIFwiLWlucHV0LXdyYXBwZXJcIiksXG4gICAgICAgIFwib25cIjoge1xuICAgICAgICAgIFwibW91c2Vkb3duXCI6IHRoaXMub3BlblBvcHVwLFxuICAgICAgICAgIFwidG91Y2hzdGFydFwiOiB0aGlzLm9wZW5Qb3B1cFxuICAgICAgICB9XG4gICAgICB9LCBbaW5wdXQsIHRoaXMuc2hvd0NsZWFySWNvbiA/IGgoXCJpXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItaWNvbi1jbGVhclwiKSxcbiAgICAgICAgXCJvblwiOiB7XG4gICAgICAgICAgXCJtb3VzZWRvd25cIjogdGhpcy5oYW5kbGVDbGVhcixcbiAgICAgICAgICBcInRvdWNoc3RhcnRcIjogdGhpcy5oYW5kbGVDbGVhclxuICAgICAgICB9XG4gICAgICB9LCBbdGhpcy5yZW5kZXJTbG90KCdpY29uLWNsZWFyJywgaChfX3Z1ZV9jb21wb25lbnRfXyQzKSldKSA6IG51bGwsIGgoXCJpXCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItaWNvbi1jYWxlbmRhclwiKVxuICAgICAgfSwgW3RoaXMucmVuZGVyU2xvdCgnaWNvbi1jYWxlbmRhcicsIGNhbGVuZGFySWNvbildKV0pO1xuICAgIH0sXG4gICAgcmVuZGVyQ29udGVudDogZnVuY3Rpb24gcmVuZGVyQ29udGVudCgpIHtcbiAgICAgIHZhciBoID0gdGhpcy4kY3JlYXRlRWxlbWVudDtcbiAgICAgIHZhciBtYXAgPSB0aGlzLnJhbmdlID8gY29tcG9uZW50UmFuZ2VNYXAgOiBjb21wb25lbnRNYXA7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gbWFwW3RoaXMudHlwZV0gfHwgbWFwLmRlZmF1bHQ7XG5cbiAgICAgIHZhciBwcm9wcyA9IF9vYmplY3RTcHJlYWQyKHt9LCBwaWNrKHRoaXMuJHByb3BzLCBPYmplY3Qua2V5cyhDb21wb25lbnQucHJvcHMpKSwge1xuICAgICAgICB2YWx1ZTogdGhpcy5jdXJyZW50VmFsdWVcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgb24gPSBfb2JqZWN0U3ByZWFkMih7fSwgcGljayh0aGlzLiRsaXN0ZW5lcnMsIENvbXBvbmVudC5lbWl0cyB8fCBbXSksIHtcbiAgICAgICAgc2VsZWN0OiB0aGlzLmhhbmRsZVNlbGVjdERhdGVcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgY29udGVudCA9IGgoQ29tcG9uZW50LCBoZWxwZXIoW3t9LCB7XG4gICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgb246IG9uLFxuICAgICAgICByZWY6ICdwaWNrZXInXG4gICAgICB9XSkpO1xuICAgICAgcmV0dXJuIGgoXCJkaXZcIiwge1xuICAgICAgICBcImNsYXNzXCI6IFwiXCIuY29uY2F0KHRoaXMucHJlZml4Q2xhc3MsIFwiLWRhdGVwaWNrZXItYm9keVwiKVxuICAgICAgfSwgW3RoaXMucmVuZGVyU2xvdCgnY29udGVudCcsIGNvbnRlbnQsIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuY3VycmVudFZhbHVlLFxuICAgICAgICBlbWl0OiB0aGlzLmhhbmRsZVNlbGVjdERhdGVcbiAgICAgIH0pXSk7XG4gICAgfSxcbiAgICByZW5kZXJTaWRlYmFyOiBmdW5jdGlvbiByZW5kZXJTaWRlYmFyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBoID0gdGhpcy4kY3JlYXRlRWxlbWVudDtcbiAgICAgIHZhciBwcmVmaXhDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3M7XG4gICAgICByZXR1cm4gaChcImRpdlwiLCB7XG4gICAgICAgIFwiY2xhc3NcIjogXCJcIi5jb25jYXQocHJlZml4Q2xhc3MsIFwiLWRhdGVwaWNrZXItc2lkZWJhclwiKVxuICAgICAgfSwgW3RoaXMucmVuZGVyU2xvdCgnc2lkZWJhcicsIG51bGwsIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuY3VycmVudFZhbHVlLFxuICAgICAgICBlbWl0OiB0aGlzLmhhbmRsZVNlbGVjdERhdGVcbiAgICAgIH0pLCB0aGlzLnNob3J0Y3V0cy5tYXAoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgcmV0dXJuIGgoXCJidXR0b25cIiwge1xuICAgICAgICAgIFwia2V5XCI6IGksXG4gICAgICAgICAgXCJhdHRyc1wiOiB7XG4gICAgICAgICAgICBcImRhdGEtaW5kZXhcIjogaSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJ1dHRvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNsYXNzXCI6IFwiXCIuY29uY2F0KHByZWZpeENsYXNzLCBcIi1idG4gXCIpLmNvbmNhdChwcmVmaXhDbGFzcywgXCItYnRuLXRleHQgXCIpLmNvbmNhdChwcmVmaXhDbGFzcywgXCItYnRuLXNob3J0Y3V0XCIpLFxuICAgICAgICAgIFwib25cIjoge1xuICAgICAgICAgICAgXCJjbGlja1wiOiBfdGhpczQuaGFuZGxlU2VsZWN0U2hvcnRjdXRcbiAgICAgICAgICB9XG4gICAgICAgIH0sIFt2LnRleHRdKTtcbiAgICAgIH0pXSk7XG4gICAgfSxcbiAgICByZW5kZXJIZWFkZXI6IGZ1bmN0aW9uIHJlbmRlckhlYWRlcigpIHtcbiAgICAgIHZhciBoID0gdGhpcy4kY3JlYXRlRWxlbWVudDtcbiAgICAgIHJldHVybiBoKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdCh0aGlzLnByZWZpeENsYXNzLCBcIi1kYXRlcGlja2VyLWhlYWRlclwiKVxuICAgICAgfSwgW3RoaXMucmVuZGVyU2xvdCgnaGVhZGVyJywgbnVsbCwge1xuICAgICAgICB2YWx1ZTogdGhpcy5jdXJyZW50VmFsdWUsXG4gICAgICAgIGVtaXQ6IHRoaXMuaGFuZGxlU2VsZWN0RGF0ZVxuICAgICAgfSldKTtcbiAgICB9LFxuICAgIHJlbmRlckZvb3RlcjogZnVuY3Rpb24gcmVuZGVyRm9vdGVyKCkge1xuICAgICAgdmFyIGggPSB0aGlzLiRjcmVhdGVFbGVtZW50O1xuICAgICAgdmFyIHByZWZpeENsYXNzID0gdGhpcy5wcmVmaXhDbGFzcztcbiAgICAgIHJldHVybiBoKFwiZGl2XCIsIHtcbiAgICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItZGF0ZXBpY2tlci1mb290ZXJcIilcbiAgICAgIH0sIFt0aGlzLnJlbmRlclNsb3QoJ2Zvb3RlcicsIG51bGwsIHtcbiAgICAgICAgdmFsdWU6IHRoaXMuY3VycmVudFZhbHVlLFxuICAgICAgICBlbWl0OiB0aGlzLmhhbmRsZVNlbGVjdERhdGVcbiAgICAgIH0pLCB0aGlzLmNvbmZpcm0gPyBoKFwiYnV0dG9uXCIsIHtcbiAgICAgICAgXCJhdHRyc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYnV0dG9uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItYnRuIFwiKS5jb25jYXQocHJlZml4Q2xhc3MsIFwiLWRhdGVwaWNrZXItYnRuLWNvbmZpcm1cIiksXG4gICAgICAgIFwib25cIjoge1xuICAgICAgICAgIFwiY2xpY2tcIjogdGhpcy5oYW5kbGVDb25maXJtRGF0ZVxuICAgICAgICB9XG4gICAgICB9LCBbdGhpcy5jb25maXJtVGV4dF0pIDogbnVsbF0pO1xuICAgIH1cbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9jbGFzcztcblxuICAgIHZhciBoID0gYXJndW1lbnRzWzBdO1xuICAgIHZhciBwcmVmaXhDbGFzcyA9IHRoaXMucHJlZml4Q2xhc3MsXG4gICAgICAgIGlubGluZSA9IHRoaXMuaW5saW5lLFxuICAgICAgICBkaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XG4gICAgdmFyIHNpZGVkYXIgPSB0aGlzLmhhc1Nsb3QoJ3NpZGViYXInKSB8fCB0aGlzLnNob3J0Y3V0cy5sZW5ndGggPyB0aGlzLnJlbmRlclNpZGViYXIoKSA6IG51bGw7XG4gICAgdmFyIGNvbnRlbnQgPSBoKFwiZGl2XCIsIHtcbiAgICAgIFwiY2xhc3NcIjogXCJcIi5jb25jYXQocHJlZml4Q2xhc3MsIFwiLWRhdGVwaWNrZXItY29udGVudFwiKVxuICAgIH0sIFt0aGlzLmhhc1Nsb3QoJ2hlYWRlcicpID8gdGhpcy5yZW5kZXJIZWFkZXIoKSA6IG51bGwsIHRoaXMucmVuZGVyQ29udGVudCgpLCB0aGlzLmhhc1Nsb3QoJ2Zvb3RlcicpIHx8IHRoaXMuY29uZmlybSA/IHRoaXMucmVuZGVyRm9vdGVyKCkgOiBudWxsXSk7XG4gICAgcmV0dXJuIGgoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiAoX2NsYXNzID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiXCIuY29uY2F0KHByZWZpeENsYXNzLCBcIi1kYXRlcGlja2VyXCIpLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzcywgXCJcIi5jb25jYXQocHJlZml4Q2xhc3MsIFwiLWRhdGVwaWNrZXItcmFuZ2VcIiksIHRoaXMucmFuZ2UpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzLCBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItZGF0ZXBpY2tlci1pbmxpbmVcIiksIGlubGluZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3MsIFwiZGlzYWJsZWRcIiwgZGlzYWJsZWQpLCBfY2xhc3MpXG4gICAgfSwgWyFpbmxpbmUgPyB0aGlzLnJlbmRlcklucHV0KCkgOiBudWxsLCAhaW5saW5lID8gaChfX3Z1ZV9jb21wb25lbnRfXywge1xuICAgICAgXCJyZWZcIjogXCJwb3B1cFwiLFxuICAgICAgXCJjbGFzc1wiOiB0aGlzLnBvcHVwQ2xhc3MsXG4gICAgICBcInN0eWxlXCI6IHRoaXMucG9wdXBTdHlsZSxcbiAgICAgIFwiYXR0cnNcIjoge1xuICAgICAgICBcInZpc2libGVcIjogdGhpcy5wb3B1cFZpc2libGUsXG4gICAgICAgIFwiYXBwZW5kVG9Cb2R5XCI6IHRoaXMuYXBwZW5kVG9Cb2R5XG4gICAgICB9LFxuICAgICAgXCJvblwiOiB7XG4gICAgICAgIFwiY2xpY2tvdXRzaWRlXCI6IHRoaXMuaGFuZGxlQ2xpY2tPdXRTaWRlXG4gICAgICB9XG4gICAgfSwgW3NpZGVkYXIsIGNvbnRlbnRdKSA6IGgoXCJkaXZcIiwge1xuICAgICAgXCJjbGFzc1wiOiBcIlwiLmNvbmNhdChwcmVmaXhDbGFzcywgXCItZGF0ZXBpY2tlci1tYWluXCIpXG4gICAgfSwgW3NpZGVkYXIsIGNvbnRlbnRdKV0pO1xuICB9XG59O1xuXG5EYXRlUGlja2VyLmxvY2FsZSA9IGxvY2FsZTtcblxuRGF0ZVBpY2tlci5pbnN0YWxsID0gZnVuY3Rpb24gaW5zdGFsbChWdWUpIHtcbiAgVnVlLmNvbXBvbmVudChEYXRlUGlja2VyLm5hbWUsIERhdGVQaWNrZXIpO1xufTtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5WdWUpIHtcbiAgRGF0ZVBpY2tlci5pbnN0YWxsKHdpbmRvdy5WdWUpO1xufVxuXG5fZXh0ZW5kcyhEYXRlUGlja2VyLCB7XG4gIENhbGVuZGFyUGFuZWw6IENhbGVuZGFyUGFuZWwsXG4gIENhbGVuZGFyUmFuZ2U6IENhbGVuZGFyUmFuZ2UsXG4gIFRpbWVQYW5lbDogX192dWVfY29tcG9uZW50X18kYixcbiAgVGltZVJhbmdlOiBUaW1lUmFuZ2UsXG4gIERhdGV0aW1lUGFuZWw6IERhdGV0aW1lUGFuZWwsXG4gIERhdGV0aW1lUmFuZ2U6IERhdGV0aW1lUmFuZ2Vcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlUGlja2VyO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ3Z1ZTItZGF0ZXBpY2tlcicpKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ3Z1ZTItZGF0ZXBpY2tlciddLCBmYWN0b3J5KSA6XG5cdChnbG9iYWwgPSBnbG9iYWwgfHwgc2VsZiwgKGdsb2JhbC5EYXRlUGlja2VyID0gZ2xvYmFsLkRhdGVQaWNrZXIgfHwge30sIGdsb2JhbC5EYXRlUGlja2VyLmxhbmcgPSBnbG9iYWwuRGF0ZVBpY2tlci5sYW5nIHx8IHt9LCBnbG9iYWwuRGF0ZVBpY2tlci5sYW5nLnJ1ID0gZmFjdG9yeShnbG9iYWwuRGF0ZVBpY2tlcikpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChEYXRlUGlja2VyKSB7ICd1c2Ugc3RyaWN0JztcblxuXHREYXRlUGlja2VyID0gRGF0ZVBpY2tlciAmJiBEYXRlUGlja2VyLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykgPyBEYXRlUGlja2VyWydkZWZhdWx0J10gOiBEYXRlUGlja2VyO1xuXG5cdGZ1bmN0aW9uIHVud3JhcEV4cG9ydHMgKHgpIHtcblx0XHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4WydkZWZhdWx0J10gOiB4O1xuXHR9XG5cblx0ZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRcdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcblx0fVxuXG5cdHZhciBydSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cdHZhciBsb2NhbGUgPSB7XG5cdCAgbW9udGhzOiBbJ9GP0L3QstCw0YDRjCcsICfRhNC10LLRgNCw0LvRjCcsICfQvNCw0YDRgicsICfQsNC/0YDQtdC70YwnLCAn0LzQsNC5JywgJ9C40Y7QvdGMJywgJ9C40Y7Qu9GMJywgJ9Cw0LLQs9GD0YHRgicsICfRgdC10L3RgtGP0LHRgNGMJywgJ9C+0LrRgtGP0LHRgNGMJywgJ9C90L7Rj9Cx0YDRjCcsICfQtNC10LrQsNCx0YDRjCddLFxuXHQgIG1vbnRoc1Nob3J0OiBbJ9GP0L3Qsi4nLCAn0YTQtdCy0YAuJywgJ9C80LDRgNGCJywgJ9Cw0L/RgC4nLCAn0LzQsNC5JywgJ9C40Y7QvdGMJywgJ9C40Y7Qu9GMJywgJ9Cw0LLQsy4nLCAn0YHQtdC90YIuJywgJ9C+0LrRgi4nLCAn0L3QvtGP0LEuJywgJ9C00LXQui4nXSxcblx0ICB3ZWVrZGF5czogWyfQstC+0YHQutGA0LXRgdC10L3RjNC1JywgJ9C/0L7QvdC10LTQtdC70YzQvdC40LonLCAn0LLRgtC+0YDQvdC40LonLCAn0YHRgNC10LTQsCcsICfRh9C10YLQstC10YDQsycsICfQv9GP0YLQvdC40YbQsCcsICfRgdGD0LHQsdC+0YLQsCddLFxuXHQgIHdlZWtkYXlzU2hvcnQ6IFsn0LLRgScsICfQv9C9JywgJ9Cy0YInLCAn0YHRgCcsICfRh9GCJywgJ9C/0YInLCAn0YHQsSddLFxuXHQgIHdlZWtkYXlzTWluOiBbJ9Cy0YEnLCAn0L/QvScsICfQstGCJywgJ9GB0YAnLCAn0YfRgicsICfQv9GCJywgJ9GB0LEnXSxcblx0ICBmaXJzdERheU9mV2VlazogMSxcblx0ICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcblx0fTtcblx0dmFyIF9kZWZhdWx0ID0gbG9jYWxlO1xuXHRleHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcblx0fSk7XG5cblx0dmFyIHJ1JDEgPSB1bndyYXBFeHBvcnRzKHJ1KTtcblxuXHR2YXIgbGFuZyA9IHtcblx0ICBmb3JtYXRMb2NhbGU6IHJ1JDEsXG5cdCAgeWVhckZvcm1hdDogJ1lZWVknLFxuXHQgIG1vbnRoRm9ybWF0OiAnTU1NJyxcblx0ICBtb250aEJlZm9yZVllYXI6IHRydWVcblx0fTtcblx0RGF0ZVBpY2tlci5sb2NhbGUoJ3J1JywgbGFuZyk7XG5cblx0cmV0dXJuIGxhbmc7XG5cbn0pKSk7XG4iXSwic291cmNlUm9vdCI6IiJ9